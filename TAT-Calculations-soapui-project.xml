<?xml version="1.0" encoding="UTF-8"?>
<con:soapui-project id="05560eea-2214-4a60-8e28-8ddc00577101" activeEnvironment="Default environment" name="TAT-Calculations" lastOpened="2016-06-10T12:06:47.441+05:30" resourceRoot="" soapui-version="6.0.0" xmlns:con="http://eviware.com/soapui/config"><con:settings/><con:interface xsi:type="con:RestService" id="9afe1624-2fd6-4dfc-8029-01445bad2c46" wadlVersion="http://wadl.dev.java.net/2009/02" name="FindQuotes" type="rest" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>https://qa-internal.dev.ssi-cloud.com</con:endpoint></con:endpoints><con:resource name="FindQuotes" path="/rest/api/dell/app.quotes::find" id="577c0b28-b0ca-485d-a4d7-58d4e29ecf9d"><con:settings/><con:parameters/><con:method name="App.quotes::find" id="77ba1aba-9fea-4479-a748-010f52e0e607" method="POST"><con:settings/><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>text/plain</con:mediaType><con:status>401</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:app="https://qa-internal.dev.ssi-cloud.com/rest/api/dell/app.quotes::find">app:Response</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/html; charset=utf-8</con:mediaType><con:status>400</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="Request 1" id="0303b810-05fa-4e34-9420-745dad712ec3" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://qa-internal.dev.ssi-cloud.com</con:endpoint><con:request/><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" id="9160ef55-16c9-464d-aff3-b5d913f08528" wadlVersion="http://wadl.dev.java.net/2009/02" name="QuoteDetails" type="rest" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>https://qa-internal.dev.ssi-cloud.com</con:endpoint></con:endpoints><con:resource name="App.quotes::find" path="/rest/api/dell/app.quotes::find" id="80eba86f-2bff-4b7d-8f74-d3119baf7911"><con:settings/><con:parameters><con:parameter><con:name>inversesummary</con:name><con:value>true</con:value><con:style>QUERY</con:style><con:default>true</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>extinversesummary</con:name><con:value>true</con:value><con:style>QUERY</con:style><con:default>true</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="App.quotes::find" id="add23ade-3d6a-4a02-a685-6d7e82fe1863" method="POST"><con:settings/><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:app="https://qa-internal.dev.ssi-cloud.com/rest/api/dell/app.quotes::find">app:Response</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/plain</con:mediaType><con:status>401</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/json</con:mediaType><con:status>500</con:status><con:params/><con:element xmlns:app="https://qa-internal.dev.ssi-cloud.com/rest/api/dell/app.quotes::find">app:Fault</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="Request 1" id="73cce1c1-ad05-4f68-83e5-e387a9e63e66" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://qa-internal.dev.ssi-cloud.com</con:endpoint><con:request/><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters>
  <con:entry key="inversesummary" value="true"/>
  <con:entry key="extinversesummary" value="true"/>
</con:parameters><con:parameterOrder><con:entry>inversesummary</con:entry><con:entry>extinversesummary</con:entry></con:parameterOrder></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" id="f4cfc473-2708-4d4b-9af8-5428d5108426" wadlVersion="http://wadl.dev.java.net/2009/02" name="FindActivities" type="rest" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>https://qa-internal.dev.ssi-cloud.com</con:endpoint></con:endpoints><con:resource name="Core.activities::getrhpactivities" path="/rest/api/dell/core.activities::getrhpactivities" id="0c824ed4-046f-4b4c-9e10-9bb83793d25d"><con:settings/><con:parameters/><con:method name="Core.activities::getrhpactivities" id="1535488c-60bc-41bf-93fd-008801d23196" method="POST"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:core="https://qa-internal.dev.ssi-cloud.com/rest/api/dell/core.activities::getrhpactivities">core:Response</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>text/plain</con:mediaType><con:status>401</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/html; charset=utf-8</con:mediaType><con:status>400</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="Request 1" id="ec32ed71-dac8-4f9f-8863-509201de0075" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://qa-internal.dev.ssi-cloud.com</con:endpoint><con:request/><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="Login - qaDev" type="rest" basePath="" definitionUrl="D:\SOAP UI\DPS\Login - qaDev_1.wadl" id="487fd613-29ca-4c72-a0b7-48a3326c34df" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart="Login - qaDev.wadl"><con:part><con:url>Login - qaDev.wadl</con:url><con:content><![CDATA[<application xmlns="http://wadl.dev.java.net/2009/02">
  <doc xml:lang="en" title="Login - qaDev"/>
  <resources base="https://qa.dev.ssi-cloud.com">
    <resource path="login.json" id="cookieRequest">
      <doc xml:lang="en" title="cookieRequest"/>
      <method name="GET" id="cookieGetMethod">
        <doc xml:lang="en" title="cookieGetMethod"/>
        <request/>
        <response status="200">
          <representation mediaType="application/json"/>
        </response>
      </method>
      <method name="POST" id="cookiePostMethod">
        <doc xml:lang="en" title="cookiePostMethod"/>
        <request>
          <representation mediaType="application/json"/>
        </request>
        <response status="">
          <representation mediaType="application/json"/>
          <representation mediaType="application/json"/>
          <representation mediaType="application/json"/>
          <representation mediaType="application/json"/>
        </response>
        <response status="200">
          <representation mediaType="application/json"/>
        </response>
        <response status="403 410">
          <representation mediaType="text/html"/>
        </response>
        <response status="404">
          <representation mediaType="text/plain"/>
        </response>
      </method>
    </resource>
  </resources>
</application>]]></con:content><con:type>http://wadl.dev.java.net/2009/02</con:type></con:part></con:definitionCache><con:endpoints><con:endpoint>https://qa.dev.ssi-cloud.com</con:endpoint></con:endpoints><con:resource name="cookieRequest" path="/login.json" id="02728672-e5c2-4455-85ef-4ec46344d8d7"><con:settings/><con:parameters/><con:method name="cookieGetMethod" method="GET" id="e51abfb7-9e4d-4e6f-918e-11afbcb95ef9"><con:settings/><con:parameters/><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/json" id="1636cd74-b619-4d2d-8eff-14e4392bb25d"><con:settings/><con:endpoint>https://qa.dev.ssi-cloud.com</con:endpoint><con:request/><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method><con:method name="cookiePostMethod" method="POST" id="725cd338-6652-4c9d-a12d-c813ebaf0413"><con:settings/><con:parameters/><con:representation type="REQUEST" id=""><con:mediaType>application/json</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/html</con:mediaType><con:status>403 410</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/plain</con:mediaType><con:status>404</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/json" id="2841cc4e-89dc-4845-acac-3b514129718c" postQueryString="false"><con:settings/><con:endpoint>https://qa.dev.ssi-cloud.com</con:endpoint><con:request/><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" id="c322d11a-1f71-44b8-8a84-f8e6ea95201a" wadlVersion="http://wadl.dev.java.net/2009/02" name="Complete Quote" type="rest" definitionUrl="C:\Users\ankits.rajput\Desktop\quoteComplete.wadl" basePath="" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart="file:/C:/Users/ankits.rajput/Desktop/quoteComplete.wadl"><con:part><con:url>file:/C:/Users/ankits.rajput/Desktop/quoteComplete.wadl</con:url><con:content><![CDATA[<application xmlns="http://wadl.dev.java.net/2009/02">
  <doc xml:lang="en" title="Complete Quote"/>
  <resources base="https://stgnext.ssi-cloud.com">
    <resource path="rest/api//app.quotes/::getCreateQuoteInput" id="Create Quote Input">
      <doc xml:lang="en" title="Create Quote Input"/>
      <method name="POST" id="Quote Input">
        <doc xml:lang="en" title="Quote Input"/>
        <request>
          <representation mediaType="application/json"/>
        </request>
        <response status="">
          <representation mediaType="application/json"/>
          <representation mediaType="application/json"/>
        </response>
        <response status="200">
          <representation mediaType="application/json"/>
        </response>
      </method>
    </resource>
    <resource path="rest/api//app.quotes/::createQuote" id="Complete Quote">
      <doc xml:lang="en" title="Complete Quote"/>
      <param name="inversesummary" default="true" type="xs:string" required="false" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
      <method name="POST" id="Complete Quote">
        <doc xml:lang="en" title="Complete Quote"/>
        <request>
          <param name="inversesummary" default="true" type="xs:string" required="false" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
          <representation mediaType="application/json"/>
        </request>
        <response status="">
          <representation mediaType="application/json"/>
          <representation mediaType="application/json"/>
        </response>
        <response status="200">
          <representation mediaType="application/json"/>
        </response>
      </method>
    </resource>
  </resources>
</application>]]></con:content><con:type>http://wadl.dev.java.net/2009/02</con:type></con:part></con:definitionCache><con:endpoints><con:endpoint>https://stgnext.ssi-cloud.com</con:endpoint></con:endpoints><con:resource name="Create Quote Input" path="/rest/api/${#TestSuite#tenant}/app.quotes/${#TestCase#QuoteID}::getCreateQuoteInput" id="50997074-6dad-4431-9d05-2a40775a987e"><con:settings/><con:parameters/><con:method name="Quote Input" id="4817cdda-40d0-4c9d-9c8e-23a5c4103bcf" method="POST"><con:settings/><con:parameters/><con:representation type="REQUEST" id=""><con:mediaType>application/json</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" id="469cf6e2-5de3-424b-bb04-ae9da81656f3" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Cookie" value="${#TestSuite#Cookie}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://pe-internal.dev.ssi-cloud.com</con:endpoint><con:request/><con:originalUri>https://pe-internal.dev.ssi-cloud.com/rest/api/dell/app.quotes/::getCreateQuoteInput</con:originalUri><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method></con:resource><con:resource name="Complete Quote" path="/rest/api/${#TestSuite#tenant}/app.quotes/${#TestCase#QuoteID}::createQuote" id="bed1b2ad-e132-4e78-89e1-271bae381578"><con:settings/><con:parameters><con:parameter><con:name>inversesummary</con:name><con:value>true</con:value><con:style>QUERY</con:style><con:default>true</con:default></con:parameter></con:parameters><con:method name="Complete Quote" id="3dc03f81-92fc-40ec-9bbf-a5c03e66a4ca" method="POST"><con:settings/><con:parameters/><con:representation type="REQUEST" id=""><con:mediaType>application/json</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" id="f4d939f4-f051-46b2-a817-3daf804de939" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Cookie" value="${#TestSuite#Cookie}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://pe-internal.dev.ssi-cloud.com</con:endpoint><con:request/><con:originalUri>https://pe-internal.dev.ssi-cloud.com/rest/api/dell/app.quotes/::createQuote</con:originalUri><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" id="e8f6541e-f2cd-4d02-8110-a3a4c703a3a3" wadlVersion="http://wadl.dev.java.net/2009/02" name="FindTask" type="rest" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>https://pe-internal.dev.ssi-cloud.com</con:endpoint></con:endpoints><con:resource name="App.tasks::find" path="/rest/api/${#TestSuite#tenant}/app.tasks::find" id="09bb4994-9994-440f-9ff4-eda900a31744"><con:settings/><con:parameters/><con:method name="App.tasks::find" id="4c03b597-eb72-4d90-b1de-229185879c3e" method="POST"><con:settings/><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>text/html; charset=utf-8</con:mediaType><con:status>400</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:app="https://pe-internal.dev.ssi-cloud.com/rest/api/dell/app.tasks::find">app:Response</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>503</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>503</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>503</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>503</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>503</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>503</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="Request 1" id="72d7ffb4-c9d1-4bee-8c95-65eb37ae1f09" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://pe-internal.dev.ssi-cloud.com</con:endpoint><con:request/><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" id="587286c0-7cb7-454e-9ec3-c29f35f3d114" wadlVersion="http://wadl.dev.java.net/2009/02" name="TaskDetails" type="rest" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>https://pe-internal.dev.ssi-cloud.com</con:endpoint></con:endpoints><con:resource name="App.tasks::find" path="/rest/api/${#TestSuite#tenant}/app.tasks::find" id="30621514-3ec8-4eb7-ac3c-b1540679bd2f"><con:settings/><con:parameters><con:parameter><con:name>inversesummary</con:name><con:value>true</con:value><con:style>QUERY</con:style><con:default>true</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="App.tasks::find" id="84f106ea-cf14-4845-a810-3f59af65057d" method="POST"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:app="https://pe-internal.dev.ssi-cloud.com/rest/api/dell/app.tasks::find">app:Response</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>text/html; charset=utf-8</con:mediaType><con:status>400</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/plain</con:mediaType><con:status>401</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="Request 1" id="a283c0b1-fe82-48ae-a333-6e53781e3cc8" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://pe-internal.dev.ssi-cloud.com</con:endpoint><con:request/><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters><entry key="inversesummary" value="true" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>inversesummary</con:entry></con:parameterOrder></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" id="e693dd0a-74f8-46e8-ba68-3b08e4860105" wadlVersion="http://wadl.dev.java.net/2009/02" name="CompleteTask" type="rest" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>https://pe-internal.dev.ssi-cloud.com</con:endpoint></con:endpoints><con:resource name="511a69f263165f8e0f05266e::completeTask" path="/rest/api/${#TestSuite#tenant}/app.tasks/${#TestCase#TaskID}::completeTask" id="fa3c21ad-c41e-4f3f-8035-b8ef7b9a4e50"><con:settings/><con:parameters><con:parameter><con:name>inversesummary</con:name><con:value>true</con:value><con:style>QUERY</con:style><con:default>true</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>extinversesummary</con:name><con:value>true</con:value><con:style>QUERY</con:style><con:default>true</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="511a69f263165f8e0f05266e::completeTask" id="2f43f90f-a272-4e7e-876f-d3afe97d5690" method="POST"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType>text/html; charset=utf-8</con:mediaType><con:status>404 400</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:com="https://pe-internal.dev.ssi-cloud.com/rest/api/dell/app.tasks/::completeTask">com:Response</con:element></con:representation><con:request name="Request 1" id="b101cbcc-5363-41ee-bc9f-5eb57ab80861" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://pe-internal.dev.ssi-cloud.com</con:endpoint><con:request/><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters>
  <con:entry key="inversesummary" value="true"/>
  <con:entry key="extinversesummary" value="true"/>
</con:parameters><con:parameterOrder><con:entry>inversesummary</con:entry><con:entry>extinversesummary</con:entry></con:parameterOrder></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" id="1e6ee873-0aa7-415d-8f2f-c323b96cd3bb" wadlVersion="http://wadl.dev.java.net/2009/02" name="FindBooking" type="rest" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>https://pe-internal.dev.ssi-cloud.com</con:endpoint></con:endpoints><con:resource name="App.bookings::find" path="/rest/api/${#TestSuite#tenant}/app.bookings::find" id="6465cbbc-416a-4512-a67b-54449d41f742"><con:settings/><con:parameters/><con:method name="App.bookings::find" id="a8e3869a-29f5-4055-b469-8ba24b488039" method="POST"><con:settings/><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:app="https://pe-internal.dev.ssi-cloud.com/rest/api/pe-internal.dev/app.bookings::find">app:Response</con:element></con:representation><con:request name="Request 1" id="d5f2a138-3d23-467a-9912-55909aa3fc9d" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://pe-internal.dev.ssi-cloud.com</con:endpoint><con:request/><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" id="c8357d35-4f61-4c54-9bfb-3176add12045" wadlVersion="http://wadl.dev.java.net/2009/02" name="BookingDetails" type="rest" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>https://pe-internal.dev.ssi-cloud.com</con:endpoint></con:endpoints><con:resource name="App.bookings::find" path="/rest/api/${#TestSuite#tenant}/app.bookings::find" id="c2c43601-8a88-4c8f-8872-b1f4e7305629"><con:settings/><con:parameters><con:parameter><con:name>inversesummary</con:name><con:value>true</con:value><con:style>QUERY</con:style><con:default>true</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>extinversesummary</con:name><con:value>true</con:value><con:style>QUERY</con:style><con:default>true</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="App.bookings::find" id="a15431a5-2329-46d2-b591-a25400f077d9" method="POST"><con:settings/><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:app="https://pe-internal.dev.ssi-cloud.com/rest/api/delll/app.bookings::find">app:Response</con:element></con:representation><con:request name="Request 1" id="c7ef5e26-ae51-43f1-9688-846d741a3a69" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://pe-internal.dev.ssi-cloud.com</con:endpoint><con:request/><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters>
  <con:entry key="inversesummary" value="true"/>
  <con:entry key="extinversesummary" value="true"/>
</con:parameters><con:parameterOrder><con:entry>inversesummary</con:entry><con:entry>extinversesummary</con:entry></con:parameterOrder></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" id="fb28d4ef-4e46-4395-843e-40af855d86c8" wadlVersion="http://wadl.dev.java.net/2009/02" name="CompleteBooking" type="rest" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>https://pe-internal.dev.ssi-cloud.com</con:endpoint></con:endpoints><con:resource name="57308996e4b08fde9a0bdeda::complete" path="/rest/api/${#TestSuite#tenant}/app.bookings/${#TestCase#BookingID}::complete" id="895a697d-6fc1-44cd-94d1-b6ab64a63094"><con:settings/><con:parameters><con:parameter><con:name>inversesummary</con:name><con:value>true</con:value><con:style>QUERY</con:style><con:default>true</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>extinversesummary</con:name><con:value>true</con:value><con:style>QUERY</con:style><con:default>true</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="57308996e4b08fde9a0bdeda::complete" id="b27dc352-9299-471d-8fd7-f82a74013985" method="POST"><con:settings/><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:e4b="https://pe-internal.dev.ssi-cloud.com/rest/api/dell/app.bookings/57303300e4b0c7db13a73b0a::complete">e4b:Response</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/html; charset=utf-8</con:mediaType><con:status>400</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/plain</con:mediaType><con:status>401</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="Request 1" id="dc8aab17-68c1-4cc3-9936-78d3dad0764f" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://pe-internal.dev.ssi-cloud.com</con:endpoint><con:request/><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters>
  <con:entry key="inversesummary" value="true"/>
  <con:entry key="extinversesummary" value="true"/>
</con:parameters><con:parameterOrder><con:entry>inversesummary</con:entry><con:entry>extinversesummary</con:entry></con:parameterOrder></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" id="69a0a44d-92b3-4cfc-9c54-8b1e7e8cb4ab" wadlVersion="http://wadl.dev.java.net/2009/02" name="BookingDetails-SalesOrderId" type="rest" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>https://pe-internal.dev.ssi-cloud.com</con:endpoint></con:endpoints><con:resource name="571aa679e4b037f2558b42b4" path="/rest/api/${#TestSuite#tenant}/app.bookings/${#TestCase#BookingID}" id="c8727df2-0657-4988-b5b6-d874196a75bd"><con:settings/><con:parameters/><con:method name="571aa679e4b037f2558b42b4" id="de817617-4336-4f84-8228-8045a57307f7" method="POST"><con:settings/><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>text/html; charset=utf-8</con:mediaType><con:status>400</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:fe8="https://sqa-internal.dev.ssi-cloud.com/rest/api/dell/app.bookings/574fe866e4b03ef4f31c33ff">fe8:Response</con:element></con:representation><con:request name="Request 1" id="97d5d5ba-dd11-4927-9cd2-928310fb1fef" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://pe-internal.dev.ssi-cloud.com</con:endpoint><con:request/><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" id="b8a2f7f7-4a63-4849-8e04-b0dd6096d06e" wadlVersion="http://wadl.dev.java.net/2009/02" name="Find Contact" type="rest" definitionUrl="D:\SoapUI-Automation\SourceCode\FindContact.wadl" basePath="" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart="file:/D:/SoapUI-Automation/SourceCode/FindContact.wadl"><con:part><con:url>file:/D:/SoapUI-Automation/SourceCode/FindContact.wadl</con:url><con:content><![CDATA[<application xmlns="http://wadl.dev.java.net/2009/02">
  <doc xml:lang="en" title="Find Contact"/>
  <resources base="https://.ssi-cloud.com">
    <resource path="rest/api//core.contacts::find" id="Core.contacts::find">
      <doc xml:lang="en" title="Core.contacts::find"/>
      <method name="POST" id="Core.contacts::find">
        <doc xml:lang="en" title="Core.contacts::find"/>
        <request>
          <representation mediaType="application/json"/>
        </request>
        <response status="">
          <representation mediaType="application/json"/>
        </response>
        <response status="200">
          <representation mediaType="application/json"/>
        </response>
        <response status="0">
          <representation mediaType=""/>
          <representation mediaType=""/>
        </response>
        <response status="401">
          <representation mediaType="text/plain"/>
        </response>
      </method>
    </resource>
  </resources>
</application>]]></con:content><con:type>http://wadl.dev.java.net/2009/02</con:type></con:part></con:definitionCache><con:endpoints><con:endpoint>https://.ssi-cloud.com</con:endpoint></con:endpoints><con:resource name="Core.contacts::find" path="/rest/api/${#TestSuite#tenant}/core.contacts::find" id="b90ad092-d6bf-4fd2-9837-38a6ae77bdd9"><con:settings/><con:parameters/><con:method name="Core.contacts::find" id="84e26275-1145-494d-b467-87a1526e7913" method="POST"><con:settings/><con:parameters/><con:representation type="REQUEST" id=""><con:mediaType>application/json</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/plain</con:mediaType><con:status>401</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" id="3e04ac4b-66c4-4b39-8803-ba6b49110994" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://qa-internal.dev.ssi-cloud.com</con:endpoint><con:request/><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" id="6ac08a07-5315-4177-a4ab-fdec06b545a8" wadlVersion="http://wadl.dev.java.net/2009/02" name="Find Opp" type="rest" definitionUrl="D:\SoapUI-Automation\SourceCode\Find-OPP-WADL.wadl" basePath="" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart="file:/D:/SoapUI-Automation/SourceCode/Find-OPP-WADL.wadl"><con:part><con:url>file:/D:/SoapUI-Automation/SourceCode/Find-OPP-WADL.wadl</con:url><con:content><![CDATA[<application xmlns="http://wadl.dev.java.net/2009/02">
  <doc xml:lang="en" title="Find Opp"/>
  <resources base="https://qa-internal.dev.ssi-cloud.com">
    <resource path="rest/api//app.opportunities::find" id="App.opportunities::find">
      <doc xml:lang="en" title="App.opportunities::find"/>
      <method name="POST" id="App.opportunities::find">
        <doc xml:lang="en" title="App.opportunities::find"/>
        <request>
          <representation mediaType="application/json"/>
        </request>
        <response status="">
          <representation mediaType="application/json"/>
        </response>
        <response status="200">
          <representation mediaType="application/json"/>
        </response>
        <response status="0">
          <representation mediaType=""/>
          <representation mediaType=""/>
        </response>
        <response status="400">
          <representation mediaType="text/html; charset=utf-8"/>
        </response>
      </method>
    </resource>
  </resources>
</application>]]></con:content><con:type>http://wadl.dev.java.net/2009/02</con:type></con:part></con:definitionCache><con:endpoints><con:endpoint>https://qa-internal.dev.ssi-cloud.com</con:endpoint></con:endpoints><con:resource name="App.opportunities::find" path="/rest/api/${#TestSuite#tenant}/app.opportunities::find" id="e53881fd-eadd-4461-8458-d2259a92c552"><con:settings/><con:parameters/><con:method name="App.opportunities::find" id="8e3315e0-5d35-4a72-91e1-57fa64867991" method="POST"><con:settings/><con:parameters/><con:representation type="REQUEST" id=""><con:mediaType>application/json</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/html; charset=utf-8</con:mediaType><con:status>400</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" id="e764c5ae-27c5-4120-954d-d8c0db92ff35" mediaType="application/json" postQueryString="false"><con:settings/><con:endpoint>https://qa-internal.dev.ssi-cloud.com</con:endpoint><con:request/><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" id="35939cec-24d7-4d41-8bb8-7d7633a93b3a" wadlVersion="http://wadl.dev.java.net/2009/02" name="Get Team Info" type="rest" definitionUrl="D:\SoapUI-Automation\SourceCode\TeamInfo.wadl" basePath="" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart="file:/D:/SoapUI-Automation/SourceCode/TeamInfo.wadl"><con:part><con:url>file:/D:/SoapUI-Automation/SourceCode/TeamInfo.wadl</con:url><con:content><![CDATA[<application xmlns="http://wadl.dev.java.net/2009/02">
  <doc xml:lang="en" title="Get Team Info"/>
  <resources base="https://.ssi-cloud.com">
    <resource path="rest/api//core.users::getUsersWithTeamInfo" id="getUsersWithTeamInfo">
      <doc xml:lang="en" title="getUsersWithTeamInfo"/>
      <method name="POST" id="Core.users::getUsersWithTeamInfo">
        <doc xml:lang="en" title="Core.users::getUsersWithTeamInfo"/>
        <request>
          <representation mediaType="application/json"/>
        </request>
        <response status="">
          <representation mediaType="application/json"/>
        </response>
        <response status="200">
          <representation mediaType="application/json"/>
        </response>
      </method>
    </resource>
  </resources>
</application>]]></con:content><con:type>http://wadl.dev.java.net/2009/02</con:type></con:part></con:definitionCache><con:endpoints><con:endpoint>https://.ssi-cloud.com</con:endpoint></con:endpoints><con:resource name="getUsersWithTeamInfo" path="/rest/api/${#TestSuite#tenant}/core.users::getUsersWithTeamInfo" id="b03d37ba-88f1-4a97-a899-65062298cfe8"><con:settings/><con:parameters/><con:method name="Core.users::getUsersWithTeamInfo" id="a8c06007-919c-46bb-a4f0-d45233947873" method="POST"><con:settings/><con:parameters/><con:representation type="REQUEST" id=""><con:mediaType>application/json</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" id="9014cff3-4799-464c-9eeb-78a74997a470" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://qa-internal.dev.ssi-cloud.com</con:endpoint><con:request/><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" id="00d3146e-6445-4a5d-8fc1-8dc3c529e4d7" wadlVersion="http://wadl.dev.java.net/2009/02" name="Transition Input" type="rest" definitionUrl="D:\SoapUI-Automation\SourceCode\TransitionInput.wadl" basePath="" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart="file:/D:/SoapUI-Automation/SourceCode/TransitionInput.wadl"><con:part><con:url>file:/D:/SoapUI-Automation/SourceCode/TransitionInput.wadl</con:url><con:content><![CDATA[<application xmlns="http://wadl.dev.java.net/2009/02">
  <doc xml:lang="en" title="Transition Input"/>
  <resources base="https://.ssi-cloud.com">
    <resource path="rest/api//app.opportunities/::getTransitionInput" id="getTransitionInput">
      <doc xml:lang="en" title="getTransitionInput"/>
      <method name="POST" id="getTransitionInput">
        <doc xml:lang="en" title="getTransitionInput"/>
        <request>
          <representation mediaType="application/json"/>
        </request>
        <response status="">
          <representation mediaType="application/json"/>
        </response>
        <response status="200">
          <representation mediaType="application/json"/>
        </response>
        <response status="400 404">
          <representation mediaType="text/html; charset=utf-8"/>
        </response>
      </method>
    </resource>
  </resources>
</application>]]></con:content><con:type>http://wadl.dev.java.net/2009/02</con:type></con:part></con:definitionCache><con:endpoints><con:endpoint>https://.ssi-cloud.com</con:endpoint></con:endpoints><con:resource name="getTransitionInput" path="/rest/api/${#TestSuite#tenant}/app.opportunities/${#TestCase#oppid}::getTransitionInput" id="19bcd47f-8043-4a87-92fd-cfec2cfa0882"><con:settings/><con:parameters/><con:method name="getTransitionInput" id="476c3584-d279-4a9c-92d2-08fbc1275519" method="POST"><con:settings/><con:parameters/><con:representation type="REQUEST" id=""><con:mediaType>application/json</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/html; charset=utf-8</con:mediaType><con:status>400 404</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" id="23740631-17a0-49d5-9471-2c5e3e505557" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://qa-internal.dev.ssi-cloud.com</con:endpoint><con:request/><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" id="66955def-3bf8-4cbd-ba25-3ffe0102f3a3" wadlVersion="http://wadl.dev.java.net/2009/02" name="CloseUnsuccessfully" type="rest" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>https://qa-internal.dev.ssi-cloud.com</con:endpoint></con:endpoints><con:resource name="5732d41ce4b0e839c0ec0e36::closeUnsuccessfullyTask" path="/rest/api/${#TestSuite#tenant}/app.tasks/${#TestCase#TaskID}::closeUnsuccessfullyTask" id="1878b041-2c58-4d46-b8fc-402aece8baca"><con:settings/><con:parameters><con:parameter><con:name>inversesummary</con:name><con:value>true</con:value><con:style>QUERY</con:style><con:default>true</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>extinversesummary</con:name><con:value>true</con:value><con:style>QUERY</con:style><con:default>true</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="5732d41ce4b0e839c0ec0e36::closeUnsuccessfullyTask" id="ea74d1c2-3a44-40f0-a748-7858dec8f327" method="POST"><con:settings/><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:d41="https://qa-internal.dev.ssi-cloud.com/rest/api/dell/app.tasks/5732d41ce4b0e839c0ec0e36::closeUnsuccessfullyTask">d41:Response</con:element></con:representation><con:request name="Request 1" id="c78b4682-ba1c-479a-9b40-cc1203002368" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://qa-internal.dev.ssi-cloud.com</con:endpoint><con:request/><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters>
  <con:entry key="inversesummary" value="true"/>
  <con:entry key="extinversesummary" value="true"/>
</con:parameters><con:parameterOrder><con:entry>inversesummary</con:entry><con:entry>extinversesummary</con:entry></con:parameterOrder></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" id="bb35b8fd-7da1-420d-8171-a4e0a2ba16f8" wadlVersion="http://wadl.dev.java.net/2009/02" name="CloseUnsuccessfulyDetails" type="rest" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>https://qa-internal.dev.ssi-cloud.com</con:endpoint></con:endpoints><con:resource name="Core.templates::find" path="/rest/api/${#TestSuite#tenant}/core.templates::find" id="5148ac1d-914a-4c0f-bd87-733e0fa0aaa3"><con:settings/><con:parameters/><con:method name="Core.templates::find" id="78d7fac6-60c2-4e74-a9f4-30818e350ed6" method="POST"><con:settings/><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>text/plain</con:mediaType><con:status>401</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:core="https://qa-internal.dev.ssi-cloud.com/rest/api/dell/core.templates::find">core:Response</con:element></con:representation><con:request name="Request 1" id="110d310f-35ba-4e44-8226-3bc9d8997278" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://qa-internal.dev.ssi-cloud.com</con:endpoint><con:request/><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" id="c196f313-70bf-44b9-a4d9-c273bb67f40d" wadlVersion="http://wadl.dev.java.net/2009/02" name="CloseQuoteUnsuccessfully" type="rest" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>https://qa-internal.dev.ssi-cloud.com</con:endpoint></con:endpoints><con:resource name="5421080ce4b0b9322bdc9d21::closeUnsuccessfullyQuote" path="/rest/api/${#TestSuite#tenant}/app.quotes/${#TestCase#QuoteID}::closeUnsuccessfullyQuote" id="6e5148b4-8077-4f94-be4f-8560f3e4d41b"><con:settings/><con:parameters><con:parameter><con:name>inversesummary</con:name><con:value>true</con:value><con:style>QUERY</con:style><con:default>true</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>extinversesummary</con:name><con:value>true</con:value><con:style>QUERY</con:style><con:default>true</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="5421080ce4b0b9322bdc9d21::closeUnsuccessfullyQuote" id="5dbff132-ca18-41ee-8c40-ca71110ec1b2" method="POST"><con:settings/><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:baa="https://sqa-internal.dev.ssi-cloud.com/rest/api/dell/app.quotes/57395baae4b01e282f71085f::closeUnsuccessfullyQuote">baa:Response</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/html; charset=utf-8</con:mediaType><con:status>400</con:status><con:params/><con:element>html</con:element></con:representation><con:request name="Request 1" id="1efd95ed-7346-427a-b642-cba0eb57619e" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://qa-internal.dev.ssi-cloud.com</con:endpoint><con:request/><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters>
  <con:entry key="inversesummary" value="true"/>
  <con:entry key="extinversesummary" value="true"/>
</con:parameters><con:parameterOrder><con:entry>inversesummary</con:entry><con:entry>extinversesummary</con:entry></con:parameterOrder></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" id="001b659a-c9f2-419f-a05f-76a54716b23a" wadlVersion="http://wadl.dev.java.net/2009/02" name="Opp Details" type="rest" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>https://pe-internal.dev.ssi-cloud.com</con:endpoint></con:endpoints><con:resource name="App.opportunities::find" path="/rest/api/${#TestSuite#tenant}/app.opportunities::find" id="8f924783-6323-4254-88fe-bf8ea9949de4"><con:settings/><con:parameters><con:parameter><con:name>inversesummary</con:name><con:value>true</con:value><con:style>QUERY</con:style><con:default>true</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="App.opportunities::find" id="c6e8b4a0-64df-443b-8119-53f1ff5ef604" method="POST"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:app="https://pe-internal.dev.ssi-cloud.com/rest/api/dell/app.opportunities::find">app:Response</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:request name="Request 1" id="7a40269a-24ad-4e9a-906b-74cd19d49953" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://pe-internal.dev.ssi-cloud.com</con:endpoint><con:request/><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters><entry key="inversesummary" value="true" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>inversesummary</con:entry></con:parameterOrder></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" id="32d526d3-cd99-40e4-8430-369b42596cd9" wadlVersion="http://wadl.dev.java.net/2009/02" name="CloseUnsuccessfully-Booking" type="rest" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>https://sqa-internal.dev.ssi-cloud.com</con:endpoint></con:endpoints><con:resource name="5730c5ede4b00a885e8fa57a::closeUnsuccessfullyBooking" path="/rest/api/${#TestSuite#tenant}/app.bookings/${#TestCase#BookingID}::closeUnsuccessfullyBooking" id="75c61869-3196-4514-9047-2db6086db66e"><con:settings/><con:parameters><con:parameter><con:name>inversesummary</con:name><con:value>true</con:value><con:style>QUERY</con:style><con:default>true</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>extinversesummary</con:name><con:value>true</con:value><con:style>QUERY</con:style><con:default>true</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="::closeUnsuccessfullyBooking" id="d35a76d5-5527-4043-92e3-ac442622b8b1" method="POST"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:fe8="https://sqa-internal.dev.ssi-cloud.com/rest/api/dell/app.bookings/574fe866e4b03ef4f31c33ff::closeUnsuccessfullyBooking">fe8:Response</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:request name="Request 1" id="58a18a3b-a2c4-4c98-8eaa-8a20a6729b97" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://sqa-internal.dev.ssi-cloud.com</con:endpoint><con:request/><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters>
  <con:entry key="inversesummary" value="true"/>
  <con:entry key="extinversesummary" value="true"/>
</con:parameters><con:parameterOrder><con:entry>inversesummary</con:entry><con:entry>extinversesummary</con:entry></con:parameterOrder></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" id="edb472ab-daaa-44a6-a808-1e5feb7adc3d" wadlVersion="http://wadl.dev.java.net/2009/02" name="Task-PlaceOnHold" type="rest" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>https://sqa-internal.dev.ssi-cloud.com</con:endpoint></con:endpoints><con:resource name="5491793ee4b002d9d76bb516::holdTask" path="/rest/api/${#TestSuite#tenant}/app.tasks/${#TestCase#TaskID}::holdTask" id="668cc111-c55d-4890-b609-ee5455277bbf"><con:settings/><con:parameters><con:parameter><con:name>inversesummary</con:name><con:value>true</con:value><con:style>QUERY</con:style><con:default>true</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>extinversesummary</con:name><con:value>true</con:value><con:style>QUERY</con:style><con:default>true</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="5491793ee4b002d9d76bb516::holdTask" id="9946a1c3-4683-4581-8a9e-d701335a55c8" method="POST"><con:settings/><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:c34="https://sqa-internal.dev.ssi-cloud.com/rest/api/dell/app.tasks/57551c34e4b0d26080d90337::holdTask">c34:Response</con:element></con:representation><con:request name="Request 1" id="8c9da7f6-f8da-4a6f-b154-6070a2bcc949" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://sqa-internal.dev.ssi-cloud.com</con:endpoint><con:request/><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters>
  <con:entry key="inversesummary" value="true"/>
  <con:entry key="extinversesummary" value="true"/>
</con:parameters><con:parameterOrder><con:entry>inversesummary</con:entry><con:entry>extinversesummary</con:entry></con:parameterOrder></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" id="1d0be9e3-b03a-4274-9f3f-ba47599e76c6" wadlVersion="http://wadl.dev.java.net/2009/02" name="Task-ReleaseHold" type="rest" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>https://sqa-internal.dev.ssi-cloud.com</con:endpoint></con:endpoints><con:resource name="5491793ee4b002d9d76bb516::taskReleaseHold" path="/rest/api/${#TestSuite#tenant}/app.tasks/${#TestCase#TaskID}::taskReleaseHold" id="37ae85d2-adcb-4bb5-b652-a1a9b11f3cd6"><con:settings/><con:parameters><con:parameter><con:name>inversesummary</con:name><con:value>true</con:value><con:style>QUERY</con:style><con:default>true</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>extinversesummary</con:name><con:value>true</con:value><con:style>QUERY</con:style><con:default>true</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="5491793ee4b002d9d76bb516::taskReleaseHold" id="f4cfa647-6bdb-45d7-b8ff-d63e9cbf439f" method="POST"><con:settings/><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>text/html; charset=utf-8</con:mediaType><con:status>400</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:c34="https://sqa-internal.dev.ssi-cloud.com/rest/api/dell/app.tasks/57551c34e4b0d26080d90337::taskReleaseHold">c34:Response</con:element></con:representation><con:request name="Request 1" id="0faf58a4-cc34-4d4a-8d0b-94c43ae8f405" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://sqa-internal.dev.ssi-cloud.com</con:endpoint><con:request/><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters>
  <con:entry key="inversesummary" value="true"/>
  <con:entry key="extinversesummary" value="true"/>
</con:parameters><con:parameterOrder><con:entry>inversesummary</con:entry><con:entry>extinversesummary</con:entry></con:parameterOrder></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" id="72ffd61c-3c3d-4e50-91fd-110aa5d63b19" wadlVersion="http://wadl.dev.java.net/2009/02" name="PlaceHold-Quote" type="rest" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>https://sqa-internal.dev.ssi-cloud.com</con:endpoint></con:endpoints><con:resource name="57356d5ce4b0a82849be0916::holdQuote" path="/rest/api/${#TestSuite#tenant}/app.quotes/${#TestCase#QuoteID}::holdQuote" id="8135a58f-5129-4fb2-84a8-5877ae80e278"><con:settings/><con:parameters><con:parameter><con:name>inversesummary</con:name><con:value>true</con:value><con:style>QUERY</con:style><con:default>true</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>extinversesummary</con:name><con:value>true</con:value><con:style>QUERY</con:style><con:default>true</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="57356d5ce4b0a82849be0916::holdQuote" id="89a84f5e-1c2b-4d42-a68a-cf25d99c85bd" method="POST"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType>text/html; charset=utf-8</con:mediaType><con:status>400</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:request name="Request 1" id="a96d1060-d6c4-433f-a96a-d85c9cc55cfb" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://sqa-internal.dev.ssi-cloud.com</con:endpoint><con:request/><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters>
  <con:entry key="inversesummary" value="true"/>
  <con:entry key="extinversesummary" value="true"/>
</con:parameters><con:parameterOrder><con:entry>inversesummary</con:entry><con:entry>extinversesummary</con:entry></con:parameterOrder></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" id="a0317a3b-e425-412b-90b7-9bb0c8c56aa1" wadlVersion="http://wadl.dev.java.net/2009/02" name="ReleaseQuoteHold" type="rest" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>https://sqa-internal.dev.ssi-cloud.com</con:endpoint></con:endpoints><con:resource name="57356d5ce4b0a82849be0916::quoteReleaseHold" path="/rest/api/${#TestSuite#tenant}/app.quotes/${#TestCase#QuoteID}::quoteReleaseHold" id="a5f8cef7-facb-4267-bb82-2cfc7bc44536"><con:settings/><con:parameters><con:parameter><con:name>inversesummary</con:name><con:value>true</con:value><con:style>QUERY</con:style><con:default>true</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>extinversesummary</con:name><con:value>true</con:value><con:style>QUERY</con:style><con:default>true</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="57356d5ce4b0a82849be0916::quoteReleaseHold" id="d29182a3-794a-4c86-bea9-d66550303abc" method="POST"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType>text/html; charset=utf-8</con:mediaType><con:status>400</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:request name="Request 1" id="ed24a2e4-e278-4c3a-8d7f-253d28b5a780" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://sqa-internal.dev.ssi-cloud.com</con:endpoint><con:request/><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters>
  <con:entry key="inversesummary" value="true"/>
  <con:entry key="extinversesummary" value="true"/>
</con:parameters><con:parameterOrder><con:entry>inversesummary</con:entry><con:entry>extinversesummary</con:entry></con:parameterOrder></con:request></con:method></con:resource></con:interface><con:testSuite id="b054341f-8781-488d-a7d8-518459ece709" name="Requested during weekday, Completed during weekday of the same week"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Find Cookie v2" searchProperties="true" disabled="true" id="c0ce29f2-7cb0-4efc-a1f0-d98a032504a6"><con:settings/><con:testStep type="restrequest" name="Second Cookie Request" id="6b69e90e-f704-4cb7-bc5c-3b10506a9518"><con:settings/><con:config service="Login - qaDev" methodName="cookiePostMethod" resourcePath="/login.json" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Second Cookie Request" mediaType="application/json" postQueryString="false" id="6d1707e7-bf13-4ac2-a045-809425e1ca83"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Cookie" value="${#TestSuite#Cookie}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://${#TestSuite#serverName}.ssi-cloud.com</con:endpoint><con:request>{"username":"${#TestSuite#loginID}","password":"passwordone","userid":"${#TestSuite#loginID}","platformVersion":"${#Project#version}"}</con:request><con:originalUri>https://pe-internal.dev.ssi-cloud.com/login.json</con:originalUri><con:credentials><con:username>bill.moor@dell.com</con:username><con:password>passwordone</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="getCookies2" id="cb55c29d-b356-41c9-94cf-40d9807de412"><con:settings/><con:config><script>def responseHeader=testRunner.testCase.testSteps["Second Cookie Request"].testRequest.response
def setCookie= responseHeader.responseHeaders["set-cookie"]
//log.info setCookie
def cookie = setCookie.toString().split(/;/)[0]
log.info "Cookie value for "+context.expand( '${#TestSuite#v2ServerName}')+" >>> "+cookie

testRunner.testCase.testSuite.setPropertyValue( "Cookie", cookie )

//def cookie = context.expand( '${#TestSuite#cookie}' )
</script></con:config></con:testStep><con:testStep type="delay" name="Delay" id="5adc02b6-c018-4d3e-99a1-9011e165ad43"><con:settings/><con:config><delay>500</delay></con:config></con:testStep><con:properties><con:property><con:name>qaDevCookies</con:name><con:value>[avalon.sid=s%3A54cb1cf0e4b004ec636c4d71.OKyf7Hynz6NWePZzjLl5L9azOOkbtfD5ExcpJE%2FUL48</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>8bd932ca-b859-4164-ac1d-1898dd060c86</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>3953dda5-bbd6-4c76-8c5f-42800dbb12f2</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>5296984b-68e3-4438-9365-6d6e5b887473</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="fetch salesRep-SellingPeriod" searchProperties="true" disabled="true" id="90dcc10b-40c2-4ecb-a22e-9bbfd7412348"><con:settings/><con:testStep type="groovy" name="Server" id="e4a55656-54d3-44ec-ab0d-d46e9f5893d0"><con:settings/><con:config><script>def serverName = context.expand( '${#TestSuite#serverName}' )
def sname=serverName.split(/-/)[0]
testRunner.testCase.testSuite.setPropertyValue( "server", sname )

testRunner.testCase.setPropertyValue( "server", sname )
testRunner.testCase.testSuite.setPropertyValue( "server", sname )




</script></con:config></con:testStep><con:testStep type="calltestcase" name="Find Cookie" id="f1fc5fe6-e7ef-4cee-af89-baaac4dc65eb"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>c0ce29f2-7cb0-4efc-a1f0-d98a032504a6</con:targetTestCase><con:properties><con:property><con:name>qaDevCookies</con:name><con:value>[avalon.sid=s%3A54cb1cf0e4b004ec636c4d71.OKyf7Hynz6NWePZzjLl5L9azOOkbtfD5ExcpJE%2FUL48</con:value></con:property></con:properties><con:returnProperties><con:entry>qaDevCookies</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="restrequest" name="Find SalesRep" id="c4f0c459-975d-455e-a66d-05ad94a4ec0a"><con:settings/><con:config service="Find Contact" methodName="Core.contacts::find" resourcePath="/rest/api/${#TestSuite#tenant}/core.contacts::find" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Find SalesRep" mediaType="application/json" postQueryString="false" id="4dbdccb1-b97c-4e9a-926f-2741b7dace27"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Cookie" value="${#TestSuite#Cookie}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://${#TestSuite#serverName}.ssi-cloud.com</con:endpoint><con:request>{"filter":{"type":"core.contact/person","emailAddresses.address":{"$regex":"^${#TestSuite#salesRepEmail}"}},"params":{"start":0,"limit":50,"columns":["_id","type","systemProperties","displayName","type","role","relationships.company","emailAddresses"]},"origin":{"component":"AvalonGridDuplo","url":"#tab/core .contacts/vq=TYPE: \"Person\" EMAIL: \"salesrepone@dell.com\""},"inversesummary":false}</con:request><con:originalUri>https://pe-internal.dev.ssi-cloud.com/rest/api/dell/core.contacts::find</con:originalUri><con:credentials><con:username>${#TestSuite#loginId}</con:username><con:password>passwordone</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="Property Transfer-slaesRepKey" id="0518e1bb-9907-4a47-a6bb-f1ceebcb43cb"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false" disabled="false"><con:name>salesRepKey</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Find SalesRep</con:sourceStep><con:sourcePath>declare namespace ns1='https://pe-internal.dev.ssi-cloud.com/rest/api/dell/core.contacts::find';
//ns1:Response[1]/ns1:data[1]/ns1:core.contact[1]/ns1:e[1]/ns1:_id[1]</con:sourcePath><con:targetType>salesRepKey</con:targetType><con:targetStep>#TestSuite#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="true" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>salesRep</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Find SalesRep</con:sourceStep><con:sourcePath>declare namespace ns1='https://pe-internal.dev.ssi-cloud.com/rest/api/dell/core.contacts::find';
//ns1:Response[1]/ns1:data[1]/ns1:core.contact[1]/ns1:e[1]/ns1:displayName[1]</con:sourcePath><con:targetType>salesRep</con:targetType><con:targetStep>#TestSuite#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="restrequest" name="Find Opp" id="ad761179-c9cd-47e0-9c42-1d639054574c"><con:settings/><con:config service="Find Opp" methodName="App.opportunities::find" resourcePath="/rest/api/${#TestSuite#tenant}/app.opportunities::find" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Find Opp" mediaType="application/json" postQueryString="false" id="ef0758d3-9c70-4f60-9221-78f1bdacd54b"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Cookie" value="${#TestSuite#Cookie}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://${#TestSuite#serverName}.ssi-cloud.com</con:endpoint><con:request>{"filter":{"flows.salesStages.state.name":{"$nin":["noService","closedSale","houseAccount","consolidated"]},"isSubordinate":false},"params":{"sort":{"systemProperties.lastModifiedOn":-1},"start":0,"limit":2,"columns":["_id","type","systemProperties","displayName","flows.salesStages.state","flows.salesStages.target","targetDate","relationships.customer","relationships.reseller","relationships.salesRep","targetAmount.normalizedAmount","amount.normalizedAmount","commitLevel","extensions.master.forecastedCloseDate.value","extensions.tenant.batchType.value","extensions.master.targetPeriod.value","relationships.assignedTeam","headline"]},"origin":{"component":"AvalonGridDuplo","url":""},"inversesummary":false}</con:request><con:originalUri>https://pe-internal.dev.ssi-cloud.com/rest/api/dell/app.opportunities::find</con:originalUri><con:assertion type="XPath Match" name="Match content of [type]" id="aefda2b9-b6b2-4e63-9d11-5cbf876ed504"><con:configuration><path>declare namespace ns1='https://pe-internal.dev.ssi-cloud.com/rest/api/dell/app.opportunities::find';
//ns1:Response[1]/ns1:data[1]/ns1:app.opportunity[1]/ns1:e[2]/ns1:type[1]/text()</path><content>app.opportunity</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:username>${#TestSuite#loginId}</con:username><con:password>${#TestSuite#password}</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="Property Transfer-oppid" id="dfc17aa8-7327-45b3-8f75-d04c59d87043"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>oppid</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Find Opp</con:sourceStep><con:sourcePath>declare namespace ns1='https://pe-internal.dev.ssi-cloud.com/rest/api/dell/app.opportunities::find';
//ns1:Response[1]/ns1:data[1]/ns1:app.opportunity[1]/ns1:e[1]/ns1:_id[1]</con:sourcePath><con:targetType>oppid</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" entitize="false" ignoreEmpty="false" transferToAll="false" transferChildNodes="false"><con:name>oppname</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Find Opp</con:sourceStep><con:sourcePath>declare namespace ns1='https://pe-internal.dev.ssi-cloud.com/rest/api/dell/app.opportunities::find';
//ns1:Response[1]/ns1:data[1]/ns1:app.opportunity[1]/ns1:e[1]/ns1:displayName[1]</con:sourcePath><con:targetType>oppname</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="restrequest" name="Find Selling period" id="3a5f209a-786c-45e4-8d35-9956fa23aa66"><con:settings/><con:config service="Transition Input" methodName="getTransitionInput" resourcePath="/rest/api/${#TestSuite#tenant}/app.opportunities/${#TestCase#oppid}::getTransitionInput" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Find Selling period" mediaType="application/json" postQueryString="false" id="7e45d6a9-a7f8-44f0-bd33-80fb9aef34ed"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Cookie" value="${#TestSuite#Cookie}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://${#TestSuite#serverName}.ssi-cloud.com</con:endpoint><con:request>{"detail":{"_id":"${#TestCase#oppid}","type":"app.opportunity","displayName":"${#TestCase#oppname}"},"selections":[],"origin":{"url":""}}</con:request><con:originalUri>https://qa-internal.dev.ssi-cloud.com/rest/api/dell/app.opportunities/::getTransitionInput</con:originalUri><con:credentials><con:username>${#TestSuite#loginId}</con:username><con:password>${#TestSuite#password}</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="Property Transfer-sellingPeriod" id="008a0b14-a79c-4bfb-a10d-0b423723c9b6"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>targetPeriod</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Find Selling period</con:sourceStep><con:sourcePath>declare namespace ns1='https://qa-internal.dev.ssi-cloud.com/rest/api/dell/app.opportunities/::getTransitionInput';
//ns1:Response[1]/ns1:data[1]/ns1:app.tranopp.input[1]/ns1:e[1]/ns1:targetPeriod[1]/ns1:name[1]</con:sourcePath><con:targetType>targetPeriod</con:targetType><con:targetStep>#TestSuite#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" transferToAll="false"><con:name>targetPeriodDName</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Find Selling period</con:sourceStep><con:sourcePath>declare namespace ns1='https://qa-internal.dev.ssi-cloud.com/rest/api/dell/app.opportunities/::getTransitionInput';
//ns1:Response[1]/ns1:data[1]/ns1:app.tranopp.input[1]/ns1:e[1]/ns1:targetPeriod[1]/ns1:displayName[1]</con:sourcePath><con:targetType>targetPeriodDName</con:targetType><con:targetStep>#TestSuite#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true"><con:name>targetPeriodKey</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Find Selling period</con:sourceStep><con:sourcePath>declare namespace ns1='https://qa-internal.dev.ssi-cloud.com/rest/api/dell/app.opportunities/::getTransitionInput';
//ns1:Response[1]/ns1:data[1]/ns1:app.tranopp.input[1]/ns1:e[1]/ns1:targetPeriod[1]/ns1:_id[1]</con:sourcePath><con:targetType>targetPeriodKey</con:targetType><con:targetStep>#TestSuite#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>enddate</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Find Selling period</con:sourceStep><con:sourcePath>declare namespace ns1='https://qa-internal.dev.ssi-cloud.com/rest/api/dell/app.opportunities/::getTransitionInput';
//ns1:Response[1]/ns1:data[1]/ns1:app.tranopp.input[1]/ns1:e[1]/ns1:targetPeriod[1]/ns1:value[1]/ns1:end[1]</con:sourcePath><con:targetType>enddate</con:targetType><con:targetStep>#TestSuite#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>startDate</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Find Selling period</con:sourceStep><con:sourcePath>declare namespace ns1='https://qa-internal.dev.ssi-cloud.com/rest/api/dell/app.opportunities/::getTransitionInput';
//ns1:Response[1]/ns1:data[1]/ns1:app.tranopp.input[1]/ns1:e[1]/ns1:targetPeriod[1]/ns1:value[1]/ns1:start[1]</con:sourcePath><con:targetType>startDate</con:targetType><con:targetStep>#TestSuite#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="restrequest" name="Get Team" id="0365bf70-f0b9-475c-9833-c591d093c3fd" disabled="true"><con:settings/><con:config service="Get Team Info" methodName="Core.users::getUsersWithTeamInfo" resourcePath="/rest/api/${#TestSuite#tenant}/core.users::getUsersWithTeamInfo" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get Team" mediaType="application/json" postQueryString="false" id="ddad5b52-53e5-461f-9e47-1b6de41ea958"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Cookie" value="${#TestSuite#Cookie}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://${#TestSuite#serverName}.ssi-cloud.com</con:endpoint><con:request>{"filter":{"username":{"$regex":"^${#TestSuite#salesRepEmail}"}},"params":{"start":0,"limit":50,"columns":["_id","type","systemProperties","displayName","username","relationships.team","relationships.role","relationships.company","uiProfile"]},"origin":{"component":"AvalonGridDuplo","url":""},"inversesummary":false,"options":{"gridFilter":{"username":{"$regex":"^${#TestSuite#salesRepEmail}"}},"currentPage":1}}</con:request><con:originalUri>https://pe-internal.dev.ssi-cloud.com/rest/api/dell/core.users::getUsersWithTeamInfo</con:originalUri><con:assertion type="XPath Match" name="Match content of [displayName]" id="fe26fdbb-c94d-45e6-8560-b7a2a2e21192"><con:configuration><path>declare namespace ns1='https://pe-internal.dev.ssi-cloud.com/rest/api/dell/core.users::getUsersWithTeamInfo';
//ns1:Response[1]/ns1:data[1]/ns1:core.user[1]/ns1:e[1]/ns1:displayName[1]/text()</path><content>${#TestSuite#salesRep}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:username>bruice.lewis@${#TestSuite#tenant}.com</con:username><con:password>${#TestSuite#password}</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="Property Transfer-team" id="97f54c72-4568-47e2-8352-8a05c5af9142" disabled="true"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>salesRepteam</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Get Team</con:sourceStep><con:sourcePath>declare namespace ns1='https://${#TestSuite#serverName}.ssi-cloud.com/rest/api/${#TestSuite#tenant}/core.users::getUsersWithTeamInfo';
//ns1:Response[1]/ns1:data[1]/ns1:core.user[1]/ns1:e[1]/ns1:relationships[1]/ns1:e[1]/ns1:target[1]/ns1:displayName[1]</con:sourcePath><con:targetType>salesRepTeam</con:targetType><con:targetStep>#TestSuite#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>salesRepTeamKey</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Get Team</con:sourceStep><con:sourcePath>declare namespace ns1='https://${#TestSuite#serverName}.ssi-cloud.com/rest/api/${#TestSuite#tenant}/core.users::getUsersWithTeamInfo';
//ns1:Response[1]/ns1:data[1]/ns1:core.user[1]/ns1:e[1]/ns1:relationships[1]/ns1:e[1]/ns1:target[1]/ns1:key[1]</con:sourcePath><con:targetType xsi:nil="true"/><con:targetStep>#TestSuite#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:properties><con:property><con:name>server</con:name><con:value>qa</con:value></con:property><con:property><con:name>oppid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">573d57b9e4b01cba0c3d82c8</con:value></con:property><con:property><con:name>oppname</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">APOS-APICustomer01_API01-CLIENT-FY16Q4-42</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>d8bbdb54-0b45-4b2d-a300-645cca2b593d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase id="0b42b8fa-c324-44c4-b52e-807e1e0107ff" discardOkResults="true" failOnError="true" failTestCaseOnErrors="true" keepSession="false" name="Quotes-Completed-Requested during weekday, Completed during weekday of the same week" searchProperties="true" disabled="true"><con:settings/><con:testStep type="calltestcase" name="Find Cookie" id="ca692b22-29ee-4dad-b1d8-82feb65fd10e"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>c0ce29f2-7cb0-4efc-a1f0-d98a032504a6</con:targetTestCase><con:properties><con:property><con:name>qaDevCookies</con:name><con:value>[avalon.sid=s%3A54cb1cf0e4b004ec636c4d71.OKyf7Hynz6NWePZzjLl5L9azOOkbtfD5ExcpJE%2FUL48</con:value></con:property></con:properties><con:returnProperties><con:entry>qaDevCookies</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script -CreatedOnDate" id="e6af9544-c8ae-40d3-a064-77deeb7a0673"><con:settings/><con:config><script>import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.text.DateFormat;
import java.util.Date;
import java.util.TimeZone;
import java.util.*
import org.joda.time.DateTime;

DateTime dateTime = new DateTime();
long firstDayOfWeekTimestamp = dateTime.withDayOfWeek(1).getMillis();
log.info firstDayOfWeekTimestamp
// Get calendar set to current date and time
Calendar c = Calendar.getInstance();
 	    c.set(Calendar.HOUR_OF_DAY, 0);
         c.set(Calendar.MINUTE, 0);
         c.set(Calendar.SECOND, 0);
         c.set(Calendar.MILLISECOND, 0);
        
       
// Set the calendar to SUNDAY of the current week
c.set(Calendar.DAY_OF_WEEK, Calendar.SUNDAY);

// Print dates of the current week starting on SUNDAY
DateFormat df = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ");
for (int i = 0; i &lt; 1; i++) {
    log.info(df.format(c.getTime()));
 DateFormat df1 = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS");
 log.info(df1.format(c.getTime()));
    //c.add(Calendar.DATE, 1);
    testRunner.testCase.setPropertyValue( "CreatedOnDate", (df1.format(c.getTime()).toString()+"Z"));
}</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script-FIndQuotesRequest" id="a9cb2192-c985-42b1-aa03-c50fb66513c5"><con:settings/><con:config><script>import groovy.json.*
def serverName = context.expand( '${#TestSuite#serverName}' )
def tenant = context.expand( '${#TestSuite#tenant}' )
def createdOnDate = context.expand( '${#TestCase#CreatedOnDate}' )

if (tenant=="dell" &amp;&amp; serverName =="pe-internal.dev")
{

                def jsonText='''{"filter":{"flows.quoteStages.state.name":"requested","flows.quoteStages.transitions":{"$elemMatch":{"changeDate":{"$gte":"${#TestCase#CreatedOnDate}"},"toState":"requested"}},"isBase":false,"isDraft":false},"params":{"sort":{"systemProperties.createdOn":1},"start":0,"limit":50,"columns":["_id","type","systemProperties","displayName","requestReason","flows.quoteStages.state","flows.quoteStages.target","relationships.requestedBy","relationships.assignee","expirationDate","flows.quoteStages.transitions","dueDate","amount.normalizedAmount","relationships.customer","tags","flows.quoteStages.transitions","flows.quoteStages.transitions"]},"origin":{"component":"AvalonGridDuplo"},"inversesummary":false}'''
}
else
{
                def jsonText='''{"filter":{"flows.quoteStages.state.name":"requested","systemProperties.createdOn":{"$gt":"${#TestCase#CreatedOnDate}"},"isBase":false,"isDraft":false},"params":{"sort":{"dueDate":1},"start":0,"limit":50,"columns":["_id","type","systemProperties","displayName","requestReason","flows.quoteStages.state","flows.quoteStages.target","relationships.requestedBy","relationships.assignee","expirationDate","flows.quoteStages.transitions","dueDate","amount.normalizedAmount","relationships.customer","tags","flows.quoteStages.transitions","flows.quoteStages.transitions"]},"origin":{"component":"AvalonGridDuplo","url":"#tab/app.quotes/vq=STATUS%3A%20%22Requested%7CStaged%7COn%20Hold%22%20CREATED-ON%3A%20%22%3E04-24-2016%22"},"inversesummary":false}'''
}




//{"filter":{"flows.quoteStages.state.name":"requested","systemProperties.createdOn":{"$gt":"${#TestCase#CreatedOnDate}"},"isBase":false,"isDraft":false},"params":{"sort":{"systemProperties.createdOn":1},"start":0,"limit":50,"columns":["_id","type","systemProperties","displayName","requestReason","flows.quoteStages.state","flows.quoteStages.target","relationships.requestedBy","relationships.assignee","expirationDate","flows.quoteStages.transitions","dueDate","amount.normalizedAmount","relationships.customer","tags","flows.quoteStages.transitions","flows.quoteStages.transitions"]},"origin":{"component":"AvalonGridDuplo","url":"#tab/app.quotes/vq=STATUS%3A%20%22Requested%22%20CREATED-ON%3A%20%22%3E04-14-2016%22"},"inversesummary":false}</script></con:config></con:testStep><con:testStep type="restrequest" name="FindQuotes" id="ed80187e-e150-4e23-b10e-bb0d54b1391b"><con:settings/><con:config service="FindQuotes" resourcePath="/rest/api/dell/app.quotes::find" methodName="App.quotes::find" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="FindQuotes" id="0303b810-05fa-4e34-9420-745dad712ec3" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Cookie" value="${#TestSuite#Cookie}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://${#TestSuite#serverName}.ssi-cloud.com</con:endpoint><con:request>{"filter":{"tags":{"$nin":[{"$regex":"^TAT_TEST"},{"$regex":"^Functional_QA"}]},"flows.quoteStages.state.name":"requested","systemProperties.createdOn":{"$gte":"${#TestCase#CreatedOnDate}"},"isBase":false,"isDraft":false},"params":{"sort":{"systemProperties.createdOn":1},"start":0,"limit":50,"columns":["_id","type","systemProperties","displayName","requestReason","flows.quoteStages.state","flows.quoteStages.target","relationships.requestedBy","relationships.assignee","expirationDate","flows.quoteStages.transitions","dueDate","amount.normalizedAmount","relationships.customer","tags","flows.quoteStages.transitions","flows.quoteStages.transitions"]},"origin":{"component":"AvalonGridDuplo"},"inversesummary":false}</con:request><con:originalUri>https://qa-internal.dev.ssi-cloud.com/rest/api/dell/app.quotes::find</con:originalUri><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="REST Request-test" id="bf79a040-59cc-48d2-9cc2-96c9b65264af" disabled="true"><con:settings/><con:config service="FindQuotes" resourcePath="/rest/api/dell/app.quotes::find" methodName="App.quotes::find" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="REST Request-test" id="0303b810-05fa-4e34-9420-745dad712ec3" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Cookie" value="${#TestSuite#Cookie}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://qa-internal.dev.ssi-cloud.com</con:endpoint><con:request>{"filter":{"_id":"54925f8ae4b002d9d76bc9c8","isBase":false,"isDraft":false},"params":{"sort":{"dueDate":1},"start":0,"limit":50,"columns":["_id","type","systemProperties","displayName","requestReason","flows.quoteStages.state","flows.quoteStages.target","relationships.requestedBy","relationships.assignee","expirationDate","flows.quoteStages.transitions","dueDate","amount.normalizedAmount","relationships.customer","tags","flows.quoteStages.transitions","flows.quoteStages.transitions"]},"origin":{"component":"AvalonGridDuplo"},"inversesummary":false}</con:request><con:originalUri>https://qa-internal.dev.ssi-cloud.com/rest/api/dell/app.quotes::find</con:originalUri><con:credentials><con:username>maria.gomez@dell.com</con:username><con:password>passwordone</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script-CheckBadData" id="064218e9-140f-4057-8c20-770e7de29981" disabled="true"><con:settings/><con:config><script>//def responseAsXml = context.expand( '${REST Request-test#ResponseAsXml#declare namespace ns1=\'https://qa-internal.dev.ssi-cloud.com/rest/api/dell/app.quotes::find\'; //ns1:Response[1]/ns1:data[1]/ns1:app.quote[1]/ns1:e[1]/ns1:relationships[1]/ns1:e[2]/ns1:target[1]/ns1:relationships[1]/ns1:affinityOrganization[1]}' )
def responseAsXml = context.expand( '${REST Request-test#ResponseAsXml#declare namespace ns1=\'https://qa-internal.dev.ssi-cloud.com/rest/api/dell/app.quotes::find\'; //ns1:Response[1]/ns1:data[1]/ns1:app.quote[1]/ns1:e[1]/ns1:relationships[1]/ns1:e[2]/ns1:target[1]/ns1:relationships[1]/ns1:affinityOrganization[1]/ns1:targets[1]/ns1:e[1]/ns1:extensions[1]/ns1:tenant[1]/ns1:l0AffinityId[1]/ns1:value[1]}' )
def responseAsXml = context.expand( '${REST Request-test#ResponseAsXml#declare namespace ns1=\'https://qa-internal.dev.ssi-cloud.com/rest/api/dell/app.quotes::find\'; //ns1:Response[1]/ns1:data[1]/ns1:app.quote[1]/ns1:e[1]/ns1:relationships[1]/ns1:e[2]/ns1:target[1]/ns1:relationships[1]/ns1:affinityOrganization[1]}' )
</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script-GetQuoteID" id="b39da542-5b76-4092-a9e3-218fd95a7312"><con:settings/><con:config><script>import groovy.json.JsonSlurper
import com.eviware.soapui.support.XmlHolder
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
def holder = groovyUtils.getXmlHolder(testRunner.testCase.testSteps["FindQuotes"].testRequest.response.getContentAsXml());


def i=1
def j=1
                
for(node in holder["ns1:Response[1]/ns1:data[1]/ns1:app.quote[1]/ns1:e[${i}]/ns1:_id[1]"])
   {              
    rate = holder.getNodeValue("ns1:Response[1]/ns1:data[1]/ns1:app.quote[1]/ns1:e[${i}]/ns1:amount[1]/ns1:normalizedAmount[1]/ns1:rate[1]")   
    affinityOrg= holder.getNodeValue("ns1:Response[1]/ns1:data[1]/ns1:app.quote[1]/ns1:e[${i}]/ns1:relationships[1]/ns1:e[2]/ns1:target[1]/ns1:relationships[1]/ns1:affinityOrganization[1]/ns1:targets[1]/ns1:e[1]/ns1:extensions[1]/ns1:tenant[1]/ns1:l0AffinityId[1]/ns1:value[1]")
          
    log.info rate
    log.info affinityOrg
   if(rate!=null&amp;&amp; affinityOrg != null)
    // if(rate!=null)
      { 
       //	if(rate.toFloat()==1)
       
           
         	id = holder.getNodeValue("ns1:Response[1]/ns1:data[1]/ns1:app.quote[1]/ns1:e[${i}]/ns1:_id[1]" )
       
          log.info id
            j=j+1
                       
           i=i+1
           if(j==2)
              break;

                }
 
                }

testRunner.testCase.setPropertyValue( "QuoteID", id.toString() )
testRunner.testCase.setPropertyValue( "rate", rate.toString() )   
</script></con:config></con:testStep><con:testStep type="transfer" name="Property Transfer-QuoteID" id="565b2dc4-7449-4b6f-81e5-769876332c1d" disabled="true"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>QuoteID</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>FindQuotes</con:sourceStep><con:sourcePath>declare namespace ns1='https://qa-internal.dev.ssi-cloud.com/rest/api/dell/app.quotes::find';
//ns1:Response[1]/ns1:data[1]/ns1:app.quote[1]/ns1:e[1]/ns1:_id[1]</con:sourcePath><con:targetType>QuoteID</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:targetPath/><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="true" useXQuery="false"><con:name>QuoteName</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>FindQuotes</con:sourceStep><con:sourcePath>declare namespace ns1='https://qa-internal.dev.ssi-cloud.com/rest/api/dell/app.quotes::find';
//ns1:Response[1]/ns1:data[1]/ns1:app.quote[1]/ns1:e[1]/ns1:displayName[1]</con:sourcePath><con:targetType>QuoteName</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:targetPath xsi:nil="true"/><con:type>XPATH</con:type><con:targetTransferType>XPATH</con:targetTransferType><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="restrequest" name="QuoteDetails" id="0e25de1c-56fe-4718-b04d-ce361f6a9ce8"><con:settings/><con:config service="QuoteDetails" resourcePath="/rest/api/dell/app.quotes::find" methodName="App.quotes::find" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="QuoteDetails" id="73cce1c1-ad05-4f68-83e5-e387a9e63e66" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Cookie" value="${#TestSuite#Cookie}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://${#TestSuite#serverName}.ssi-cloud.com</con:endpoint><con:request>{"inversesummary":true,"extinversesummary":true,"filter":{"_id":"${#TestCase#QuoteID}"},"params":{"start":0,"limit":1},"origin":{"component":"AvalonCollection"}}</con:request><con:originalUri>https://qa-internal.dev.ssi-cloud.com/rest/api/dell/app.quotes::find</con:originalUri><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters>
  <con:entry key="inversesummary" value="true"/>
  <con:entry key="extinversesummary" value="true"/>
</con:parameters><con:parameterOrder><con:entry>inversesummary</con:entry><con:entry>extinversesummary</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="Property Transfer-TimeZone" id="f7082c85-4cad-4583-8916-c4ddebc80bdf"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TimeZone</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>QuoteDetails</con:sourceStep><con:sourcePath>declare namespace ns1='https://qa-internal.dev.ssi-cloud.com/rest/api/dell/app.quotes::find';
//ns1:Response[1]/ns1:data[1]/ns1:app.quote[1]/ns1:e[1]/ns1:extensions[1]/ns1:master[1]/ns1:requestedTimeZone[1]/ns1:value[1]/ns1:displayName[1]</con:sourcePath><con:targetType>TimeZone</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:targetPath/><con:type>XPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TimeZoneKey</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>QuoteDetails</con:sourceStep><con:sourcePath>declare namespace ns1='https://qa-internal.dev.ssi-cloud.com/rest/api/dell/app.quotes::find';
//ns1:Response[1]/ns1:data[1]/ns1:app.quote[1]/ns1:e[1]/ns1:extensions[1]/ns1:master[1]/ns1:requestedTimeZone[1]/ns1:value[1]/ns1:key[1]</con:sourcePath><con:targetType>TimeZoneKey</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>amount1</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>QuoteDetails</con:sourceStep><con:sourcePath>declare namespace ns1='https://qa-internal.dev.ssi-cloud.com/rest/api/dell/app.quotes::find';
//ns1:Response[1]/ns1:data[1]/ns1:app.quote[1]/ns1:e[1]/ns1:amount[1]/ns1:amount[1]</con:sourcePath><con:targetType>amount</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>corelookupKey</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>QuoteDetails</con:sourceStep><con:sourcePath>declare namespace ns1='https://qa-internal.dev.ssi-cloud.com/rest/api/dell/app.quotes::find';
//ns1:Response[1]/ns1:data[1]/ns1:app.quote[1]/ns1:e[1]/ns1:amount[1]/ns1:code[1]/ns1:key[1]</con:sourcePath><con:targetType>coreLookUpKey</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>coreLookUpKEY2</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>QuoteDetails</con:sourceStep><con:sourcePath>declare namespace ns1='https://qa-internal.dev.ssi-cloud.com/rest/api/dell/app.quotes::find';
//ns1:Response[1]/ns1:data[1]/ns1:app.quote[1]/ns1:e[1]/ns1:amount[1]/ns1:normalizedAmount[1]/ns1:code[1]/ns1:key[1]</con:sourcePath><con:targetType>coreLookUpKEY2</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>currencyName1</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>QuoteDetails</con:sourceStep><con:sourcePath>declare namespace ns1='https://qa-internal.dev.ssi-cloud.com/rest/api/dell/app.quotes::find';
//ns1:Response[1]/ns1:data[1]/ns1:app.quote[1]/ns1:e[1]/ns1:amount[1]/ns1:code[1]/ns1:name[1]</con:sourcePath><con:targetType>currencyName1</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false"><con:name>currencyDisplayName1</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>QuoteDetails</con:sourceStep><con:sourcePath>declare namespace ns1='https://qa-internal.dev.ssi-cloud.com/rest/api/dell/app.quotes::find';
//ns1:Response[1]/ns1:data[1]/ns1:app.quote[1]/ns1:e[1]/ns1:amount[1]/ns1:code[1]/ns1:displayName[1]</con:sourcePath><con:targetType>currencyDisplayName1</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:targetPath xsi:nil="true"/><con:type>XPATH</con:type><con:targetTransferType>XPATH</con:targetTransferType><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false"><con:name>currencyDisplayName2</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>QuoteDetails</con:sourceStep><con:sourcePath>declare namespace ns1='https://qa-internal.dev.ssi-cloud.com/rest/api/dell/app.quotes::find';
//ns1:Response[1]/ns1:data[1]/ns1:app.quote[1]/ns1:e[1]/ns1:amount[1]/ns1:normalizedAmount[1]/ns1:code[1]/ns1:displayName[1]</con:sourcePath><con:targetType>currencyDisplayName2</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:targetPath xsi:nil="true"/><con:type>XPATH</con:type><con:targetTransferType>XPATH</con:targetTransferType><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>CurrencyName2</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>QuoteDetails</con:sourceStep><con:sourcePath>declare namespace ns1='https://qa-internal.dev.ssi-cloud.com/rest/api/dell/app.quotes::find';
//ns1:Response[1]/ns1:data[1]/ns1:app.quote[1]/ns1:e[1]/ns1:amount[1]/ns1:normalizedAmount[1]/ns1:code[1]/ns1:name[1]</con:sourcePath><con:targetType>currencyName2</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>amount2</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>QuoteDetails</con:sourceStep><con:sourcePath>declare namespace ns1='https://qa-internal.dev.ssi-cloud.com/rest/api/dell/app.quotes::find';
//ns1:Response[1]/ns1:data[1]/ns1:app.quote[1]/ns1:e[1]/ns1:amount[1]/ns1:normalizedAmount[1]/ns1:amount[1]</con:sourcePath><con:targetType>amount2</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="restrequest" name="FindActivities" id="8e2dcdbe-f930-4a08-8955-e904eaafae3d"><con:settings/><con:config service="FindActivities" resourcePath="/rest/api/dell/core.activities::getrhpactivities" methodName="Core.activities::getrhpactivities" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="FindActivities" id="ec32ed71-dac8-4f9f-8863-509201de0075" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Cookie" value="${#TestSuite#Cookie}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://${#TestSuite#serverName}.ssi-cloud.com</con:endpoint><con:request>{"params":{"sort":{"systemProperties.createdOn":-1},"start":0,"limit":50,"columns":["relatedObjects"]},"origin":{"component":"Duplo_TimelineStream","url":"#tab/core.activities"},"inversesummary":false,"type":"app.quote","key":"${#TestCase#QuoteID}","filter":{"crudBased":false},"configParams":{"includeNotes":true}}</con:request><con:originalUri>https://qa-internal.dev.ssi-cloud.com/rest/api/dell/core.activities::getrhpactivities</con:originalUri><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="Property Transfer-requestedTime" id="da6df3e9-b7a1-4f4d-9eef-07163ab5a3e7"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>requestedTime</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>FindActivities</con:sourceStep><con:sourcePath>declare namespace ns1='https://qa-internal.dev.ssi-cloud.com/rest/api/dell/core.activities::getrhpactivities';
//ns1:Response[1]/ns1:data[1]/ns1:core.activity[1]/ns1:e[1]/ns1:context[1]/ns1:amount[1]/ns1:normalizedAmount[1]/ns1:convertedOn[1]</con:sourcePath><con:targetType>requestedTime</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:targetPath/><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="delay" name="Delay" id="c7fdb326-e063-4c74-9aad-0acf499d4dd7"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:testStep type="restrequest" name="Create Quote Input" id="75db7e36-b76d-4d6b-bebb-a7f8597414ac" disabled="true"><con:settings/><con:config service="Complete Quote" resourcePath="/rest/api/${#TestSuite#tenant}/app.quotes/${#TestCase#QuoteID}::getCreateQuoteInput" methodName="Quote Input" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create Quote Input" mediaType="application/json" postQueryString="false" id="90c1a4a6-e6ad-41a7-b401-21ced1e594b8"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Cookie" value="${#TestSuite#Cookie}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://${#TestSuite#serverName}.ssi-cloud.com</con:endpoint><con:request>{"detail":{"_id":"${#TestCase#QuoteID}","type":"app.quote","displayName":"${#TestCase#QuoteName}"},"selections":[],"origin":{"url":"#detail/app.quotes/${#TestCase#QuoteID}"}}</con:request><con:originalUri>https://pe-internal.dev.ssi-cloud.com/rest/api//app.quotes/::getCreateQuoteInput</con:originalUri><con:credentials><con:username>${#TestSuite#loginId}</con:username><con:password>passwordone</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Complete Quote" id="75a66777-ac12-46da-b588-95f8e4a2fbe1"><con:settings/><con:config service="Complete Quote" resourcePath="/rest/api/${#TestSuite#tenant}/app.quotes/${#TestCase#QuoteID}::createQuote" methodName="Complete Quote" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Complete Quote" mediaType="application/json" postQueryString="false" id="9b044755-d0bc-491c-bc19-a4996549688b"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Cookie" value="${#TestSuite#Cookie}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://${#TestSuite#serverName}.ssi-cloud.com</con:endpoint><con:request>{"amount":{"code":{"displayName":"${#TestCase#currencyDisplayName1}","name":"${#TestCase#currencyName1}","type":"core.lookup","key":"${#TestCase#coreLookUpKey}"},"amount":"${#TestCase#amount}","type":"core.currency","normalizedAmount":{"amount":"${#TestCase#amount2}","rate":"${#TestCase#rate}","code":{"key":"50ac018e1f9c0c00000001c7","displayName":"USD","type":"core.lookup","name":"usd"},"convertedOn":"2016-05-02T08:45:56.610Z"}},"notes":[],"isAutoCompleted":false,"documents":[],"resellerQuotes":[],"_id":"","type":"app.create.quote.input","priority":{"displayName":"Medium","name":"medium","type":"app.lookup","key":"50ac01a41f9c0c0000000a61"},"creationDate":"2016-05-04T12:16:59.662Z","expirationDate":"2016-06-03T00:00:00.000Z","quote":"${#TestCase#QuoteID}","displayName":"${#TestCase#QuoteName}","quoteNumber":"q1234324","inversesummary":true,"extinversesummary":true,"origin":{}}</con:request><con:originalUri>https://pe-internal.dev.ssi-cloud.com/rest/api//app.quotes/::createQuote</con:originalUri><con:credentials><con:username>${#TestSuite#loginId}</con:username><con:password>passwordone</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="Transfer Quote Number" id="b3c9e5f4-2c4c-4317-8690-671eb1d10547" disabled="true"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" entitize="false" transferToAll="false" useXQuery="false" transferChildNodes="false"><con:name>quoteNumber</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Complete Quote</con:sourceStep><con:sourcePath>declare namespace ns1='https://${#TestSuite#serverName}.ssi-cloud.com/rest/api/${#TestSuite#tenant}/app.quotes/${#TestSuite#QuoteID}::createQuote';
//ns1:Response[1]/ns1:data[1]/ns1:core.activity[1]/ns1:e[1]/ns1:context[1]/ns1:quoteNumber[1]</con:sourcePath><con:targetType>quoteNumber</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:targetPath/><con:type>XPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>completedDate</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Complete Quote</con:sourceStep><con:sourcePath>$.data.app.opportunity[0].targetAmount.normalizedAmount.convertedOn</con:sourcePath><con:targetType>result</con:targetType><con:targetStep>Groovy Script-TAT Calculations</con:targetStep><con:targetPath/><con:type>JSONPATH</con:type><con:targetTransferType>XPATH</con:targetTransferType><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>convertedOn</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Complete Quote</con:sourceStep><con:sourcePath>$.data.app.opportunity[0].amount.normalizedAmount.convertedOn</con:sourcePath><con:targetType>result</con:targetType><con:targetStep>Groovy Script-TAT Calculations</con:targetStep><con:targetPath/><con:type>JSONPATH</con:type><con:targetTransferType>XPATH</con:targetTransferType><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="restrequest" name="QuoteDetails-Completed" id="a6d1aca7-cdd1-4f8d-9552-471e3310a983"><con:settings/><con:config service="QuoteDetails" resourcePath="/rest/api/dell/app.quotes::find" methodName="App.quotes::find" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="QuoteDetails-Completed" id="73cce1c1-ad05-4f68-83e5-e387a9e63e66" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Cookie" value="${#TestSuite#Cookie}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://${#TestSuite#serverName}.ssi-cloud.com</con:endpoint><con:request>{"inversesummary":true,"extinversesummary":true,"filter":{"_id":"${#TestCase#QuoteID}"},"params":{"start":0,"limit":1},"origin":{"component":"AvalonCollection","url":"#tab/app.quotes/vq=STATUS%3A%20%22Completed%22%20CREATED-ON%3A%20%22%3E04-24-2016%22"}}</con:request><con:originalUri>https://qa-internal.dev.ssi-cloud.com/rest/api/dell/app.quotes::find</con:originalUri><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters>
  <con:entry key="inversesummary" value="true"/>
  <con:entry key="extinversesummary" value="true"/>
</con:parameters><con:parameterOrder><con:entry>inversesummary</con:entry><con:entry>extinversesummary</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="Property Transfer-TurnaroundTime" id="886fc83e-0e31-4e44-8bdb-56a0cb5cc516"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>ChangeDate</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>QuoteDetails-Completed</con:sourceStep><con:sourcePath>declare namespace ns1='https://qa-internal.dev.ssi-cloud.com/rest/api/dell/app.quotes::find';
//ns1:Response[1]/ns1:data[1]/ns1:app.quote[1]/ns1:e[1]/ns1:flows[1]/ns1:quoteStages[1]/ns1:transitions[1]/ns1:e[3]/ns1:changeDate[1]</con:sourcePath><con:targetType>ChangeDate</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TimeGap</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>QuoteDetails-Completed</con:sourceStep><con:sourcePath>declare namespace ns1='https://qa-internal.dev.ssi-cloud.com/rest/api/dell/app.quotes::find';
//ns1:Response[1]/ns1:data[1]/ns1:app.quote[1]/ns1:e[1]/ns1:flows[1]/ns1:quoteStages[1]/ns1:transitions[1]/ns1:e[3]/ns1:timeGap[1]</con:sourcePath><con:targetType>TimeGap</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false"><con:name>TatTotal</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>QuoteDetails-Completed</con:sourceStep><con:sourcePath>declare namespace ns1='https://qa-internal.dev.ssi-cloud.com/rest/api/dell/app.quotes::find';
//ns1:Response[1]/ns1:data[1]/ns1:app.quote[1]/ns1:e[1]/ns1:extensions[1]/ns1:master[1]/ns1:tatTotal[1]/ns1:value[1]</con:sourcePath><con:targetType>TatTotal</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:targetPath/><con:type>XPATH</con:type><con:targetTransferType>XPATH</con:targetTransferType><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TatNet</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>QuoteDetails-Completed</con:sourceStep><con:sourcePath>declare namespace ns1='https://qa-internal.dev.ssi-cloud.com/rest/api/dell/app.quotes::find';
//ns1:Response[1]/ns1:data[1]/ns1:app.quote[1]/ns1:e[1]/ns1:extensions[1]/ns1:master[1]/ns1:tatNet[1]/ns1:value[1]</con:sourcePath><con:targetType>TatNet</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script-FormatRequestedDate" id="36de390e-18b9-4a86-8bd5-ed217f0f77e6" disabled="true"><con:settings/><con:config><script>import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.text.DateFormat;
import java.util.Date;
import java.util.TimeZone;


def requestedTime = context.expand( '${#TestCase#requestedTime}' )
log.info requestedTime

String string = requestedTime;
String defaultTimezone = TimeZone.getDefault().getID();
SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ");
SimpleDateFormat output = new SimpleDateFormat("yyyy-MM-dd");
//Date d = sdf.parse(time);

Date date = sdf.parse(string.replaceAll("Z", "+0000"));
String nTime = output.format(date);
log.info("string: " + string);
log.info("date: " + nTime);
testRunner.testCase.setPropertyValue( "FormatedRequestedDate", nTime.toString());</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script- FormatChangeDate" id="45a71677-842e-4025-96f3-f8b1d61d32e2" disabled="true"><con:settings/><con:config><script>import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.text.DateFormat;
import java.util.Date;
import java.util.TimeZone;
def changeDate = context.expand( '${#TestCase#ChangeDate}' )

String string = changeDate;
//String defaultTimezone = TimeZone.getDefault().getID();
SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ");
SimpleDateFormat output = new SimpleDateFormat("yyyy-MM-dd");
//Date d = sdf.parse(time);

Date date = sdf.parse(string.replaceAll("Z", "+0000"));
String nTime = output.format(date);
log.info("string: " + string);
log.info("date: " + nTime);
testRunner.testCase.setPropertyValue( "FormatedChangeDate", nTime.toString());</script></con:config></con:testStep><con:testStep type="groovy" name="BusinessDay Calculation" id="4ac99e45-c8c2-4ccc-a51b-76cb2e646806" disabled="true"><con:settings/><con:config><script>import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.text.DateFormat;
import java.util.Date;
import java.util.TimeZone;

def formatedRequestedDate = context.expand( '${#TestCase#FormatedRequestedDate}' )
def formatedChangeDate = context.expand( '${#TestCase#FormatedChangeDate}' )

SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS");
String dateInString = formatedRequestedDate
log.info dateInString
Date date = formatter.parse(dateInString);
log.info(date);
log.info(formatter.format(date));
def projectContext = context.testCase.testSuite.project.context
projectContext.date = date






String dateInString1 = formatedChangeDate.toDate();		
		
Date date1 = formatter.parse(dateInString1);
log.info(date1);
log.info(formatter.format(date1));

projectContext.date1 = date1

def date3 = projectContext.date1
def date2 = projectContext.date

days(date2,date3)



 long days(Date start, Date end){
    //Ignore argument check

    Calendar c1 = Calendar.getInstance();
    c1.setTime(start);
    int w1 = c1.get(Calendar.DAY_OF_WEEK);
    c1.add(Calendar.DAY_OF_WEEK, -w1);

    Calendar c2 = Calendar.getInstance();
    c2.setTime(end);
    int w2 = c2.get(Calendar.DAY_OF_WEEK);
    c2.add(Calendar.DAY_OF_WEEK, -w2);

    //end Saturday to start Saturday 
    long days = (c2.getTimeInMillis()-c1.getTimeInMillis())/(1000*60*60*24);
    long daysWithoutWeekendDays = days-(days*2/7);

    // Adjust days to add on (w2) and days to subtract (w1) so that Saturday
    // and Sunday are not included
    if (w1 == Calendar.SUNDAY &amp;&amp; w2 != Calendar.SATURDAY) {
        w1 = Calendar.MONDAY;
    } else if (w1 == Calendar.SATURDAY &amp;&amp; w2 != Calendar.SUNDAY) {
        w1 = Calendar.FRIDAY;
    } 

    if (w2 == Calendar.SUNDAY) {
        w2 = Calendar.MONDAY;
    } else if (w2 == Calendar.SATURDAY) {
        w2 = Calendar.FRIDAY;
    }

    return daysWithoutWeekendDays-w1+w2;
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script-TAT Calculations" id="a737d9aa-44b4-48a0-bda0-e7485132de64"><con:settings/><con:config><script><![CDATA[import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.TimeZone;
import java.util.concurrent.TimeUnit;
def quoteID = context.expand( '${#TestCase#QuoteID}' )
def timeZone = context.expand( '${#TestCase#TimeZone}' )
def requestedTime = context.expand( '${#TestCase#requestedTime}' )
def changeDate = context.expand( '${#TestCase#ChangeDate}' )
def timeGap = context.expand( '${#TestCase#TimeGap}' )
def long millies =timeGap.toLong()
def turnaroundTime = context.expand( '${#TestCase#TurnaroundTime}' )
def tatNet = context.expand( '${#TestCase#TatNet}' )
def tatTotal = context.expand( '${#TestCase#TatTotal}' )
def long minutes1 = tatTotal.toLong()
def long tatTotalmillies = minutes1 * 60 * 1000;
def long tatNetmillies = minutes1 * 60 * 1000;

//getWorkingDaysBetweenTwoDates( requestedTime,endDate)

getDurationBreakdown(millies)

getDurationBreakdownMinutes(tatTotalmillies)
getDurationBreakdownMinutes1(tatNetmillies)


def String getDurationBreakdown(long millies)
    {
        if(millies < 0)
        {
            throw new IllegalArgumentException("Duration must be greater than zero!");
        }

        long days = TimeUnit.MILLISECONDS.toDays(millies);
        millies -= TimeUnit.DAYS.toMillis(days);
        long hours = TimeUnit.MILLISECONDS.toHours(millies);
        millies -= TimeUnit.HOURS.toMillis(hours);
        long minutes = TimeUnit.MILLISECONDS.toMinutes(millies);
        millies -= TimeUnit.MINUTES.toMillis(minutes);
        long seconds = TimeUnit.MILLISECONDS.toSeconds(millies);

        StringBuilder sb = new StringBuilder(64);
        sb.append(days);
        sb.append(" Days ");
        sb.append(hours);
        sb.append(" Hours ");
      

        if (minutes==0 && seconds>0){
        	 minutes=minutes+1
        	 sb.append(minutes);
        	 sb.append(" Minutes ");
        	 seconds=0
        	 sb.append(seconds);
           sb.append(" Seconds");
        }
       else if (minutes>0 && seconds>0 && seconds<=30){
	      sb.append(minutes);
        	 sb.append(" Minutes ");
        	 seconds=0
        	 sb.append(seconds);
           sb.append(" Seconds");
        }
        else if (minutes>0 && seconds>30){
        	minutes=minutes+1
        	 sb.append(minutes);
        	 sb.append(" Minutes ");
        	 seconds=0
        	 sb.append(seconds);
           sb.append(" Seconds");
        	}
              
log.info(sb.toString())
       testRunner.testCase.setPropertyValue( "TatfromRestTimegap", sb.toString());
    }

def String getDurationBreakdownMinutes(long tatTotalmillies)
    {
        if(tatTotalmillies < 0)
        {
            throw new IllegalArgumentException("Duration must be greater than zero!");
        }

        long days = TimeUnit.MILLISECONDS.toDays(tatTotalmillies);
        tatTotalmillies -= TimeUnit.DAYS.toMillis(days);
        long hours = TimeUnit.MILLISECONDS.toHours(tatTotalmillies);
        tatTotalmillies -= TimeUnit.HOURS.toMillis(hours);
        long minutes = TimeUnit.MILLISECONDS.toMinutes(tatTotalmillies);
        tatTotalmillies -= TimeUnit.MINUTES.toMillis(minutes);
        long seconds = TimeUnit.MILLISECONDS.toSeconds(tatTotalmillies);

        StringBuilder sb = new StringBuilder(64);
        sb.append(days);
        sb.append(" Days ");
        sb.append(hours);
        sb.append(" Hours ");
        sb.append(minutes);
        sb.append(" Minutes "); 
        sb.append(seconds);
        sb.append(" Seconds");
        
        log.info(sb.toString())
        testRunner.testCase.setPropertyValue( "TatfromTatTotal", sb.toString());
    }

def String getDurationBreakdownMinutes1(long tatNetmillies)
    {
        if(tatNetmillies < 0)
        {
            throw new IllegalArgumentException("Duration must be greater than zero!");
        }

        long days = TimeUnit.MILLISECONDS.toDays(tatNetmillies);
        tatNetmillies -= TimeUnit.DAYS.toMillis(days);
        long hours = TimeUnit.MILLISECONDS.toHours(tatNetmillies);
        tatNetmillies -= TimeUnit.HOURS.toMillis(hours);
        long minutes = TimeUnit.MILLISECONDS.toMinutes(tatNetmillies);
        tatNetmillies -= TimeUnit.MINUTES.toMillis(minutes);
        long seconds = TimeUnit.MILLISECONDS.toSeconds(tatNetmillies);

        StringBuilder sb = new StringBuilder(64);
        sb.append(days);
        sb.append(" Days ");
        sb.append(hours);
        sb.append(" Hours ");
        sb.append(minutes);
        sb.append(" Minutes "); 
        sb.append(seconds);
        sb.append(" Seconds");
        
        log.info(sb.toString())
        testRunner.testCase.setPropertyValue( "tatNetmillies", sb.toString());
    }


    ]]></script></con:config></con:testStep><con:testStep type="groovy" name="Assertion For TatTotal and TatNet" id="02cc62b5-92ab-40b1-b6df-33a0ec8ecea4"><con:settings/><con:config><script>def tatfromTatTotal = context.expand( '${#TestCase#TatfromTatTotal}' )
def tatfromRestTimegap = context.expand( '${#TestCase#TatfromRestTimegap}' )
def tatNetmillies = context.expand( '${#TestCase#tatNetmillies}' )




assert tatfromTatTotal==tatfromRestTimegap
assert tatNetmillies==tatfromRestTimegap</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script" id="1de7ee21-0cb7-4e77-ae7e-4e70dd93752d" disabled="true"><con:settings/><con:config><script><![CDATA[import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.text.DateFormat;
import java.util.Date;
import java.util.TimeZone;
import java.util.concurrent.TimeUnit;

def changeDate = context.expand( '${#TestCase#ChangeDate}' )
def requestedTime = context.expand( '${#TestCase#requestedTime}' )
//log.info requestedTime
//log.info changeDate

//String string = requestedTime;
//String string1 = changeDate;

SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ");
SimpleDateFormat output = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS");


//requested Date
Date date = sdf.parse(requestedTime.replaceAll("Z", "+0000"));
String nTime = output.format(date);
myDate = Date.parse("yyyy-MM-dd'T'HH:mm:ss.SSS", nTime) ;
//log.info("string: " + string);
log.info("date: " + nTime);




//change Date
Date date1 = sdf.parse(changeDate.replaceAll("Z", "+0000"));
String nTime1 = output.format(date1);
myDate1 = Date.parse("yyyy-MM-dd'T'HH:mm:ss.SSS", nTime1) ;
log.info("myDate1: " + myDate1);
log.info("date: " + nTime1);

days(myDate,myDate1);



long days(Date start, Date end){
    //Ignore argument check

    Calendar c1 = Calendar.getInstance();
    c1.setTime(start);
   /* c1.set(Calendar.HOUR_OF_DAY, 0);
    c1.set(Calendar.MINUTE, 0);
    c1.set(Calendar.SECOND, 0);
    c1.set(Calendar.MILLISECOND, 0);*/
    
    int w1 = c1.get(Calendar.DAY_OF_WEEK);
    c1.add(Calendar.DAY_OF_WEEK, -w1);

    Calendar c2 = Calendar.getInstance();
    c2.setTime(end);
      
    int w2 = c2.get(Calendar.DAY_OF_WEEK);
    c2.add(Calendar.DAY_OF_WEEK, -w2);

    //end Saturday to start Saturday 
    long days = (c2.getTimeInMillis()-c1.getTimeInMillis())/(1000*60*60*24);
    long daysWithoutWeekendDays = days-(days*2/7);

    // Adjust days to add on (w2) and days to subtract (w1) so that Saturday
    // and Sunday are not included
    if (w1 == Calendar.SUNDAY && w2 != Calendar.SATURDAY) {
        w1 = Calendar.MONDAY;
    } else if (w1 == Calendar.SATURDAY && w2 != Calendar.SUNDAY) {
        w1 = Calendar.FRIDAY;
    } 

    if (w2 == Calendar.SUNDAY) {
        w2 = Calendar.MONDAY;
    } else if (w2 == Calendar.SATURDAY) {
        w2 = Calendar.FRIDAY;
    }
log.info (daysWithoutWeekendDays-w1+w2)
    return daysWithoutWeekendDays-w1+w2;
}

DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS");
//get current date time with Date()
Date date2 = new Date();
log.info(dateFormat.format(date2));
//log.info firstDayOfWeekTimestamp
// Get calendar set to current date and time
Calendar c = Calendar.getInstance();
 	    c.set(Calendar.HOUR_OF_DAY, 0);
         c.set(Calendar.MINUTE, 0);
         c.set(Calendar.SECOND, 0);
         c.set(Calendar.MILLISECOND, 0);
         
         log.info c.getTime();


    
t2=(dateFormat.format(c.getTime()))
t2=(dateFormat.parse(t2))
Timeinhours=(myDate1 - t2);
log.info ("Time: " + Timeinhours);

getDurationBreakdown(Timeinhours)


def String getDurationBreakdown(long Timeinhours)
    {
        if(Timeinhours < 0)
        {
            throw new IllegalArgumentException("Duration must be greater than zero!");
        }

        long days = TimeUnit.MILLISECONDS.toDays(Timeinhours);
        Timeinhours -= TimeUnit.DAYS.toMillis(days);
        long hours = TimeUnit.MILLISECONDS.toHours(Timeinhours);
        Timeinhours -= TimeUnit.HOURS.toMillis(hours);
        long minutes = TimeUnit.MILLISECONDS.toMinutes(Timeinhours);
        Timeinhours -= TimeUnit.MINUTES.toMillis(minutes);
        long seconds = TimeUnit.MILLISECONDS.toSeconds(Timeinhours);

        StringBuilder sb = new StringBuilder(64);
       
        sb.append(hours);
        sb.append(" Hours ");
      

        if (minutes==0 && seconds>0){
        	 minutes=minutes+1
        	 sb.append(minutes);
        	 sb.append(" Minutes ");
        	 seconds=0
        	 sb.append(seconds);
           sb.append(" Seconds");
        }
       else if (minutes>0 && seconds>0 && seconds<=30){
	      sb.append(minutes);
        	 sb.append(" Minutes ");
        	 seconds=0
        	 sb.append(seconds);
           sb.append(" Seconds");
        }
        else if (minutes>0 && seconds>30){
        	minutes=minutes+1
        	 sb.append(minutes);
        	 sb.append(" Minutes ");
        	 seconds=0
        	 sb.append(seconds);
           sb.append(" Seconds");
        	}
              
log.info(sb.toString())


    }


]]></script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script 2" id="55dce0c9-22b9-4b57-9f5d-3df40d58f1f8" disabled="true"><con:settings/><con:config><script>import java.util.Calendar;
import java.text.SimpleDateFormat;
def changeDate = context.expand( '${#TestCase#ChangeDate}' )
def requestedTime = context.expand( '${#TestCase#requestedTime}' )

SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ");
SimpleDateFormat output = new SimpleDateFormat("yyyy-MM-dd");


Date date = sdf.parse(requestedTime.replaceAll("Z", "+0000"));
String nTime = output.format(date);
def myDate = Date.parse("yyyy-MM-dd", nTime) as Date;
//Date nTime = output.format(myDate);

//log.info("string: " + string);
log.info("date: " + nTime);


Date date1 = sdf.parse(changeDate.replaceAll("Z", "+0000"));
String nTime1 = output.format(date1);
def myDate1 = Date.parse("yyyy-MM-dd", nTime1) as Date;
//log.info("string: " + string1);
log.info("date: " + nTime1);

WeekdayTest(myDate,myDate1)


long WeekdayTest(Date startdate,Date enddate)
{
 
 
    SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
    try
    {
      //Date start = sdf.parse(startdate);
      Calendar start = Calendar.getInstance();
      start.setTime(sdf.parse(startdate));
      //Date end = sdf.parse(enddate);
      Calendar end = Calendar.getInstance();
      end.setTime(sdf.parse(enddate));
      int workingDays = 0;
      while(!start.after(end))//removed ; (semi-colon)
      {
        //int day = start.getDay();
        int day = start.get(Calendar.DAY_OF_WEEK);
        //if ((day != Calendar.SATURDAY) || (day != Calendar.SUNDAY)) if it's sunday, != to Saturday is true
        if ((day != Calendar.SATURDAY) &amp;&amp; (day != Calendar.SUNDAY))
        workingDays++;
        //log.info(workingDays);//moved
        start.add(Calendar.DATE, 1);//removed comment tags
      }
      log.info(workingDays);
    }
    catch(Exception e)
    {
      e.printStackTrace();
    }
  }
</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script 3" id="89105b27-acc8-4215-9f13-9f246c64e17c" disabled="true"><con:settings/><con:config><script>import lotus.domino.*; 
import java.util.*; 
import java.text.*; 
import java.math.*; 
import java.util.Calendar;
import java.text.SimpleDateFormat;
import java.text.DateFormat;
import java.util.Date;
import java.util.TimeZone;

def changeDate = context.expand( '${#TestCase#ChangeDate}' )
def requestedTime = context.expand( '${#TestCase#requestedTime}' )

SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ");
SimpleDateFormat output = new SimpleDateFormat("yyyy-MM-dd");


Date date = sdf.parse(requestedTime.replaceAll("Z", "+0000"));
String nTime = output.format(date);
log.info("date: " + nTime);


Date date1 = sdf.parse(changeDate.replaceAll("Z", "+0000"));
String nTime1 = output.format(date1);
log.info("date: " + nTime1);




public class CalcBusinessDays  { 

public void NotesMain() { 
Date startTime = null
Date endTime = null; 
String startTimeStr, endTimeStr, result; 

try { 
Session session = getSession(); 
AgentContext agentContext = session.getAgentContext(); 

startTimeStr = nTime; 
endTimeStr = nTime1; 
startTime = session.createDateTime(startTimeStr); 
endTime = session.createDateTime(endTimeStr); 
result = diffInWeekdays(startTime, endTime, startTimeStr, 
endTimeStr); 
System.out.println("Result = " + result); 

} catch(Exception e) { 
e.printStackTrace(); 
} 
} 

public String diffInWeekdays(DateTime startTime, DateTime endTime, String 
startTimeStr, String endTimeStr) { 
String res = ""; 
try { 
Date firstDate = null, secondDate = null; 
int diffInt = endTime.timeDifference(startTime); 
int diffIntDays = (diffInt / 86400 + 1); 
BigInteger sev = BigInteger.valueOf(7); 
BigInteger minusTwo = BigInteger.valueOf(-2); 
BigInteger bis = BigInteger.valueOf(getWeekday(firstDate = 
dateConvert(startTimeStr))); 
BigInteger bie = BigInteger.valueOf(getWeekday(secondDate = 
dateConvert(endTimeStr))); 
int strtDay = bis.mod(sev).intValue(); 
int endDay = bie.mod(sev).intValue(); 
int max = minusTwo.max(BigInteger.valueOf(strtDay * -1)).intValue(); 
int min = BigInteger.valueOf(1).min(bie.mod(sev)).intValue(); 
int result = (diffIntDays - endDay + strtDay - 8) * 5 / 7 - max - min 
+ 5 - strtDay + endDay; 
//o.println("result =\t" + result); 
res = Integer.toString(result); 
} catch (Exception e) { 
e.printStackTrace(); 
} 
return res; 
} 

public Date dateConvert(String dt) { 
SimpleDateFormat sdf = new SimpleDateFormat("mm/dd/yyyy"); 
ParsePosition pos = new ParsePosition(0); 
Date covDate = sdf.parse(dt, pos); 
return covDate; 
} 

public int getWeekday(Date cdt) { 
Calendar cal = Calendar.getInstance(); 
cal.setTime(cdt); 
return cal.get(Calendar.DAY_OF_WEEK); 
} 

}</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script 4" id="2dab970d-10d5-4a5b-a45a-fd452b2ba81f" disabled="true"><con:settings/><con:config><script>import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.text.DateFormat;
import java.util.Date;
import java.util.TimeZone;

def changeDate = context.expand( '${#TestCase#ChangeDate}' )
def requestedTime = context.expand( '${#TestCase#requestedTime}' )

String startDateString = requestedTime;
    DateFormat df = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ"); 
    Date startDate;
//SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ");
//SimpleDateFormat output = new SimpleDateFormat("yyyy-MM-dd");
    
    
        startDate = df.parse(startDateString);
        String newDateString = df.format(startDate);
        log.info(newDateString);
   </script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script 5" id="b9c1222f-75bd-4b45-a993-40442b0f9b05" disabled="true"><con:settings/><con:config><script>import java.text.SimpleDateFormat;
import java.util.Date;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.text.DateFormat;
import java.util.TimeZone;
import java.util.concurrent.TimeUnit;

def changeDate = context.expand( '${#TestCase#ChangeDate}' )
def requestedTime = context.expand( '${#TestCase#requestedTime}' )
//log.info requestedTime
//log.info changeDate

//String string = requestedTime;
//String string1 = changeDate;

SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ");
SimpleDateFormat output = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS");


//requested Date
Date date = sdf.parse(requestedTime.replaceAll("Z", "+0000"));
String nTime = output.format(date);
myDate = Date.parse("yyyy-MM-dd'T'HH:mm:ss.SSS", nTime) ;
//log.info("string: " + string);
log.info("date: " + nTime);




//change Date
Date date1 = sdf.parse(changeDate.replaceAll("Z", "+0000"));
log.info("date1: " + date1);

String nTime1 = output.format(date1);
myDate1 = Date.parse("yyyy-MM-dd'T'HH:mm:ss.SSS", nTime1) ;
log.info("myDate1: " + myDate1);
log.info("date: " + nTime1);

DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS");
//get current date time with Date()
Date date2 = new Date();
log.info(dateFormat.format(date2));
//log.info firstDayOfWeekTimestamp
// Get calendar set to current date and time
Calendar c = Calendar.getInstance();
 	    c.set(Calendar.HOUR_OF_DAY, 0);
         c.set(Calendar.MINUTE, 0);
         c.set(Calendar.SECOND, 0);
         c.set(Calendar.MILLISECOND, 0);
         
         log.info c.getTime();


    
t2=(dateFormat.format(c.getTime()))
t3=(dateFormat.parse(t2))
Timeinhours=(myDate1 - t3);
log.info ("Time: " + Timeinhours);


DateDifferentExample(nTime1,t2)





Long DateDifferentExample(String dateStart,String dateStop) {

		//HH converts hour in 24 hours format (0-23), day calculation
		SimpleDateFormat format = new SimpleDateFormat("MM/dd/yyyy HH:mm:ss");

		Date d1 = null;
		Date d2 = null;

		try {
			d1 = format.parse(dateStart);
			d2 = format.parse(dateStop);

			//in milliseconds
			long diff = d2.getTime() - d1.getTime();

			long diffSeconds = diff / 1000 % 60;
			long diffMinutes = diff / (60 * 1000) % 60;
			long diffHours = diff / (60 * 60 * 1000) % 24;
			long diffDays = diff / (24 * 60 * 60 * 1000);

			log.info(diffDays + " days, ");
			log.info(diffHours + " hours, ");
			log.info(diffMinutes + " minutes, ");
			log.info(diffSeconds + " seconds.");

		} catch (Exception e) {
			e.printStackTrace();
		}

	}

</script></con:config></con:testStep><con:properties><con:property><con:name>amount</con:name><con:value>25.68</con:value></con:property><con:property><con:name>amount2</con:name><con:value>38.05</con:value></con:property><con:property><con:name>ChangeDate</con:name><con:value>2016-05-18T11:17:44.410Z</con:value></con:property><con:property><con:name>completedDate</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>coreLookUpKey</con:name><con:value>50ac01a21f9c0c000000080d</con:value></con:property><con:property><con:name>coreLookUpKEY2</con:name><con:value>50ac018e1f9c0c00000001c7</con:value></con:property><con:property><con:name>CreatedOnDate</con:name><con:value>2016-05-15T00:00:00.000Z</con:value></con:property><con:property><con:name>currency</con:name><con:value>GBP</con:value></con:property><con:property><con:name>currencyDisplayName1</con:name><con:value>GBP</con:value></con:property><con:property><con:name>currencyDisplayName2</con:name><con:value>USD</con:value></con:property><con:property><con:name>currencyName1</con:name><con:value>gbp</con:value></con:property><con:property><con:name>currencyName2</con:name><con:value>usd</con:value></con:property><con:property><con:name>FormatedChangeDate</con:name><con:value>2016-05-05</con:value></con:property><con:property><con:name>FormatedRequestedDate</con:name><con:value>2016-05-02</con:value></con:property><con:property><con:name>FormatedTime</con:name><con:value/></con:property><con:property><con:name>QuoteID</con:name><con:value>5739b531e4b06ffa01b63828</con:value></con:property><con:property><con:name>QuoteName</con:name><con:value>Q-APOS-ADT FIRE &amp; SECURITY PLC_GB7595878-ENTERPRISE-FY17Q2-1-V1</con:value></con:property><con:property><con:name>quoteNumber</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rate</con:name><con:value/></con:property><con:property><con:name>requestedTime</con:name><con:value>2016-05-13T11:31:44.954Z</con:value></con:property><con:property><con:name>TatfromRestTimegap</con:name><con:value>1 Days 23 Hours 34 Minutes 0 Seconds</con:value></con:property><con:property><con:name>TatfromTatTotal</con:name><con:value>1 Days 23 Hours 34 Minutes 0 Seconds</con:value></con:property><con:property><con:name>TatNet</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>tatNetmillies</con:name><con:value>1 Days 23 Hours 34 Minutes 0 Seconds</con:value></con:property><con:property><con:name>TatTotal</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>TimeGap</con:name><con:value>170531870</con:value></con:property><con:property><con:name>TimeZone</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>TimeZoneKey</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>TurnaroundTime</con:name><con:value>1597</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>565b2dc4-7449-4b6f-81e5-769876332c1d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f7082c85-4cad-4583-8916-c4ddebc80bdf</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a9cb2192-c985-42b1-aa03-c50fb66513c5</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>4ac99e45-c8c2-4ccc-a51b-76cb2e646806</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c7fdb326-e063-4c74-9aad-0acf499d4dd7</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>75db7e36-b76d-4d6b-bebb-a7f8597414ac</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>75a66777-ac12-46da-b588-95f8e4a2fbe1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b3c9e5f4-2c4c-4317-8690-671eb1d10547</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>36de390e-18b9-4a86-8bd5-ed217f0f77e6</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b39da542-5b76-4092-a9e3-218fd95a7312</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>45a71677-842e-4025-96f3-f8b1d61d32e2</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e6af9544-c8ae-40d3-a064-77deeb7a0673</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>064218e9-140f-4057-8c20-770e7de29981</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>bf79a040-59cc-48d2-9cc2-96c9b65264af</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase id="119c6007-75c4-4e82-a0e0-8d1db936c4ae" discardOkResults="true" failOnError="true" failTestCaseOnErrors="true" keepSession="false" name="Tasks-Completed-Requested during weekday, Completed during weekday of the same week" searchProperties="true" disabled="true"><con:settings/><con:testStep type="calltestcase" name="Find Cookie" id="08492c3e-1c05-4fb7-ac4f-4644aa99fe2d"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>c0ce29f2-7cb0-4efc-a1f0-d98a032504a6</con:targetTestCase><con:properties><con:property><con:name>qaDevCookies</con:name><con:value>[avalon.sid=s%3A54cb1cf0e4b004ec636c4d71.OKyf7Hynz6NWePZzjLl5L9azOOkbtfD5ExcpJE%2FUL48</con:value></con:property></con:properties><con:returnProperties><con:entry>qaDevCookies</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script -CreatedOnDate" id="6bda5a34-450f-427a-af64-6c06a948395d"><con:settings/><con:config><script>import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.text.DateFormat;
import java.util.Date;
import java.util.TimeZone;
import java.util.*
import org.joda.time.DateTime;

DateTime dateTime = new DateTime();
long firstDayOfWeekTimestamp = dateTime.withDayOfWeek(1).getMillis();
log.info firstDayOfWeekTimestamp
// Get calendar set to current date and time
Calendar c = Calendar.getInstance();
 	    c.set(Calendar.HOUR_OF_DAY, 0);
         c.set(Calendar.MINUTE, 0);
         c.set(Calendar.SECOND, 0);
         c.set(Calendar.MILLISECOND, 0);
        
       
// Set the calendar to SUNDAY of the current week
c.set(Calendar.DAY_OF_WEEK, Calendar.MONDAY);

// Print dates of the current week starting on SUNDAY
DateFormat df = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ");
for (int i = 0; i &lt; 1; i++) {
    log.info(df.format(c.getTime()));
 DateFormat df1 = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS");
 log.info(df1.format(c.getTime()));
    //c.add(Calendar.DATE, 1);
    testRunner.testCase.setPropertyValue( "CreatedOnDate", (df1.format(c.getTime()).toString()+"Z"));
}</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script-FIndQuotesRequest" id="c7cd9b4b-e847-484c-aef7-6b7380700d73" disabled="true"><con:settings/><con:config><script>import groovy.json.*
def serverName = context.expand( '${#TestSuite#serverName}' )
def tenant = context.expand( '${#TestSuite#tenant}' )
def createdOnDate = context.expand( '${#TestCase#CreatedOnDate}' )

if (tenant=="dell" &amp;&amp; serverName =="pe-internal.dev")
{

                def jsonText='''{"filter":{"flows.quoteStages.state.name":"requested","flows.quoteStages.transitions":{"$elemMatch":{"changeDate":{"$gte":"${#TestCase#CreatedOnDate}"},"toState":"requested"}},"isBase":false,"isDraft":false},"params":{"sort":{"systemProperties.createdOn":1},"start":0,"limit":50,"columns":["_id","type","systemProperties","displayName","requestReason","flows.quoteStages.state","flows.quoteStages.target","relationships.requestedBy","relationships.assignee","expirationDate","flows.quoteStages.transitions","dueDate","amount.normalizedAmount","relationships.customer","tags","flows.quoteStages.transitions","flows.quoteStages.transitions"]},"origin":{"component":"AvalonGridDuplo","url":"#tab/app.quotes/vq=STATUS%3A%20%22Requested%22%20REQUEST-DATE%${#TestCase#CreatedOnDate}%"},"inversesummary":false}'''
}
else
{
                def jsonText='''{"filter":{"flows.quoteStages.state.name":"requested","systemProperties.createdOn":{"$gt":"${#TestCase#CreatedOnDate}"},"isBase":false,"isDraft":false},"params":{"sort":{"dueDate":1},"start":0,"limit":50,"columns":["_id","type","systemProperties","displayName","requestReason","flows.quoteStages.state","flows.quoteStages.target","relationships.requestedBy","relationships.assignee","expirationDate","flows.quoteStages.transitions","dueDate","amount.normalizedAmount","relationships.customer","tags","flows.quoteStages.transitions","flows.quoteStages.transitions"]},"origin":{"component":"AvalonGridDuplo","url":"#tab/app.quotes/vq=STATUS%3A%20%22Requested%7CStaged%7COn%20Hold%22%20CREATED-ON%3A%20%22%3E04-24-2016%22"},"inversesummary":false}'''
}




//{"filter":{"flows.quoteStages.state.name":"requested","systemProperties.createdOn":{"$gt":"${#TestCase#CreatedOnDate}"},"isBase":false,"isDraft":false},"params":{"sort":{"systemProperties.createdOn":1},"start":0,"limit":50,"columns":["_id","type","systemProperties","displayName","requestReason","flows.quoteStages.state","flows.quoteStages.target","relationships.requestedBy","relationships.assignee","expirationDate","flows.quoteStages.transitions","dueDate","amount.normalizedAmount","relationships.customer","tags","flows.quoteStages.transitions","flows.quoteStages.transitions"]},"origin":{"component":"AvalonGridDuplo","url":"#tab/app.quotes/vq=STATUS%3A%20%22Requested%22%20CREATED-ON%3A%20%22%3E04-14-2016%22"},"inversesummary":false}</script></con:config></con:testStep><con:testStep type="restrequest" name="FindTask" id="e60684a8-4006-4880-8005-c30ebec1cfc9"><con:settings/><con:config service="FindTask" resourcePath="/rest/api/${#TestSuite#tenant}/app.tasks::find" methodName="App.tasks::find" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="FindTask" id="72d7ffb4-c9d1-4bee-8c95-65eb37ae1f09" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Cookie" value="${#TestSuite#Cookie}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://${#TestSuite#serverName}.ssi-cloud.com</con:endpoint><con:request>{"filter":{"tags":{"$nin":[{"$regex":"^TAT_TEST"},{"$regex":"^Functional_QA"}]},"flows.taskStatus.state.name":"open","systemProperties.createdOn":{"$gte":"${#TestCase#CreatedOnDate}"}},"params":{"sort":{"systemProperties.createdOn":1},"start":0,"limit":50,"columns":["_id","type","systemProperties","displayName","taskType","dueDate","flows.taskStatus.state","flows.taskStatus.target","priority","relationships.assignee","relationships.requestedBy","systemProperties.createdOn"]},"origin":{"component":"AvalonGridDuplo"},"inversesummary":false}</con:request><con:originalUri>https://pe-internal.dev.ssi-cloud.com/rest/api/dell/app.tasks::find</con:originalUri><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="Property Transfer-TaskID" id="f24e4578-6c82-46aa-963a-5be8c0cac063"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TaskID</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>FindTask</con:sourceStep><con:sourcePath>declare namespace ns1='https://pe-internal.dev.ssi-cloud.com/rest/api/dell/app.tasks::find';
//ns1:Response[1]/ns1:data[1]/ns1:app.task[1]/ns1:e[1]/ns1:_id[1]</con:sourcePath><con:targetType>TaskID</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:targetPath/><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TaskDisplayName</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>FindTask</con:sourceStep><con:sourcePath>declare namespace ns1='https://pe-internal.dev.ssi-cloud.com/rest/api/dell/app.tasks::find';
//ns1:Response[1]/ns1:data[1]/ns1:app.task[1]/ns1:e[1]/ns1:displayName[1]</con:sourcePath><con:targetType>TaskDisplayName</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="restrequest" name="TaskDetails" id="f7811c70-3057-48d5-a5ca-a27c45ed05f0"><con:settings/><con:config service="TaskDetails" resourcePath="/rest/api/${#TestSuite#tenant}/app.tasks::find" methodName="App.tasks::find" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="TaskDetails" id="a283c0b1-fe82-48ae-a333-6e53781e3cc8" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Cookie" value="${#TestSuite#Cookie}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://${#TestSuite#serverName}.ssi-cloud.com</con:endpoint><con:request>{"inversesummary":true,"filter":{"_id":"${#TestCase#TaskID}"},"params":{"start":0,"limit":1},"origin":{"component":"AvalonCollection"}}</con:request><con:originalUri>https://pe-internal.dev.ssi-cloud.com/rest/api/dell/app.tasks::find</con:originalUri><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters><entry key="inversesummary" value="true" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>inversesummary</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="Property Transfer-TimeZone" id="ef6b8989-f85b-439f-b50a-064ecf6480d4"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="true" transferChildNodes="false"><con:name>TimeZone</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>TaskDetails</con:sourceStep><con:sourcePath>declare namespace ns1='https://pe-internal.dev.ssi-cloud.com/rest/api/dell/app.tasks::find';
//ns1:Response[1]/ns1:data[1]/ns1:app.task[1]/ns1:e[1]/ns1:extensions[1]/ns1:master[1]/ns1:requestedTimeZone[1]/ns1:value[1]/ns1:displayName[1]</con:sourcePath><con:targetType>TimeZone</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:targetPath/><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="restrequest" name="FindActivities" id="cd7dda61-054f-4b73-8ef1-a81f73dcfb35"><con:settings/><con:config service="FindActivities" resourcePath="/rest/api/dell/core.activities::getrhpactivities" methodName="Core.activities::getrhpactivities" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="FindActivities" id="ec32ed71-dac8-4f9f-8863-509201de0075" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Cookie" value="${#TestSuite#Cookie}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://${#TestSuite#serverName}.ssi-cloud.com</con:endpoint><con:request>{"params":{"sort":{"systemProperties.createdOn":-1},"start":0,"limit":50,"columns":["relatedObjects"]},"origin":{"component":"Duplo_TimelineStream","url":"#tab/core.activities"},"inversesummary":false,"type":"app.task","key":"${#TestCase#TaskID}","filter":{"crudBased":false},"configParams":{"includeNotes":true}}</con:request><con:originalUri>https://qa-internal.dev.ssi-cloud.com/rest/api/dell/core.activities::getrhpactivities</con:originalUri><con:credentials><con:username>maria.gomez@dell.com</con:username><con:password>passwordone</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="Property Transfer-CreatedOnDate" id="34f3dc72-65dc-4452-98c0-80d30fcc8a99"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>CreatedOnDate</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>FindActivities</con:sourceStep><con:sourcePath>declare namespace ns1='https://qa-internal.dev.ssi-cloud.com/rest/api/dell/core.activities::getrhpactivities';
//ns1:Response[1]/ns1:data[1]/ns1:core.activity[1]/ns1:e[1]/ns1:systemProperties[1]/ns1:createdOn[1]</con:sourcePath><con:targetType>CreatedOnDate</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:targetPath/><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="restrequest" name="CompleteTask" id="d7460396-c9d9-4256-9227-e8f7041ba653"><con:settings/><con:config service="CompleteTask" resourcePath="/rest/api/${#TestSuite#tenant}/app.tasks/${#TestCase#TaskID}::completeTask" methodName="511a69f263165f8e0f05266e::completeTask" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CompleteTask" id="b101cbcc-5363-41ee-bc9f-5eb57ab80861" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Cookie" value="${#TestSuite#Cookie}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://${#TestSuite#serverName}.ssi-cloud.com</con:endpoint><con:request>{"detail":{"_id":"${#TestCase#TaskID}","type":"app.task","displayName":"${#TestCase#TaskDisplayName}"},"selections":[],"inversesummary":true,"extinversesummary":true,"origin":{}}</con:request><con:originalUri>https://pe-internal.dev.ssi-cloud.com/rest/api/dell/app.tasks/::completeTask</con:originalUri><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters>
  <con:entry key="inversesummary" value="true"/>
  <con:entry key="extinversesummary" value="true"/>
</con:parameters><con:parameterOrder><con:entry>inversesummary</con:entry><con:entry>extinversesummary</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="TaskDetails-Completed" id="e20df93a-d4f1-4520-9e29-e2a0891acf8d"><con:settings/><con:config service="TaskDetails" resourcePath="/rest/api/${#TestSuite#tenant}/app.tasks::find" methodName="App.tasks::find" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="TaskDetails-Completed" id="a283c0b1-fe82-48ae-a333-6e53781e3cc8" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Cookie" value="${#TestSuite#Cookie}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://${#TestSuite#serverName}.ssi-cloud.com</con:endpoint><con:request>{"inversesummary":true,"filter":{"_id":"${#TestCase#TaskID}"},"params":{"start":0,"limit":1},"origin":{"component":"AvalonCollection","url":"#tab/app.tasks"}}</con:request><con:originalUri>https://qa-internal.dev.ssi-cloud.com/rest/api/dell/app.tasks::find</con:originalUri><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters><entry key="inversesummary" value="true" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>inversesummary</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="Property Transfer-CompletedDate" id="ded5c5ab-29ac-4c8a-85c2-bd92356e30a4"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>CompletedDate</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>TaskDetails-Completed</con:sourceStep><con:sourcePath>declare namespace ns1='https://qa-internal.dev.ssi-cloud.com/rest/api/dell/app.tasks::find';
//ns1:Response[1]/ns1:data[1]/ns1:app.task[1]/ns1:e[1]/ns1:flows[1]/ns1:taskStatus[1]/ns1:transitions[1]/ns1:e[2]/ns1:changeDate[1]</con:sourcePath><con:targetType>CompletedDate</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:targetPath/><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TatTotal</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>TaskDetails-Completed</con:sourceStep><con:sourcePath>declare namespace ns1='https://qa-internal.dev.ssi-cloud.com/rest/api/dell/app.tasks::find';
//ns1:Response[1]/ns1:data[1]/ns1:app.task[1]/ns1:e[1]/ns1:extensions[1]/ns1:master[1]/ns1:tatTotal[1]/ns1:value[1]</con:sourcePath><con:targetType>TatTotal</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TatNet</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>TaskDetails-Completed</con:sourceStep><con:sourcePath>declare namespace ns1='https://qa-internal.dev.ssi-cloud.com/rest/api/dell/app.tasks::find';
//ns1:Response[1]/ns1:data[1]/ns1:app.task[1]/ns1:e[1]/ns1:extensions[1]/ns1:master[1]/ns1:tatNet[1]/ns1:value[1]</con:sourcePath><con:targetType>TatNet</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script-TatCalculations" id="69247761-45f9-44dc-91c5-4d711a86cef2"><con:settings/><con:config><script><![CDATA[import java.text.SimpleDateFormat;
import java.util.Date;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.text.DateFormat;
import java.util.TimeZone;
import java.util.concurrent.TimeUnit;
import java.lang.Long

def createdOnDate = context.expand( '${#TestCase#CreatedOnDate}' )
def completedDate = context.expand( '${#TestCase#CompletedDate}' )

String string = createdOnDate;
String string1 = completedDate;


SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ");
SimpleDateFormat output = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS");

//requested Date
Date date = sdf.parse(createdOnDate.replaceAll("Z", "+0000"));
String nTime = output.format(date);

myDate = Date.parse("yyyy-MM-dd'T'HH:mm:ss.SSS", nTime) ;
//log.info("string: " + string);
log.info("date: " + nTime);

//change Date
Date date1 = sdf.parse(completedDate.replaceAll("Z", "+0000"));
log.info("date1: " + date1);

String nTime1 = output.format(date1);
myDate1 = Date.parse("yyyy-MM-dd'T'HH:mm:ss.SSS", nTime1) ;
log.info("myDate1: " + myDate1);
log.info("date: " + nTime1);


use(groovy.time.TimeCategory) {
    def duration = date1 - date
    log.info ("Timediff::" + duration)
    log.info "Days: ${duration.days}, Hours: ${duration.hours},Minutes: ${duration.minutes},Seconds: ${duration.seconds}"
    testRunner.testCase.setPropertyValue( "Timediff", duration.toString());
     def minutes=0
     def seconds=0

   StringBuilder sb = new StringBuilder(64);
        sb.append(duration.days);
        sb.append(" Days ");
        sb.append(duration.hours);
        sb.append(" Hours ");
      

        if (duration.minutes==0 && duration.seconds>0){
           minutes=duration.minutes+1
        	 sb.append(duration.minutes);
        	 sb.append(" Minutes ");
        	 seconds=0
        	 sb.append(seconds);
           sb.append(" Seconds");
        }
       else if (duration.minutes>0 && duration.seconds>0 && duration.seconds<=30){
	      sb.append(duration.minutes);
        	 sb.append(" Minutes ");
        	 seconds=0
        	 sb.append(seconds);
           sb.append(" Seconds");
        }
        else if (duration.minutes>0 && duration.seconds>30){
        	minutes=duration.minutes+1
        	 sb.append(minutes);
        	 sb.append(" Minutes ");
        	seconds=0
        	 sb.append(seconds);
           sb.append(" Seconds");
        	}
              
log.info("sbTime::" + sb.toString())
 testRunner.testCase.setPropertyValue( "TimediffAfterCal", sb.toString());

    
}





/*
DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS");
//get current date time with Date()
Date date2 = new Date();
log.info(dateFormat.format(date2));
//log.info firstDayOfWeekTimestamp
// Get calendar set to current date and time
Calendar c = Calendar.getInstance();
 	    c.set(Calendar.HOUR_OF_DAY, 0);
         c.set(Calendar.MINUTE, 0);
         c.set(Calendar.SECOND, 0);
         c.set(Calendar.MILLISECOND, 0);
         
         log.info c.getTime();

    
t2=(dateFormat.format(c.getTime()))
t3=(dateFormat.parse(t2))
Timeinhours=(t3 - myDate1);
log.info ("Time: " + Timeinhours)




//DateDifferentExample(nTime,nTime1)





Long DateDifferentExample(String dateStart,String dateStop) {

		//HH converts hour in 24 hours format (0-23), day calculation
		SimpleDateFormat format = new SimpleDateFormat("MM/dd/yyyy HH:mm:ss.SSS");

		Date d1 = null;
		Date d2 = null;

	
			d1 = format.parse(dateStart);
			d2 = format.parse(dateStop);

			//in milliseconds
			long diff = d2.getTime() - d1.getTime();

			 long days = TimeUnit.MILLISECONDS.toDays(diff);
        diff -= TimeUnit.DAYS.toMillis(days);
        long hours = TimeUnit.MILLISECONDS.toHours(diff);
        diff -= TimeUnit.HOURS.toMillis(hours);
        long minutes = TimeUnit.MILLISECONDS.toMinutes(diff);
        diff -= TimeUnit.MINUTES.toMillis(minutes);
        long seconds = TimeUnit.MILLISECONDS.toSeconds(diff);

        StringBuilder sb = new StringBuilder(64);
   
        sb.append(hours);
        sb.append(" Hours ");
        sb.append(minutes);
        sb.append(" Minutes "); 
        sb.append(seconds);
        sb.append(" Seconds");
        
        log.info("sbT::"+ sb.toString())
        testRunner.testCase.setPropertyValue( "tatNetmillies", sb.toString());

			log.info(diffDays + " days, ");
			log.info(diffHours + " hours, ");
			log.info(diffMinutes + " minutes, ");
			log.info(diffSeconds + " seconds.");

		
	}
*/
]]></script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script-TAT Calculations" id="96ca8bbf-1b4a-45f5-807f-1b90c7c3e39b"><con:settings/><con:config><script><![CDATA[import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.TimeZone;
import java.util.concurrent.TimeUnit;
def quoteID = context.expand( '${#TestCase#QuoteID}' )
def timeZone = context.expand( '${#TestCase#TimeZone}' )
def requestedTime = context.expand( '${#TestCase#requestedTime}' )
def changeDate = context.expand( '${#TestCase#ChangeDate}' )


def turnaroundTime = context.expand( '${#TestCase#TurnaroundTime}' )
def tatNet = context.expand( '${#TestCase#TatNet}' )
def tatTotal = context.expand( '${#TestCase#TatTotal}' )
def long minutes1 = tatTotal.toLong()
def long tatTotalmillies = minutes1 * 60 * 1000;
def long tatNetmillies = minutes1 * 60 * 1000;

//getWorkingDaysBetweenTwoDates( requestedTime,endDate)

//getDurationBreakdown(millies)

getDurationBreakdownMinutes(tatTotalmillies)
getDurationBreakdownMinutes1(tatNetmillies)


/*def String getDurationBreakdown(long millies)
    {
        if(millies < 0)
        {
            throw new IllegalArgumentException("Duration must be greater than zero!");
        }

        long days = TimeUnit.MILLISECONDS.toDays(millies);
        millies -= TimeUnit.DAYS.toMillis(days);
        long hours = TimeUnit.MILLISECONDS.toHours(millies);
        millies -= TimeUnit.HOURS.toMillis(hours);
        long minutes = TimeUnit.MILLISECONDS.toMinutes(millies);
        millies -= TimeUnit.MINUTES.toMillis(minutes);
        long seconds = TimeUnit.MILLISECONDS.toSeconds(millies);

        StringBuilder sb = new StringBuilder(64);
        sb.append(days);
        sb.append(" Days ");
        sb.append(hours);
        sb.append(" Hours ");
      

        if (minutes==0 && seconds>0){
        	 minutes=minutes+1
        	 sb.append(minutes);
        	 sb.append(" Minutes ");
        	 seconds=0
        	 sb.append(seconds);
           sb.append(" Seconds");
        }
       else if (minutes>0 && seconds>0 && seconds<=30){
	      sb.append(minutes);
        	 sb.append(" Minutes ");
        	 seconds=0
        	 sb.append(seconds);
           sb.append(" Seconds");
        }
        else if (minutes>0 && seconds>30){
        	minutes=minutes+1
        	 sb.append(minutes);
        	 sb.append(" Minutes ");
        	 seconds=0
        	 sb.append(seconds);
           sb.append(" Seconds");
        	}
              
log.info(sb.toString())
       testRunner.testCase.setPropertyValue( "TatfromRestTimegap", sb.toString());
    }*/

def String getDurationBreakdownMinutes(long tatTotalmillies)
    {
        if(tatTotalmillies < 0)
        {
            throw new IllegalArgumentException("Duration must be greater than zero!");
        }

        long days = TimeUnit.MILLISECONDS.toDays(tatTotalmillies);
        tatTotalmillies -= TimeUnit.DAYS.toMillis(days);
        long hours = TimeUnit.MILLISECONDS.toHours(tatTotalmillies);
        tatTotalmillies -= TimeUnit.HOURS.toMillis(hours);
        long minutes = TimeUnit.MILLISECONDS.toMinutes(tatTotalmillies);
        tatTotalmillies -= TimeUnit.MINUTES.toMillis(minutes);
        long seconds = TimeUnit.MILLISECONDS.toSeconds(tatTotalmillies);

        StringBuilder sb = new StringBuilder(64);
        sb.append(days);
        sb.append(" Days ");
        sb.append(hours);
        sb.append(" Hours ");
        sb.append(minutes);
        sb.append(" Minutes "); 
        sb.append(seconds);
        sb.append(" Seconds");
        
        log.info(sb.toString())
        testRunner.testCase.setPropertyValue( "TatfromTatTotal", sb.toString());
    }

def String getDurationBreakdownMinutes1(long tatNetmillies)
    {
        if(tatNetmillies < 0)
        {
            throw new IllegalArgumentException("Duration must be greater than zero!");
        }

        long days = TimeUnit.MILLISECONDS.toDays(tatNetmillies);
        tatNetmillies -= TimeUnit.DAYS.toMillis(days);
        long hours = TimeUnit.MILLISECONDS.toHours(tatNetmillies);
        tatNetmillies -= TimeUnit.HOURS.toMillis(hours);
        long minutes = TimeUnit.MILLISECONDS.toMinutes(tatNetmillies);
        tatNetmillies -= TimeUnit.MINUTES.toMillis(minutes);
        long seconds = TimeUnit.MILLISECONDS.toSeconds(tatNetmillies);

        StringBuilder sb = new StringBuilder(64);
        sb.append(days);
        sb.append(" Days ");
        sb.append(hours);
        sb.append(" Hours ");
        sb.append(minutes);
        sb.append(" Minutes "); 
        sb.append(seconds);
        sb.append(" Seconds");
        
        log.info(sb.toString())
        testRunner.testCase.setPropertyValue( "tatNetmillies", sb.toString());
    }




    ]]></script></con:config></con:testStep><con:testStep type="groovy" name="Assertion For TatTotal and TatNet" id="584c1bcc-2d59-47f9-9948-40fc4cc0fabb"><con:settings/><con:config><script>def tatfromTatTotal = context.expand( '${#TestCase#TatfromTatTotal}' )
def tatfromRestTimegap = context.expand( '${#TestCase#TatfromRestTimegap}' )
def tatNetmillies = context.expand( '${#TestCase#tatNetmillies}' )
def timediffAfterCal = context.expand( '${#TestCase#TimediffAfterCal}' )




assert tatfromTatTotal==timediffAfterCal
assert tatNetmillies==timediffAfterCal</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script 5" id="a32382b7-643b-4e70-bcc6-d3482c49ca9e" disabled="true"><con:settings/><con:config><script>import java.text.SimpleDateFormat;
import java.util.Date;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.text.DateFormat;
import java.util.TimeZone;
import java.util.concurrent.TimeUnit;
import java.lang.Long
def createdOnDate = context.expand( '${#TestCase#CreatedOnDate}' )
def completedDate = context.expand( '${#TestCase#CompletedDate}' )

//log.info createdOnDate
//log.info completedDate

//String string = createdOnDate;
//String string1 = completedDate;

SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ");
SimpleDateFormat output = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS");

//createdOnDate
Date date = sdf.parse(createdOnDate.replaceAll("Z", "+0000"));
String nTime = output.format(date);
myDate = Date.parse("yyyy-MM-dd'T'HH:mm:ss.SSS", nTime) ;
//log.info("string: " + string);
log.info("date: " + nTime);

//completedDate
Date date1 = sdf.parse(completedDate.replaceAll("Z", "+0000"));
log.info("date1: " + date1);

String nTime1 = output.format(date1);
myDate1 = Date.parse("yyyy-MM-dd'T'HH:mm:ss.SSS", nTime1) ;
log.info("myDate1: " + myDate1);
log.info("date: " + nTime1);

DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS");
//get current date time with Date()
Date date2 = new Date();
log.info(dateFormat.format(date2));
//log.info firstDayOfWeekTimestamp
// Get calendar set to current date and time
Calendar c = Calendar.getInstance();
 	    c.set(Calendar.HOUR_OF_DAY, 0);
         c.set(Calendar.MINUTE, 0);
         c.set(Calendar.SECOND, 0);
         c.set(Calendar.MILLISECOND, 0);
         
         log.info c.getTime();


    
t2=(dateFormat.format(c.getTime()))
t3=(dateFormat.parse(t2))
Timeinhours=(myDate1 - t3);
log.info ("Time: " + Timeinhours);


DateDifferentExample(nTime1,t2)





Long DateDifferentExample(String dateStart,String dateStop) {

		//HH converts hour in 24 hours format (0-23), day calculation
		SimpleDateFormat format = new SimpleDateFormat("MM/dd/yyyy HH:mm:ss");

		Date d1 = null;
		Date d2 = null;

		try {
			d1 = format.parse(dateStart);
			d2 = format.parse(dateStop);

			//in milliseconds
			long diff = d2.getTime() - d1.getTime();

			long diffSeconds = diff / 1000 % 60;
			long diffMinutes = diff / (60 * 1000) % 60;
			long diffHours = diff / (60 * 60 * 1000) % 24;
			long diffDays = diff / (24 * 60 * 60 * 1000);

			log.info(diffDays + " days, ");
			log.info(diffHours + " hours, ");
			log.info(diffMinutes + " minutes, ");
			log.info(diffSeconds + " seconds.");

		} catch (Exception e) {
			e.printStackTrace();
		}

	}

</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script" id="907e452d-fbd7-4d3c-880c-83cf6c02d1f5" disabled="true"><con:settings/><con:config><script>import java.text.SimpleDateFormat;
import java.util.Date;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.text.DateFormat;
import java.util.TimeZone;
import java.util.concurrent.TimeUnit;
import java.lang.Long

def createdOnDate = context.expand( '${#TestCase#CreatedOnDate}' )
def completedDate = context.expand( '${#TestCase#CompletedDate}' )


SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ");
SimpleDateFormat output = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS");

//createdOnDate
Date date = sdf.parse(createdOnDate.replaceAll("Z", "+0000"));

//completedDate
Date date1 = sdf.parse(completedDate.replaceAll("Z", "+0000"));


days(date,date1)


 Long days(Date start, Date end){
    //Ignore argument check

    Calendar c1 = Calendar.getInstance();
    c1.setTime(start);
    int w1 = c1.get(Calendar.DAY_OF_WEEK);
    c1.add(Calendar.DAY_OF_WEEK, -w1);

    Calendar c2 = Calendar.getInstance();
    c2.setTime(end);
    int w2 = c2.get(Calendar.DAY_OF_WEEK);
    c2.add(Calendar.DAY_OF_WEEK, -w2);

    //end Saturday to start Saturday 
    long days = (c2.getTimeInMillis()-c1.getTimeInMillis())/(1000*60*60*24);
    long daysWithoutWeekendDays = days-(days*2/7);

    // Adjust days to add on (w2) and days to subtract (w1) so that Saturday
    // and Sunday are not included
    if (w1 == Calendar.SUNDAY &amp;&amp; w2 != Calendar.SATURDAY) {
        w1 = Calendar.MONDAY;
    } else if (w1 == Calendar.SATURDAY &amp;&amp; w2 != Calendar.SUNDAY) {
        w1 = Calendar.FRIDAY;
    } 

    if (w2 == Calendar.SUNDAY) {
        w2 = Calendar.MONDAY;
    } else if (w2 == Calendar.SATURDAY) {
        w2 = Calendar.FRIDAY;
    }
   log.info("days: " + (daysWithoutWeekendDays-w1+w2));
    //return daysWithoutWeekendDays-w1+w2;
}</script></con:config></con:testStep><con:properties><con:property><con:name>CompletedDate</con:name><con:value>2016-05-20T07:06:17.492Z</con:value></con:property><con:property><con:name>CreatedOnDate</con:name><con:value>2016-05-17T05:22:35.518Z</con:value></con:property><con:property><con:name>TaskDisplayName</con:name><con:value>Task848</con:value></con:property><con:property><con:name>TaskID</con:name><con:value>573aaa9be4b06d4962898758</con:value></con:property><con:property><con:name>TatfromTatTotal</con:name><con:value>3 Days 1 Hours 44 Minutes 0 Seconds</con:value></con:property><con:property><con:name>TatNet</con:name><con:value>4424</con:value></con:property><con:property><con:name>tatNetmillies</con:name><con:value>3 Days 1 Hours 44 Minutes 0 Seconds</con:value></con:property><con:property><con:name>TatTotal</con:name><con:value>4424</con:value></con:property><con:property><con:name>Timediff</con:name><con:value>3 days, 1 hours, 43 minutes, 41.974 seconds</con:value></con:property><con:property><con:name>TimediffAfterCal</con:name><con:value>3 Days 1 Hours 44 Minutes 0 Seconds</con:value></con:property><con:property><con:name>TimeZone</con:name><con:value>UTC+5:30</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>6bda5a34-450f-427a-af64-6c06a948395d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c7cd9b4b-e847-484c-aef7-6b7380700d73</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f24e4578-6c82-46aa-963a-5be8c0cac063</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>ef6b8989-f85b-439f-b50a-064ecf6480d4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>08492c3e-1c05-4fb7-ac4f-4644aa99fe2d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>cd7dda61-054f-4b73-8ef1-a81f73dcfb35</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>34f3dc72-65dc-4452-98c0-80d30fcc8a99</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase id="66b21c7a-d616-4a3e-9ca7-7c8bc673ef97" discardOkResults="true" failOnError="true" failTestCaseOnErrors="true" keepSession="false" name="Bookings-Completed-Requested during weekday, Completed during weekday of the same week" searchProperties="true" disabled="true"><con:settings/><con:testStep type="calltestcase" name="Find Cookie" id="3bdac3d8-6c33-462f-b1ca-95b51805ad85" disabled="true"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>c0ce29f2-7cb0-4efc-a1f0-d98a032504a6</con:targetTestCase><con:properties><con:property><con:name>qaDevCookies</con:name><con:value>[avalon.sid=s%3A54cb1cf0e4b004ec636c4d71.OKyf7Hynz6NWePZzjLl5L9azOOkbtfD5ExcpJE%2FUL48</con:value></con:property></con:properties><con:returnProperties><con:entry>qaDevCookies</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="calltestcase" name="fetch salesRep-SellingPeriod" id="68466991-c0f2-4c50-a01b-9e72d0b8d877"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>90dcc10b-40c2-4ecb-a22e-9bbfd7412348</con:targetTestCase><con:properties><con:property><con:name>server</con:name><con:value>qa</con:value></con:property><con:property><con:name>oppid</con:name><con:value>573d6eb0e4b0e8e4f0a14660</con:value></con:property><con:property><con:name>oppname</con:name><con:value>APOS-APICustomer01_API01-CLIENT-FY16Q4-47</con:value></con:property></con:properties><con:returnProperties><con:entry>server</con:entry><con:entry>oppid</con:entry><con:entry>oppname</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script -CreatedOnDate" id="fbd4434e-0e06-450b-ab5c-6bd44ec88d6e"><con:settings/><con:config><script>import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.text.DateFormat;
import java.util.Date;
import java.util.TimeZone;
import java.util.*
import org.joda.time.DateTime;

DateTime dateTime = new DateTime();

//for SoDate in Complete Booking step
DateFormat df2 = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS");
Calendar c1 = Calendar.getInstance();
log.info(df2.format(c1.getTime()));
testRunner.testCase.setPropertyValue( "currentDate", (df2.format(c1.getTime()).toString()+"Z"));

//for CreatedOnDate in Find Booking step
long firstDayOfWeekTimestamp = dateTime.withDayOfWeek(1).getMillis();
log.info firstDayOfWeekTimestamp
// Get calendar set to current date and time
Calendar c = Calendar.getInstance();
 	    c.set(Calendar.HOUR_OF_DAY, 0);
         c.set(Calendar.MINUTE, 0);
         c.set(Calendar.SECOND, 0);
         c.set(Calendar.MILLISECOND, 0);
        
       
// Set the calendar to MONDAY of the current week
c.set(Calendar.DAY_OF_WEEK, Calendar.MONDAY);

// Print dates of the current week starting on SUNDAY
DateFormat df = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ");
for (int i = 0; i &lt; 1; i++) {
    log.info(df.format(c.getTime()));
 DateFormat df1 = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS");
 log.info(df1.format(c.getTime()));
    //c.add(Calendar.DATE, 1);
    testRunner.testCase.setPropertyValue( "CreatedOnDate", (df1.format(c.getTime()).toString()+"Z"));
}</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script-FIndQuotesRequest" id="57b39c0a-a08c-41f0-8d49-5cc39855c35a" disabled="true"><con:settings/><con:config><script>import groovy.json.*
def serverName = context.expand( '${#TestSuite#serverName}' )
def tenant = context.expand( '${#TestSuite#tenant}' )
def createdOnDate = context.expand( '${#TestCase#CreatedOnDate}' )

if (tenant=="dell" &amp;&amp; serverName =="pe-internal.dev")
{

                def jsonText='''{"filter":{"flows.quoteStages.state.name":"requested","flows.quoteStages.transitions":{"$elemMatch":{"changeDate":{"$gte":"${#TestCase#CreatedOnDate}"},"toState":"requested"}},"isBase":false,"isDraft":false},"params":{"sort":{"systemProperties.createdOn":1},"start":0,"limit":50,"columns":["_id","type","systemProperties","displayName","requestReason","flows.quoteStages.state","flows.quoteStages.target","relationships.requestedBy","relationships.assignee","expirationDate","flows.quoteStages.transitions","dueDate","amount.normalizedAmount","relationships.customer","tags","flows.quoteStages.transitions","flows.quoteStages.transitions"]},"origin":{"component":"AvalonGridDuplo","url":"#tab/app.quotes/vq=STATUS%3A%20%22Requested%22%20REQUEST-DATE%${#TestCase#CreatedOnDate}%"},"inversesummary":false}'''
}
else
{
                def jsonText='''{"filter":{"flows.quoteStages.state.name":"requested","systemProperties.createdOn":{"$gt":"${#TestCase#CreatedOnDate}"},"isBase":false,"isDraft":false},"params":{"sort":{"dueDate":1},"start":0,"limit":50,"columns":["_id","type","systemProperties","displayName","requestReason","flows.quoteStages.state","flows.quoteStages.target","relationships.requestedBy","relationships.assignee","expirationDate","flows.quoteStages.transitions","dueDate","amount.normalizedAmount","relationships.customer","tags","flows.quoteStages.transitions","flows.quoteStages.transitions"]},"origin":{"component":"AvalonGridDuplo","url":"#tab/app.quotes/vq=STATUS%3A%20%22Requested%7CStaged%7COn%20Hold%22%20CREATED-ON%3A%20%22%3E04-24-2016%22"},"inversesummary":false}'''
}




//{"filter":{"flows.quoteStages.state.name":"requested","systemProperties.createdOn":{"$gt":"${#TestCase#CreatedOnDate}"},"isBase":false,"isDraft":false},"params":{"sort":{"systemProperties.createdOn":1},"start":0,"limit":50,"columns":["_id","type","systemProperties","displayName","requestReason","flows.quoteStages.state","flows.quoteStages.target","relationships.requestedBy","relationships.assignee","expirationDate","flows.quoteStages.transitions","dueDate","amount.normalizedAmount","relationships.customer","tags","flows.quoteStages.transitions","flows.quoteStages.transitions"]},"origin":{"component":"AvalonGridDuplo","url":"#tab/app.quotes/vq=STATUS%3A%20%22Requested%22%20CREATED-ON%3A%20%22%3E04-14-2016%22"},"inversesummary":false}</script></con:config></con:testStep><con:testStep type="restrequest" name="FindBooking" id="af1e3118-92db-4292-a3a8-d46858c7e2a4"><con:settings/><con:config service="FindBooking" resourcePath="/rest/api/${#TestSuite#tenant}/app.bookings::find" methodName="App.bookings::find" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="FindBooking" id="d5f2a138-3d23-467a-9912-55909aa3fc9d" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Cookie" value="${#TestSuite#Cookie}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://${#TestSuite#serverName}.ssi-cloud.com</con:endpoint><con:request>{"filter":{"tags":{"$nin":[{"$regex":"^TAT_TEST"},{"$regex":"^Functional_QA"}]},"flows.bookingStages.state.name":"pending","systemProperties.createdOn":{"$gte":"${#TestCase#CreatedOnDate}"},"extensions.master.targetPeriod.value.name":"${#TestSuite#targetPeriod}"},"params":{"sort":{"systemProperties.createdOn":1},"start":0,"limit":50,"columns":["_id","type","systemProperties","displayName","relationships.assignee","relationships.requestedBy","flows.bookingStages.transitions","dueDate","flows.bookingStages.transitions","flows.bookingStages.state","flows.bookingStages.target","soDate","amount.normalizedAmount"]},"origin":{},"inversesummary":false}</con:request><con:originalUri>https://pe-internal.dev.ssi-cloud.com/rest/api/pe-internal.dev/app.bookings::find</con:originalUri><con:credentials><con:username>${#TestSuite#loginID}</con:username><con:password>passwordone</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="Property Transfer-BookingID" id="757d8841-86ce-4e66-b576-47d4afe25e54"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>BookingID</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>FindBooking</con:sourceStep><con:sourcePath>declare namespace ns1='https://pe-internal.dev.ssi-cloud.com/rest/api/pe-internal.dev/app.bookings::find';
//ns1:Response[1]/ns1:data[1]/ns1:app.booking[1]/ns1:e[1]/ns1:_id[1]</con:sourcePath><con:targetType>BookingID</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:targetPath/><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>BookingDisplayName</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>FindBooking</con:sourceStep><con:sourcePath>declare namespace ns1='https://pe-internal.dev.ssi-cloud.com/rest/api/pe-internal.dev/app.bookings::find';
//ns1:Response[1]/ns1:data[1]/ns1:app.booking[1]/ns1:e[1]/ns1:displayName[1]</con:sourcePath><con:targetType>BookingDisplayName</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="restrequest" name="BookingDetails" id="72ab2170-83ea-44a7-bf57-9bf834b5cea8"><con:settings/><con:config service="BookingDetails" resourcePath="/rest/api/${#TestSuite#tenant}/app.bookings::find" methodName="App.bookings::find" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="BookingDetails" id="c7ef5e26-ae51-43f1-9688-846d741a3a69" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Cookie" value="${#TestSuite#Cookie}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://${#TestSuite#serverName}.ssi-cloud.com</con:endpoint><con:request>{"inversesummary":true,"extinversesummary":true,"filter":{"_id":"${#TestCase#BookingID}","type":"app.booking/sales"},"params":{"start":0,"limit":1},"origin":{"component":"AvalonCollection","url":"#tab/app.bookings/"}}</con:request><con:originalUri>https://pe-internal.dev.ssi-cloud.com/rest/api/delll/app.bookings::find</con:originalUri><con:credentials><con:username>maria.gomez@dell.com</con:username><con:password>passwordone</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters>
  <con:entry key="inversesummary" value="true"/>
  <con:entry key="extinversesummary" value="true"/>
</con:parameters><con:parameterOrder><con:entry>inversesummary</con:entry><con:entry>extinversesummary</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script-ReplacesOldBooking" id="667c7017-97d0-4cab-a7c6-95f4035bbc12" disabled="true"><con:settings/><con:config><script>import groovy.json.JsonSlurper
import com.eviware.soapui.support.XmlHolder
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
def holder = groovyUtils.getXmlHolder(testRunner.testCase.testSteps["BookingDetails"].testRequest.response.getContentAsXml());


def i=1
def j=1
                
for(node in holder["ns1:Response[1]/ns1:data[1]/ns1:app.booking[1]/ns1:e[${i}]/ns1:relationships[1]/ns1:e[${i}]/ns1:relation[1]/ns1:displayName[1]}")
   {              

    displayName = holder.getNodeValue("ns1:Response[1]/ns1:data[1]/ns1:app.booking[1]/ns1:e[${i}]/ns1:relationships[1]/ns1:e[4]/ns1:relation[1]/ns1:displayName[1]")   
    affinityOrg= holder.getNodeValue("ns1:Response[1]/ns1:data[1]/ns1:app.quote[1]/ns1:e[${i}]/ns1:relationships[1]/ns1:e[2]/ns1:target[1]/ns1:relationships[1]/ns1:affinityOrganization[1]/ns1:targets[1]/ns1:e[1]/ns1:extensions[1]/ns1:tenant[1]/ns1:l0AffinityId[1]/ns1:value[1]")
          
    log.info rate
    log.info affinityOrg
    if(rate!=null&amp;&amp; affinityOrg != null)
      { 
       //	if(rate.toFloat()==1)
       
           
         	id = holder.getNodeValue("ns1:Response[1]/ns1:data[1]/ns1:app.quote[1]/ns1:e[${i}]/ns1:_id[1]" )
          //QuoteID.add(id)
          log.info id
            j=j+1
                       
           i=i+1
           if(j==2)
              break;

                }}
testRunner.testCase.setPropertyValue( "QuoteID", id.toString() )
testRunner.testCase.setPropertyValue( "rate", rate.toString() )

</script></con:config></con:testStep><con:testStep type="transfer" name="Property Transfer-TimeZone" id="5849027f-4e01-42ab-b8e0-2ff288d5f380"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="true" transferChildNodes="false"><con:name>TimeZone</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>BookingDetails</con:sourceStep><con:sourcePath>declare namespace ns1='https://pe-internal.dev.ssi-cloud.com/rest/api/delll/app.bookings::find';
//ns1:Response[1]/ns1:data[1]/ns1:app.booking[1]/ns1:e[1]/ns1:inverseSummary[1]/ns1:acceptedQuote[1]/ns1:extensions[1]/ns1:master[1]/ns1:requestedTimeZone[1]/ns1:value[1]/ns1:displayName[1]</con:sourcePath><con:targetType>TimeZone</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:targetPath/><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" entitize="false" ignoreEmpty="false" transferToAll="false" transferChildNodes="false"><con:name>PaAmount</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>BookingDetails</con:sourceStep><con:sourcePath>declare namespace ns1='https://pe-internal.dev.ssi-cloud.com/rest/api/delll/app.bookings::find';
//ns1:Response[1]/ns1:data[1]/ns1:app.booking[1]/ns1:e[1]/ns1:amount[1]/ns1:amount[1]</con:sourcePath><con:targetType>PaAmount</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>SOAmount</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>BookingDetails</con:sourceStep><con:sourcePath>declare namespace ns1='https://pe-internal.dev.ssi-cloud.com/rest/api/delll/app.bookings::find';
//ns1:Response[1]/ns1:data[1]/ns1:app.booking[1]/ns1:e[1]/ns1:amount[1]/ns1:amount[1]</con:sourcePath><con:targetType>SOAmount</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>LineItemAmount</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>BookingDetails</con:sourceStep><con:sourcePath>declare namespace ns1='https://pe-internal.dev.ssi-cloud.com/rest/api/delll/app.bookings::find';
//ns1:Response[1]/ns1:data[1]/ns1:app.booking[1]/ns1:e[1]/ns1:inverseSummary[1]/ns1:acceptedQuote[1]/ns1:amount[1]/ns1:amount[1]</con:sourcePath><con:targetType>LineItemAmount</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>PaCurrencyDisplayName</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>BookingDetails</con:sourceStep><con:sourcePath>declare namespace ns1='https://pe-internal.dev.ssi-cloud.com/rest/api/delll/app.bookings::find';
//ns1:Response[1]/ns1:data[1]/ns1:app.booking[1]/ns1:e[1]/ns1:amount[1]/ns1:code[1]/ns1:displayName[1]</con:sourcePath><con:targetType>PaCurrencyDisplayName</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>PaCurrencyName</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>BookingDetails</con:sourceStep><con:sourcePath>declare namespace ns1='https://pe-internal.dev.ssi-cloud.com/rest/api/delll/app.bookings::find';
//ns1:Response[1]/ns1:data[1]/ns1:app.booking[1]/ns1:e[1]/ns1:amount[1]/ns1:code[1]/ns1:name[1]</con:sourcePath><con:targetType>PaCurrencyName</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="restrequest" name="FindActivities" id="ab72bcf8-9aa2-4395-bcb6-f4cfa01b5d95"><con:settings/><con:config service="FindActivities" resourcePath="/rest/api/dell/core.activities::getrhpactivities" methodName="Core.activities::getrhpactivities" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="FindActivities" id="ec32ed71-dac8-4f9f-8863-509201de0075" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Cookie" value="${#TestSuite#Cookie}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://${#TestSuite#serverName}.ssi-cloud.com</con:endpoint><con:request>{"params":{"sort":{"systemProperties.createdOn":-1},"start":0,"limit":50,"columns":["relatedObjects"]},"origin":{"component":"Duplo_TimelineStream","url":"#tab/core.activities"},"inversesummary":false,"type":"app.booking/sales","key":"${#TestCase#BookingID}","filter":{"crudBased":false},"configParams":{"includeNotes":true}}</con:request><con:originalUri>https://qa-internal.dev.ssi-cloud.com/rest/api/dell/core.activities::getrhpactivities</con:originalUri><con:credentials><con:username>maria.gomez@dell.com</con:username><con:password>passwordone</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="Property Transfer-requestedDate" id="f83eecea-0708-419a-87fd-9bee461c40ad"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>CreatedOnDate</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>FindActivities</con:sourceStep><con:sourcePath>declare namespace ns1='https://qa-internal.dev.ssi-cloud.com/rest/api/dell/core.activities::getrhpactivities';
//ns1:Response[1]/ns1:data[1]/ns1:core.activity[1]/ns1:e[1]/ns1:systemProperties[1]/ns1:createdOn[1]</con:sourcePath><con:targetType>CreatedOnDate</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:targetPath/><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="restrequest" name="FillingBookingDetails" id="d5324741-f6c2-4fb5-823c-44d9919d4d60" disabled="true"><con:settings/><con:config service="BookingDetails-SalesOrderId" resourcePath="/rest/api/${#TestSuite#tenant}/app.bookings/${#TestCase#BookingID}" methodName="571aa679e4b037f2558b42b4" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="FillingBookingDetails" id="97d5d5ba-dd11-4927-9cd2-928310fb1fef" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Cookie" value="${#TestSuite#Cookie}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://${#TestSuite#serverName}.ssi-cloud.com</con:endpoint><con:request>{"poAmount":{"amount":"${#TestCase#LineItemAmount}","type":"core.currency","code":{"key":"51a67a6116a8afd0f000c389","displayName":"${#TestCase#PaCurrencyDisplayName}","type":"core.lookup","name":"${#TestCase#PaCurrencyName}"},"normalizedAmount":{"amount":"${#TestCase#LineItemAmount}","code":{"key":"51a6796716a8afd0f00001c5","displayName":"USD","type":"core.lookup","name":"usd"},"convertedOn":"2015-10-20T08:32:07.206Z"}},"amount":{"amount":${#TestSuite#amount},"type":"core.currency","code":{"key":"51a67a6116a8afd0f000c389","displayName":"USD","type":"core.lookup","name":"usd"},"normalizedAmount":{"amount":${#TestSuite#amount},"code":{"key":"51a6796716a8afd0f00001c5","displayName":"USD","type":"core.lookup","name":"usd"},"convertedOn":"2015-10-20T08:32:07.206Z"}},"resellerPoAmount":{"amount":0,"type":"core.currency","code":{"key":"51a67a6116a8afd0f000c389","displayName":"USD","type":"core.lookup","name":"usd"},"normalizedAmount":{"amount":0,"code":{"key":"51a6796716a8afd0f00001c5","displayName":"USD","type":"core.lookup","name":"usd"},"convertedOn":"2015-10-20T08:32:07.206Z"}},"notes":[],"poAttachments":[],"resolutionDate":"","opportunity":{"_id":"5625fb65e4b08169c544461b","type":"app.opportunity","amount":{"amount":${#TestSuite#amount},"type":"core.currency","normalizedAmount":{"amount":${#TestSuite#amount},"code":{"key":"51a6796716a8afd0f00001c5","displayName":"USD","type":"core.lookup","name":"usd"},"convertedOn":"2015-10-20T08:30:07.391Z"},"code":{"name":"usd","displayName":"USD","type":"core.lookup"}},"targetAmount":{"amount":${#TestSuite#amount},"type":"core.currency","normalizedAmount":{"amount":${#TestSuite#amount},"code":{"key":"51a6796716a8afd0f00001c5","displayName":"USD","type":"core.lookup","name":"usd"},"convertedOn":"2015-10-20T08:30:07.391Z"},"code":{"name":"usd","displayName":"USD","type":"core.lookup"}},"resellerAmount":{"amount":${#TestSuite#amount},"type":"core.currency","normalizedAmount":{"amount":${#TestSuite#amount},"code":{"key":"51a6796716a8afd0f00001c5","displayName":"USD","type":"core.lookup","name":"usd"},"convertedOn":"2015-10-20T08:30:07.391Z"},"code":{"name":"usd","displayName":"USD","type":"core.lookup"}},"resellerTargetAmount":{"amount":${#TestSuite#amount},"type":"core.currency","normalizedAmount":{"amount":${#TestSuite#amount},"code":{"key":"51a6796716a8afd0f00001c5","displayName":"USD","type":"core.lookup","name":"usd"},"convertedOn":"2015-10-20T08:30:07.391Z"},"code":{"name":"usd","displayName":"USD","type":"core.lookup"}},"upsellAmount":{"amount":0,"type":"core.currency","normalizedAmount":{"amount":0,"code":{"key":"51a6796716a8afd0f00001c5","displayName":"USD","type":"core.lookup","name":"usd"},"convertedOn":"2015-10-20T08:30:07.391Z"},"code":{"name":"usd","displayName":"USD","type":"core.lookup"}},"offerCount":1,"isSubordinate":false,"isRevoked":false,"extensions":{"master":{"clientBatchQuarter":{"type":"string","value":"fy16q4"},"clientRegion":{"type":"lookup","value":{"displayName":"India","name":"in","type":"app.lookup","key":"51a67a6416a8afd0f000c911"}},"country":{"type":"lookup","value":{"displayName":"India","name":"IN","type":"core.lookup","key":"51a67a6216a8afd0f000c4ea"}},"inactive":{"type":"boolean","value":false},"directChannel":{"type":"lookup","value":{"displayName":"Direct","name":"direct","type":"app.lookup","key":"51a67a6316a8afd0f000c760"}},"businessLine":{"type":"lookup","value":{"displayName":"Client Products","name":"client","type":"app.lookup","key":"51a67a6416a8afd0f000c95b"}},"targetPeriod":{"type":"lookup","value":{"displayName":"${#TestSuite#targetPeriodDName}","name":"${#TestSuite#targetPeriodName}","type":"app.lookup","value":{"start":"2015-05-02T12:00:00.000Z","end":"2015-07-08T12:00:00.000Z"},"key":"54f11014e4b0e68d1c36a365"}},"clientTheatre":{"type":"lookup","value":{"displayName":"NALA","name":"nala","type":"app.lookup","key":"51a67a6316a8afd0f000c764"}},"forecastedCloseDate":{"value":"${#TestSuite#dueDate}","type":"date"},"clientTerritory":{"type":"lookup","value":{"displayName":"CONSUMER","name":"consumer","type":"app.lookup","key":"51a67a6416a8afd0f000c9cd"}}},"tenant":{"customerNumber":{"type":"string","value":"${#TestSuite#custNumber}"},"buDescription":{"value":"India Direct","type":"string"},"margin":{"type":"number","value":0}}},"tags":["${#TestSuite#Tag}"],"flows":{"salesStages":{"state":{"name":"quoteDelivered","displayName":"Quote Delivered"},"transitions":[{"fromState":"-","toState":"notContacted","changeDate":"2015-10-20T08:29:25.660Z","timeGap":0},{"fromState":"notContacted","toState":"contacted","changeDate":"2015-10-20T08:29:57.831Z","timeGap":32171},{"fromState":"contacted","toState":"quoteRequested","changeDate":"2015-10-20T08:30:00.243Z","timeGap":2412},{"fromState":"quoteRequested","toState":"quoteCompleted","changeDate":"2015-10-20T08:30:05.452Z","timeGap":5209},{"fromState":"quoteCompleted","toState":"quoteDelivered","changeDate":"2015-10-20T08:30:07.368Z","timeGap":1916}],"target":{"key":"51a67b6016a8afd0f000cd03","displayName":"salesStages","name":"Sales Stages","type":"core.flow/assignment"}}},"displayName":"${#TestSuite#OppName}","commitLevel":{"key":"51a67a6416a8afd0f000c92e","value":{"color":"blue_allports","value":0.01},"displayName":"Plan","type":"app.lookup","name":"plan"},"systemProperties":{"revisionId":10,"tenant":"dell","createdOn":"2015-10-20T08:29:25.893Z","createdBy":"bill.moor@dell.com","lastModifiedOn":"2015-10-20T08:30:07.402Z","lastModifiedBy":"bill.moor@dell.com","expiredOn":"9999-01-01T00:00:00.000Z"},"targetDate":"2015-11-30T12:00:00.000Z","customerBuid":"${#TestSuite#buId}","relationships":[{"_id":"5625fc07e4b088850010e54d","type":"core.relationship","relation":{"type":"core.lookup","key":"51a67a6116a8afd0f000c301","displayName":"Quote","name":"quote"},"target":{"key":"${#TestSuite#quoteID}","type":"app.quote","_relationships":null,"flows":{"quoteStages":{"state":{"name":"delivered","displayName":"Delivered"},"transitions":[{"fromState":"-","toState":"staged","changeDate":"2015-10-20T08:29:59.531Z","timeGap":0},{"fromState":"staged","toState":"requested","changeDate":"2015-10-20T08:30:00.174Z","timeGap":643},{"fromState":"requested","toState":"completed","changeDate":"2015-10-20T08:30:05.366Z","timeGap":5192},{"fromState":"completed","toState":"delivered","changeDate":"2015-10-20T08:30:07.301Z","timeGap":1935}],"target":{"key":"51a67b6016a8afd0f000ccfa","displayName":"quoteStages","name":"Quote Stages","type":"core.flow/assignment"}}},"displayName":"Q-${#TestSuite#OppName}-V1","externalIds":[],"isDraft":false,"isBase":false,"isInvalid":false,"relationships":{},"revisionId":7}},{"_id":"5625fc07e4b088850010e54e","type":"core.relationship","relation":{"type":"core.lookup","key":"5539c8c9e4b08e76df7b5181","displayName":"Bill To Customer","name":"billToCustomer"},"target":{"key":"${#TestSuite#customerID}","type":"core.contact/organization","displayName":"${#TestSuite#CustomerName}","externalIds":[],"extensions":"","relationships":{},"revisionId":0},"relationships":[{"_id":"5625fc07e4b088850010e54f","type":"core.relationship","relation":{"type":"core.lookup","key":"5539c8c9e4b08e76df7b5182","displayName":"Address","name":"address"},"target":{"type":"core.address","key":"${#TestSuite#addressKey}","country":{"key":"51a67a6216a8afd0f000c524","displayName":"United States","name":"US","type":"core.lookup"},"displayName":"${#TestSuite#address}","externalIds":[],"relationships":{},"revisionId":0}},{"_id":"5625fc07e4b088850010e550","type":"core.relationship","relation":{"type":"core.lookup","key":"51a67a6116a8afd0f000c2ec","displayName":"Contact","name":"contact"},"target":{"type":"core.contact/person","key":"${#TestSuite#contactKey}","displayName":"${#TestSuite#contact}","externalIds":[],"extensions":"","relationships":{},"revisionId":0}}]},{"_id":"5625fc07e4b088850010e551","type":"core.relationship","relation":{"type":"core.lookup","key":"51a67a6116a8afd0f000c338","displayName":"Latest Quote","name":"latestQuote"},"target":{"key":"${#TestSuite#quoteID}","type":"app.quote","_relationships":null,"flows":{"quoteStages":{"state":{"name":"delivered","displayName":"Delivered"},"transitions":[{"fromState":"-","toState":"staged","changeDate":"2015-10-20T08:29:59.531Z","timeGap":0},{"fromState":"staged","toState":"requested","changeDate":"2015-10-20T08:30:00.174Z","timeGap":643},{"fromState":"requested","toState":"completed","changeDate":"2015-10-20T08:30:05.366Z","timeGap":5192},{"fromState":"completed","toState":"delivered","changeDate":"2015-10-20T08:30:07.301Z","timeGap":1935}],"target":{"key":"51a67b6016a8afd0f000ccfa","displayName":"quoteStages","name":"Quote Stages","type":"core.flow/assignment"}}},"displayName":"Q-${#TestSuite#OppName}-V1","externalIds":[],"isDraft":false,"isBase":false,"isInvalid":false,"relationships":{},"revisionId":7}},{"_id":"5625fc07e4b088850010e552","type":"core.relationship","relation":{"type":"core.lookup","key":"51a67a6116a8afd0f000c2ff","displayName":"Primary Quote","name":"primaryQuote"},"target":{"type":"app.quote","key":"${#TestSuite#quoteID}","_relationships":null,"flows":{"quoteStages":{"state":{"name":"delivered","displayName":"Delivered"},"transitions":[{"fromState":"-","toState":"staged","changeDate":"2015-10-20T08:29:59.531Z","timeGap":0},{"fromState":"staged","toState":"requested","changeDate":"2015-10-20T08:30:00.174Z","timeGap":643},{"fromState":"requested","toState":"completed","changeDate":"2015-10-20T08:30:05.366Z","timeGap":5192},{"fromState":"completed","toState":"delivered","changeDate":"2015-10-20T08:30:07.301Z","timeGap":1935}],"target":{"key":"51a67b6016a8afd0f000ccfa","displayName":"quoteStages","name":"Quote Stages","type":"core.flow/assignment"}}},"displayName":"Q-${#TestSuite#OppName}-V1","externalIds":[],"isDraft":false,"isBase":false,"isInvalid":false,"relationships":{},"revisionId":7}},{"_id":"5625fc07e4b088850010e553","type":"core.relationship","relation":{"type":"core.lookup","key":"51a67a6116a8afd0f000c336","displayName":"Base Quote","name":"baseQuote"},"target":{"key":"${#TestSuite#initialOfferKey}","type":"app.quote","_relationships":null,"displayName":"Initial Offers","isDraft":false,"isBase":true,"isInvalid":false,"relationships":{},"revisionId":1}},{"_id":"5625fc07e4b088850010e554","type":"core.relationship","relation":{"type":"core.lookup","key":"5539c8c9e4b0be591c96db16","displayName":"Ship To Customer","name":"shipToCustomer"},"target":{"key":"${#TestSuite#customerID}","type":"core.contact/organization","displayName":"${#TestSuite#CustomerName}","externalIds":[],"extensions":"","relationships":{},"revisionId":0},"relationships":[{"_id":"5625fc07e4b088850010e555","type":"core.relationship","relation":{"type":"core.lookup","key":"5539c8c9e4b08e76df7b5182","displayName":"Address","name":"address"},"target":{"type":"core.address","key":"${#TestSuite#addressKey}","country":{"key":"51a67a6216a8afd0f000c524","displayName":"United States","name":"US","type":"core.lookup"},"displayName":"${#TestSuite#address}","externalIds":[],"relationships":{},"revisionId":0}},{"_id":"5625fc07e4b088850010e556","type":"core.relationship","relation":{"type":"core.lookup","key":"51a67a6116a8afd0f000c2ec","displayName":"Contact","name":"contact"},"target":{"type":"core.contact/person","key":"${#TestSuite#contactKey}","displayName":"${#TestSuite#contact}","externalIds":[],"extensions":"","relationships":{},"revisionId":0}}]},{"_id":"5625fc07e4b088850010e557","type":"core.relationship","relation":{"type":"core.lookup","key":"51a67a6116a8afd0f000c2ef","displayName":"Customer","name":"customer"},"target":{"key":"${#TestSuite#customerID}","type":"core.contact/organization","displayName":"${#TestSuite#CustomerName}","externalIds":[],"extensions":"","relationships":{},"revisionId":0},"relationships":[{"_id":"5625fc07e4b088850010e558","type":"core.relationship","relation":{"type":"core.lookup","key":"5539c8c9e4b08e76df7b5182","displayName":"Address","name":"address"},"target":{"type":"core.address","key":"${#TestSuite#addressKey}","country":{"key":"51a67a6216a8afd0f000c524","displayName":"United States","name":"US","type":"core.lookup"},"displayName":"${#TestSuite#address}","externalIds":[],"relationships":{},"revisionId":0}},{"_id":"5625fc07e4b088850010e559","type":"core.relationship","relation":{"type":"core.lookup","key":"51a67a6116a8afd0f000c2fe","displayName":"Primary Contact","name":"primaryContact"},"target":{"type":"core.contact/person","key":"${#TestSuite#contactKey}","displayName":"${#TestSuite#contact}","externalIds":[],"extensions":"","relationships":{},"revisionId":0}},{"_id":"5625fc07e4b088850010e55a","type":"core.relationship","relation":{"type":"core.lookup","key":"51a67a6116a8afd0f000c2ec","displayName":"Contact","name":"contact"},"target":{"type":"core.contact/person","key":"${#TestSuite#contactKey}","displayName":"${#TestSuite#contact}","externalIds":[],"extensions":"","relationships":{},"revisionId":0}}]}]},"type":"app.request.booking.input","priority":{"name":"medium"},"tags":[""],"relationships":[{"type":"core.relationship","relation":{"displayName":"Requested By","name":"requestedBy","type":"core.relationship"},"target":{"displayName":"Bill Moor","type":"core.contact/person","key":"50ac0251911b1a00000001dd"}},{"type":"core.relationship","relation":{"displayName":"quote","name":"quote","type":"core.relationship"},"target":{"displayName":"Q-${#TestSuite#OppName}-V1","type":"app.quote","key":"${#TestSuite#quoteID}"}},{"relationships":[{"_id":"5625fc07e4b088850010e558","type":"core.relationship","relation":{"displayName":"Address","name":"address","type":"core.lookup","key":"5539c8c9e4b08e76df7b5182"},"target":{"revisionId":0,"country":{"displayName":"United States","name":"US","type":"core.lookup","key":"51a67a6216a8afd0f000c524"},"relationships":{},"displayName":"${#TestSuite#address}","externalIds":[],"type":"core.address","key":"${#TestSuite#addressKey}"}},{"_id":"5625fc07e4b088850010e559","type":"core.relationship","relation":{"displayName":"Primary Contact","name":"primaryContact","type":"core.lookup","key":"51a67a6116a8afd0f000c2fe"},"target":{"revisionId":0,"relationships":{},"extensions":"","displayName":"${#TestSuite#contact}","externalIds":[],"type":"core.contact/person","key":"${#TestSuite#contactKey}"}},{"_id":"5625fc07e4b088850010e55a","type":"core.relationship","relation":{"displayName":"Contact","name":"contact","type":"core.lookup","key":"51a67a6116a8afd0f000c2ec"},"target":{"revisionId":0,"relationships":{},"extensions":{"tenant":{"contactId":{"type":"string","value":"24339976"},"customerId":{"type":"string","value":"AUTP15O10001"}}},"displayName":"${#TestSuite#contact}","externalIds":[],"type":"core.contact/person","key":"${#TestSuite#contactKey}"}}],"_id":"5625fc07e4b088850010e557","type":"core.relationship","relation":{"displayName":"Customer","name":"customer","type":"core.lookup","key":"51a67a6116a8afd0f000c2ef"},"target":{"revisionId":0,"relationships":{},"extensions":"","displayName":"${#TestSuite#CustomerName}","externalIds":[],"type":"core.contact/organization","key":"${#TestSuite#customerID}"}},{"relation":{"name":"opportunity","type":"core.relationship","displayName":"Opportunity"},"target":{"type":"app.quote","key":"${#TestSuite#OppID}","displayName":"${#TestSuite#OppName}"},"type":"core.relationship"}],"resellerPoAttachments":[],"bookingDocuments":[],"resellerAmount":{"amount":${#TestSuite#amount},"type":"core.currency","normalizedAmount":{"amount":${#TestSuite#amount},"code":{"key":"51a6796716a8afd0f00001c5","displayName":"USD","type":"core.lookup","name":"usd"},"convertedOn":"2015-10-20T08:32:07.206Z"},"code":{"displayName":"USD","name":"usd","type":"core.lookup","key":"51a67a6116a8afd0f000c389"}},"requestedTimeZone":{"name":"IST"},"dueDate":"${#TestSuite#futuredate}","requestedCurrency":{"key":"51a67a6116a8afd0f000c389","displayName":"USD","type":"core.lookup","name":"usd"},"salesStage":"Quote Delivered","poNumber":"PID123","poDate":"${#TestSuite#currentDate}","winResultReason":{"displayName":"CS - Backdated - BKD","name":"csBKD","type":"app.lookup","key":"51a67a6316a8afd0f000c715"},"lossResultReason":{},"origin":{"url":"#tab/app.quotes/vq=ID%3A%20%225625fb86e4b021752335a542%22"}}</con:request><con:originalUri>https://pe-internal.dev.ssi-cloud.com/rest/api/dell/app.bookings/5732dc4ce4b0c7db13b1c1f1</con:originalUri><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script-Booking Complusory Fields" id="1cad318f-6582-4a05-b57e-06db5ca349d4"><con:settings/><con:config><script>import org.openqa.selenium.By
import org.openqa.selenium.*
import org.openqa.selenium.WebDriver
import org.openqa.selenium.WebElement
import org.openqa.selenium.chrome.ChromeDriver
import org.openqa.selenium.firefox.FirefoxDriver;
import org.openqa.selenium.support.ui.ExpectedCondition
import org.openqa.selenium.support.ui.WebDriverWait
import org.openqa.selenium.OutputType
import org.apache.commons.io.FileUtils
import org.openqa.selenium.interactions.Actions;
import org.openqa.selenium.Keys
import org.openqa.selenium.firefox.FirefoxProfile;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.openqa.selenium.support.ui.Select;
import org.openqa.selenium.WebDriverException;
import java.lang.Numberjava.lang.*
import groovy.json.*
import java.awt.AWTException;
import java.awt.Robot;
import java.awt.Toolkit;
import java.awt.event.KeyEvent;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.text.DateFormat;
import java.util.Date;
import java.util.TimeZone;
import java.util.*
import org.joda.time.DateTime;
import groovy.transform.Field


def tenant = context.expand( '${#TestSuite#tenant}' )
def loginID = context.expand( '${#TestSuite#loginID}' )
//def salesRepEmail = context.expand( '${#Project#salesRepEmail}' )
def password = context.expand( '${#TestSuite#password}' )
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def projectDir = groovyUtils.projectPath
def resultDir = new File(projectDir);
def serverName = context.expand( '${#TestSuite#serverName}' )
def version = context.expand( '${#Project#version}' )
def bookingID = context.expand( '${#TestCase#BookingID}' )
def id="id"
url="https://"+serverName+".ssi-cloud.com"


//Setting firefox profile to download file
FirefoxProfile  fp = new FirefoxProfile();
fp.setPreference("browser.download.folderList",2);
fp.setPreference("browser.download.manager.showWhenStarting",false);
fp.setPreference("browser.download.dir", projectDir);
fp.setPreference("browser.helperApps.neverAsk.openFile", "application/octet-stream");
fp.setPreference("browser.helperApps.neverAsk.saveToDisk", "application/octet-stream");

WebDriver driver = new FirefoxDriver(fp)
/*
//Initiate Chrome WebDriver
System.setProperty("webdriver.chrome.driver", "C:/Users/ankits.rajput/Downloads/chromedriver.exe");
log.info(System.getProperty("webdriver.chrome.driver"));
	
 WebDriver driver=new ChromeDriver()
*/

 //BY Using this we can use driver object in other methods 
 def projectContext = context.testCase.testSuite.project.context
 projectContext.driver = driver
 driver.manage().deleteAllCookies();


try
{
           // Url to be opened	
           driver.get(url) 

           // Apllying wait
           WebDriverWait wait = new WebDriverWait(driver, 100); 

           //Username 
           wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath("//input[@id='userid']")));   
           driver.findElement(By.xpath("//input[@id='userid']")).sendKeys(loginID);

		//password
		driver.findElement(By.xpath("//input[@id='password']")).sendKeys(password);

		//version
		WebElement mySelectElm = driver.findElement(By.id("platformVersion")); 
		Select mySelect = new Select(mySelectElm);
		mySelect.selectByVisibleText(version);
		
		//submit button
		driver.findElement(By.xpath("//input[@id='xsubmit']")).click();
		
		//maximize windows
		driver.manage().window().maximize();
		Thread.sleep(5000); 

         //Clicking on Bookings Tab
          wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath("//div[4]/div[14]/div/div/div")));   
		WebElement table = driver.findElement(By.xpath("//div[4]/div[14]/div/div/div"));
		List&lt;WebElement> rows1 = table.findElements(By.xpath("//li[@class='av_tab']"));
		java.util.Iterator&lt;WebElement> i = rows1.iterator();

		while(i.hasNext()) {
  		WebElement row = i.next();
  		       
              if ( row.getText()=="BOOKINGS"){
              row.click();
              break;}
           
		}
         search_by(id,bookingID)
         
           driver.findElement(By.xpath(".//*[@id='1']/td[2]/span")).click();


      

		Thread.sleep(8000); 

 // Line Item Amount
 		Boolean isPresent = driver.findElements(By.xpath("//tbody/tr/td[@class='sectionFormLayoutCol']/div/div/div/div/div/ul/li[19]/div/div[@data-widget-path='amount']")).size() > 0
		@Field amt=0
		@Field amt1=0
		
		if (isPresent==true){
		wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath("//tbody/tr/td[@class='sectionFormLayoutCol']/div/div/div/div/div/ul/li[19]/div/div[@data-widget-path='amount']")));   
       	amt= driver.findElement(By.xpath("//tbody/tr/td[@class='sectionFormLayoutCol']/div/div/div/div/div/ul/li[19]/div/div[@data-widget-path='amount']")).getText();
       	log.info ("amt: " + amt);
		log.info ("size" +amt.size());
		amt1 = amt.substring(0, amt.length() - 3);
          log.info ("amt1:" +amt1);
       	}
       	else{
       	wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath("//tbody/tr/td[@class='sectionFormLayoutCol']/div/div/div/div/div/ul/li[19]/div/div[@data-widget-path='amount_amount']")));   
       	amt= driver.findElement(By.xpath("//tbody/tr/td[@class='sectionFormLayoutCol']/div/div/div/div/div/ul/li[19]/div/div[@data-widget-path='amount_amount']")).getText();
       	
		log.info ("amt: " + amt);
		log.info ("size" +amt.size());
		amt1 = amt.substring(0, amt.length() - 3);
          log.info ("amt1:" +amt1);}
// PoAmount
		wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath("//tbody/tr/td[@class='sectionFormLayoutCol']/div/div/div/div/div/ul/li[6]/div/input[@class='widget_currency-amount']")));   
		driver.findElement(By.xpath("//tbody/tr/td[@class='sectionFormLayoutCol']/div/div/div/div/div/ul/li[6]/div/input[@class='widget_currency-amount']")).clear()
       	driver.findElement(By.xpath("//tbody/tr/td[@class='sectionFormLayoutCol']/div/div/div/div/div/ul/li[6]/div/input[@class='widget_currency-amount']")).sendKeys(amt1);
		Thread.sleep(2000); 


// PoAmount Currency
          String last3;
          	if (amt == null || amt.length() &lt; 3) {
  			  last3 = amt;
  			  log.info ("last: " + last3);
			} else {
 			   last3 = amt.substring(amt.length() - 3);
 			   log.info ("last3: " + last3);
			}

		Thread.sleep(1000); 
          Select dropdown = new Select(driver.findElement(By.xpath("//tbody/tr/td[@class='sectionFormLayoutCol']/div/div/div/div/div/ul/li[6]/div/select[@class='widget_currency-code required']")));
          dropdown.selectByVisibleText(last3);





//PoNumber
 Random random1 = new Random();
      
String randomInteger1 = random1.nextInt(50000).toString();
     // int randomInteger = random.nextInt();
      log.info("SoNumber: " + randomInteger1);
 


		wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath("//tbody/tr/td[1]/div/div/div/div[1]/div/ul/li[4]/input")));   
       	driver.findElement(By.xpath("//tbody/tr/td[1]/div/div/div/div[1]/div/ul/li[4]/input")).sendKeys(randomInteger1);
		Thread.sleep(2000); 

 //PoDate

 DateFormat dateFormat23 = new SimpleDateFormat("dd"); 
            Date date23 = new Date();

            String today1 = dateFormat23.format(date23); 

  driver.findElement(By.xpath("//tbody/tr/td[@class='sectionFormLayoutCol']/div/div/div/div/div/ul/li[9]/div/div[@class='trigger_by_button']")).click();
  
  WebElement dateWidget1 = driver.findElement(By.xpath(".//*[@id='ui-datepicker-div']/table/tbody"));
  List rows11=dateWidget.findElements(By.tagName("tr"));
  List columns11=dateWidget.findElements(By.tagName("td"));
  
  for (WebElement cell: columns1){
  
   if (cell.getText().equals(today1)){
   cell.click();
   break;
   }}






//SoAmount
		wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath("//tbody/tr/td[@class='sectionFormLayoutCol']/div/div/div/div/div/ul/li[12]/div/input[@class='widget_currency-amount']")));
		driver.findElement(By.xpath("//tbody/tr/td[@class='sectionFormLayoutCol']/div/div/div/div/div/ul/li[12]/div/input[@class='widget_currency-amount']")).clear();   
       	driver.findElement(By.xpath("//tbody/tr/td[@class='sectionFormLayoutCol']/div/div/div/div/div/ul/li[12]/div/input[@class='widget_currency-amount']")).sendKeys(amt1);
		Thread.sleep(2000); 


// SoAmount Currency
          
		Thread.sleep(1000); 
          Select dropdown1 = new Select(driver.findElement(By.xpath("//tbody/tr/td[@class='sectionFormLayoutCol']/div/div/div/div/div/ul/li[12]/div/select[@class='widget_currency-code']")));
          dropdown1.selectByVisibleText(last3);

 //SoDate

 DateFormat dateFormat2 = new SimpleDateFormat("dd"); 
            Date date2 = new Date();

            String today = dateFormat2.format(date2); 

  driver.findElement(By.xpath("//tbody/tr/td[@class='sectionFormLayoutCol']/div/div/div/div/div/ul/li[14]/div/div[@class='trigger_by_button']")).click();
  
  WebElement dateWidget = driver.findElement(By.xpath(".//*[@id='ui-datepicker-div']/table/tbody"));
  List rows=dateWidget.findElements(By.tagName("tr"));
  List columns=dateWidget.findElements(By.tagName("td"));
  
  for (WebElement cell: columns){
  
   if (cell.getText().equals(today)){
   cell.click();
   break;
   }}


//SoNumber
 Random random = new Random();
      
String randomInteger = random.nextInt(40000).toString();
     // int randomInteger = random.nextInt();
      log.info("SoNumber: " + randomInteger);
 


		wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath("//tbody/tr/td[1]/div/div/div/div[1]/div/ul/li[11]/input")));   
       	driver.findElement(By.xpath("//tbody/tr/td[1]/div/div/div/div[1]/div/ul/li[11]/input")).sendKeys(randomInteger);
		Thread.sleep(2000); 



//savebtn
           driver.findElement(By.xpath("//button[@id='saveBtn']")).click();

          




		Thread.sleep(5000); 
          driver.quit();
          
}

catch(Exception e)
{
log.info "Exception encountered : " + e.message
}


def WebElement clear_search() {
	  def projectContext = context.testCase.testSuite.project.context
  	  def driver = projectContext.driver
  	  WebDriverWait wait = new WebDriverWait(driver, 200); 
       wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath("//div[@class='VS-icon VS-icon-cancel VS-cancel-search-box']"))); 
	  ele=driver.findElement(By.xpath("//div[@class='VS-icon VS-icon-cancel VS-cancel-search-box']"));
	return ele;
	}




def rClick() {

	 try {
	     robot = new Robot();
	     robot.keyPress(KeyEvent.VK_ENTER);
	     robot.keyRelease(KeyEvent.VK_ENTER);
	 }  catch (Exception e) {
	     e.printStackTrace();
	     throw new WebDriverException("Unable to perform Click Operation");
	 }
	 robot = null;
	}



def search_by(String val1, String val2) throws InterruptedException {
	def projectContext = context.testCase.testSuite.project.context
  	def driver = projectContext.driver
	clear_search().click();
	Thread.sleep(1000);
	WebDriverWait wait = new WebDriverWait(driver, 200); 
     wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath("//input[@class='ui-autocomplete-input']")));
	driver.findElement(By.xpath("//input[@class='ui-autocomplete-input']")).sendKeys(val1);
	Thread.sleep(1000);
	rClick();
	wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath("//input[contains(@class,'search_facet_input VS-interface ui-autocomplete-input')]")));
	driver.findElement(By.xpath("//input[contains(@class,'search_facet_input VS-interface ui-autocomplete-input')]")).sendKeys(val2);
	Thread.sleep(1000);
	rClick();
	Thread.sleep(3000);
}






def search_with_two_criteria(String val1, String val2,String val3, String val4) throws InterruptedException {
	clear_search().click();
	driver.findElement(By.xpath("//input[@class='ui-autocomplete-input']")).sendKeys(val1);
	driver.findElement(By.xpath("//input[contains(@class,'input VS-interface ui-autocomplete-input')]")).sendKeys(val2);
	Thread.sleep(1000);
	rClick();
	driver.findElement(By.xpath("//div[@class='VS-search-inner']/div[3]/input")).sendKeys(val3);
	driver.findElement(By.xpath("//div[@class='VS-search-inner']/div[4]/div[2]/input")).sendKeys(val4);
	Thread.sleep(1000);
	rClick();
	Thread.sleep(3000);
}


def selectDropDownValue(String ValueToSelect) 
{
    def projectContext = context.testCase.testSuite.project.context
    def driver = projectContext.driver
    webelement findDropDownValue=driver.findElements(By.xpath("//tbody/tr/td[@class='sectionFormLayoutCol']/div/div/div/div/div/ul/li[6]/div/select[@class='widget_currency-code required']"))    //this will find that dropdown 

    wait.until(ExpectedConditions.visibilityOf(findDropDownValue));    // wait till that dropdown appear

    super.highlightElement(findDropDownValue);   // highlight that dropdown     

    new Select(findDropDownValue).selectByValue(ValueToSelect);    //select that option which u had passed as argument
}</script></con:config></con:testStep><con:testStep type="delay" name="Delay" id="973c04db-15fc-4b8c-a5c2-de882484f7b7"><con:settings/><con:config><delay>5000</delay></con:config></con:testStep><con:testStep type="restrequest" name="CompleteBooking" id="839f97e6-dc3c-4439-9ab6-dca896301400"><con:settings/><con:config service="CompleteBooking" resourcePath="/rest/api/${#TestSuite#tenant}/app.bookings/${#TestCase#BookingID}::complete" methodName="57308996e4b08fde9a0bdeda::complete" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CompleteBooking" id="dc8aab17-68c1-4cc3-9936-78d3dad0764f" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Cookie" value="${#TestSuite#Cookie}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://${#TestSuite#serverName}.ssi-cloud.com</con:endpoint><con:request>{"detail":{"_id":"${#TestCase#BookingID}","type":"app.booking/sales","displayName":"${#TestCase#BookingDisplayName}"},"selections":[],"inversesummary":true,"extinversesummary":true,"origin":{"url":"#detail/app.bookings/${#TestCase#BookingID}"}}</con:request><con:originalUri>https://pe-internal.dev.ssi-cloud.com/rest/api/dell/app.bookings/57303300e4b0c7db13a73b0a::complete</con:originalUri><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters>
  <con:entry key="inversesummary" value="true"/>
  <con:entry key="extinversesummary" value="true"/>
</con:parameters><con:parameterOrder><con:entry>inversesummary</con:entry><con:entry>extinversesummary</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="Property Transfer-CompletedDate" id="8840a31c-661b-4d80-8f5f-9424e732522d"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>CompletedDate</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>CompleteBooking</con:sourceStep><con:sourcePath>declare namespace ns1='https://pe-internal.dev.ssi-cloud.com/rest/api/dell/app.bookings/57303300e4b0c7db13a73b0a::complete';
//ns1:Response[1]/ns1:data[1]/ns1:app.bookingSales[1]/ns1:e[1]/ns1:amount[1]/ns1:normalizedAmount[1]/ns1:convertedOn[1]</con:sourcePath><con:targetType>CompletedDate</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:targetPath/><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TatTotal</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>CompleteBooking</con:sourceStep><con:sourcePath>declare namespace ns1='https://pe-internal.dev.ssi-cloud.com/rest/api/dell/app.bookings/57303300e4b0c7db13a73b0a::complete';
//ns1:Response[1]/ns1:data[1]/ns1:app.bookingSales[1]/ns1:e[1]/ns1:extensions[1]/ns1:master[1]/ns1:tatTotal[1]/ns1:value[1]</con:sourcePath><con:targetType>TatTotal</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TatNet</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>CompleteBooking</con:sourceStep><con:sourcePath>declare namespace ns1='https://pe-internal.dev.ssi-cloud.com/rest/api/dell/app.bookings/57303300e4b0c7db13a73b0a::complete';
//ns1:Response[1]/ns1:data[1]/ns1:app.bookingSales[1]/ns1:e[1]/ns1:extensions[1]/ns1:master[1]/ns1:tatNet[1]/ns1:value[1]</con:sourcePath><con:targetType>TatNet</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script-TatCalculations" id="e7cfd0ba-45b9-4831-80c3-57af37318893"><con:settings/><con:config><script><![CDATA[import java.text.SimpleDateFormat;
import java.util.Date;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.text.DateFormat;
import java.util.TimeZone;
import java.util.concurrent.TimeUnit;
import java.lang.Long

def createdOnDate = context.expand( '${#TestCase#CreatedOnDate}' )
def completedDate = context.expand( '${#TestCase#CompletedDate}' )

String string = createdOnDate;
String string1 = completedDate;


SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ");
SimpleDateFormat output = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS");

//requested Date
Date date = sdf.parse(createdOnDate.replaceAll("Z", "+0000"));
String nTime = output.format(date);

myDate = Date.parse("yyyy-MM-dd'T'HH:mm:ss.SSS", nTime) ;
//log.info("string: " + string);
log.info("date: " + nTime);

//change Date
Date date1 = sdf.parse(completedDate.replaceAll("Z", "+0000"));
log.info("date1: " + date1);

String nTime1 = output.format(date1);
myDate1 = Date.parse("yyyy-MM-dd'T'HH:mm:ss.SSS", nTime1) ;
log.info("myDate1: " + myDate1);
log.info("date: " + nTime1);

getTimeDiff(date, date1)

use(groovy.time.TimeCategory) {
    def duration = date1 - date
    log.info ("Timediff::" + duration)
    log.info "Days: ${duration.days}, Hours: ${duration.hours},Minutes: ${duration.minutes},Seconds: ${duration.seconds}"
    testRunner.testCase.setPropertyValue( "Timediff", duration.toString());
     def minutes=0
     def seconds=0

   StringBuilder sb = new StringBuilder(64);
        sb.append(duration.days);
        sb.append(" Days ");
        sb.append(duration.hours);
        sb.append(" Hours ");
      

        if (duration.minutes==0 && duration.seconds>0){
           minutes=duration.minutes+1
        	 sb.append(duration.minutes);
        	 sb.append(" Minutes ");
        	 seconds=0
        	 sb.append(seconds);
           sb.append(" Seconds");
        }
       else if (duration.minutes>0 && duration.seconds>0 && duration.seconds<=30){
	      sb.append(duration.minutes);
        	 sb.append(" Minutes ");
        	 seconds=0
        	 sb.append(seconds);;
           sb.append(" Seconds");
        }
        else if (duration.minutes>0 && duration.seconds>30){
        	minutes=duration.minutes+1
        	 sb.append(minutes);
        	 sb.append(" Minutes ");
        	seconds=0
        	 sb.append(seconds);
           sb.append(" Seconds");
        	}
              
log.info("sbTime::" + sb.toString())
 testRunner.testCase.setPropertyValue( "TimediffAfterCal", sb.toString());

    
}





/*
DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS");
//get current date time with Date()
Date date2 = new Date();
log.info(dateFormat.format(date2));
//log.info firstDayOfWeekTimestamp
// Get calendar set to current date and time
Calendar c = Calendar.getInstance();
 	    c.set(Calendar.HOUR_OF_DAY, 0);
         c.set(Calendar.MINUTE, 0);
         c.set(Calendar.SECOND, 0);
         c.set(Calendar.MILLISECOND, 0);
         
         log.info c.getTime();

    
t2=(dateFormat.format(c.getTime()))
t3=(dateFormat.parse(t2))
Timeinhours=(t3 - myDate1);
log.info ("Time: " + Timeinhours)




//DateDifferentExample(nTime,nTime1)





Long DateDifferentExample(String dateStart,String dateStop) {

		//HH converts hour in 24 hours format (0-23), day calculation
		SimpleDateFormat format = new SimpleDateFormat("MM/dd/yyyy HH:mm:ss.SSS");

		Date d1 = null;
		Date d2 = null;

	
			d1 = format.parse(dateStart);
			d2 = format.parse(dateStop);

			//in milliseconds
			long diff = d2.getTime() - d1.getTime();

			 long days = TimeUnit.MILLISECONDS.toDays(diff);
        diff -= TimeUnit.DAYS.toMillis(days);
        long hours = TimeUnit.MILLISECONDS.toHours(diff);
        diff -= TimeUnit.HOURS.toMillis(hours);
        long minutes = TimeUnit.MILLISECONDS.toMinutes(diff);
        diff -= TimeUnit.MINUTES.toMillis(minutes);
        long seconds = TimeUnit.MILLISECONDS.toSeconds(diff);

        StringBuilder sb = new StringBuilder(64);
   
        sb.append(hours);
        sb.append(" Hours ");
        sb.append(minutes);
        sb.append(" Minutes "); 
        sb.append(seconds);
        sb.append(" Seconds");
        
        log.info("sbT::"+ sb.toString())
        testRunner.testCase.setPropertyValue( "tatNetmillies", sb.toString());

			log.info(diffDays + " days, ");
			log.info(diffHours + " hours, ");
			log.info(diffMinutes + " minutes, ");
			log.info(diffSeconds + " seconds.");

		
	}
*/
def getTimeDiff(Date dateOne, Date dateTwo) {
            String diff = "";
            long timeDiff = Math.abs(dateOne.getTime() - dateTwo.getTime());
            log.info ("TimeDiff : " + timeDiff);
            testRunner.testCase.setPropertyValue( "TimeDiffMilliesFromDate", timeDiff.toString())
              return timeDiff;
    }]]></script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script-TAT Calculations" id="2e9d12b8-4df5-426f-952b-04789af1d969"><con:settings/><con:config><script><![CDATA[import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.TimeZone;
import java.util.concurrent.TimeUnit;
def quoteID = context.expand( '${#TestCase#QuoteID}' )
def timeZone = context.expand( '${#TestCase#TimeZone}' )
def requestedTime = context.expand( '${#TestCase#requestedTime}' )
def changeDate = context.expand( '${#TestCase#ChangeDate}' )


def turnaroundTime = context.expand( '${#TestCase#TurnaroundTime}' )
def tatNet = context.expand( '${#TestCase#TatNet}' )
def tatTotal = context.expand( '${#TestCase#TatTotal}' )
def long minutes1 = tatTotal.toLong()
def long tatTotalmillies = minutes1 * 60 * 1000;
def long tatNetmillies = minutes1 * 60 * 1000;

//getWorkingDaysBetweenTwoDates( requestedTime,endDate)

//getDurationBreakdown(millies)

getDurationBreakdownMinutes(tatTotalmillies)
getDurationBreakdownMinutes1(tatNetmillies)


/*def String getDurationBreakdown(long millies)
    {
        if(millies < 0)
        {
            throw new IllegalArgumentException("Duration must be greater than zero!");
        }

        long days = TimeUnit.MILLISECONDS.toDays(millies);
        millies -= TimeUnit.DAYS.toMillis(days);
        long hours = TimeUnit.MILLISECONDS.toHours(millies);
        millies -= TimeUnit.HOURS.toMillis(hours);
        long minutes = TimeUnit.MILLISECONDS.toMinutes(millies);
        millies -= TimeUnit.MINUTES.toMillis(minutes);
        long seconds = TimeUnit.MILLISECONDS.toSeconds(millies);

        StringBuilder sb = new StringBuilder(64);
        sb.append(days);
        sb.append(" Days ");
        sb.append(hours);
        sb.append(" Hours ");
      

        if (minutes==0 && seconds>0){
        	 minutes=minutes+1
        	 sb.append(minutes);
        	 sb.append(" Minutes ");
        	 seconds=0
        	 sb.append(seconds);
           sb.append(" Seconds");
        }
       else if (minutes>0 && seconds>0 && seconds<=30){
	      sb.append(minutes);
        	 sb.append(" Minutes ");
        	 seconds=0
        	 sb.append(seconds);
           sb.append(" Seconds");
        }
        else if (minutes>0 && seconds>30){
        	minutes=minutes+1
        	 sb.append(minutes);
        	 sb.append(" Minutes ");
        	 seconds=0
        	 sb.append(seconds);
           sb.append(" Seconds");
        	}
              
log.info(sb.toString())
       testRunner.testCase.setPropertyValue( "TatfromRestTimegap", sb.toString());
    }*/

def String getDurationBreakdownMinutes(long tatTotalmillies)
    {
        if(tatTotalmillies < 0)
        {
            throw new IllegalArgumentException("Duration must be greater than zero!");
        }

        long days = TimeUnit.MILLISECONDS.toDays(tatTotalmillies);
        tatTotalmillies -= TimeUnit.DAYS.toMillis(days);
        long hours = TimeUnit.MILLISECONDS.toHours(tatTotalmillies);
        tatTotalmillies -= TimeUnit.HOURS.toMillis(hours);
        long minutes = TimeUnit.MILLISECONDS.toMinutes(tatTotalmillies);
        tatTotalmillies -= TimeUnit.MINUTES.toMillis(minutes);
        long seconds = TimeUnit.MILLISECONDS.toSeconds(tatTotalmillies);

        StringBuilder sb = new StringBuilder(64);
        sb.append(days);
        sb.append(" Days ");
        sb.append(hours);
        sb.append(" Hours ");
        sb.append(minutes);
        sb.append(" Minutes "); 
        sb.append(seconds);
        sb.append(" Seconds");
        
        log.info(sb.toString())
        testRunner.testCase.setPropertyValue( "TatfromTatTotal", sb.toString());
    }

def String getDurationBreakdownMinutes1(long tatNetmillies)
    {
        if(tatNetmillies < 0)
        {
            throw new IllegalArgumentException("Duration must be greater than zero!");
        }

        long days = TimeUnit.MILLISECONDS.toDays(tatNetmillies);
        tatNetmillies -= TimeUnit.DAYS.toMillis(days);
        long hours = TimeUnit.MILLISECONDS.toHours(tatNetmillies);
        tatNetmillies -= TimeUnit.HOURS.toMillis(hours);
        long minutes = TimeUnit.MILLISECONDS.toMinutes(tatNetmillies);
        tatNetmillies -= TimeUnit.MINUTES.toMillis(minutes);
        long seconds = TimeUnit.MILLISECONDS.toSeconds(tatNetmillies);

        StringBuilder sb = new StringBuilder(64);
        sb.append(days);
        sb.append(" Days ");
        sb.append(hours);
        sb.append(" Hours ");
        sb.append(minutes);
        sb.append(" Minutes "); 
        sb.append(seconds);
        sb.append(" Seconds");
        
        log.info(sb.toString())
        testRunner.testCase.setPropertyValue( "tatNetmillies", sb.toString());
    }




    ]]></script></con:config></con:testStep><con:testStep type="groovy" name="Assertion For TatTotal and TatNet" id="ff89428e-0ad8-4f39-83b5-c91109555029"><con:settings/><con:config><script>def tatfromTatTotal = context.expand( '${#TestCase#TatfromTatTotal}' )
def tatfromRestTimegap = context.expand( '${#TestCase#TatfromRestTimegap}' )
def tatNetmillies = context.expand( '${#TestCase#tatNetmillies}' )
def timediffAfterCal = context.expand( '${#TestCase#TimediffAfterCal}' )




assert tatfromTatTotal==timediffAfterCal
assert tatNetmillies==timediffAfterCal</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script 5" id="ea0f7f25-0542-4ad6-8eaa-96439347de7f" disabled="true"><con:settings/><con:config><script>import java.text.SimpleDateFormat;
import java.util.Date;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.text.DateFormat;
import java.util.TimeZone;
import java.util.concurrent.TimeUnit;
import java.lang.Long
def createdOnDate = context.expand( '${#TestCase#CreatedOnDate}' )
def completedDate = context.expand( '${#TestCase#CompletedDate}' )

//log.info createdOnDate
//log.info completedDate

//String string = createdOnDate;
//String string1 = completedDate;

SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ");
SimpleDateFormat output = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS");

//createdOnDate
Date date = sdf.parse(createdOnDate.replaceAll("Z", "+0000"));
String nTime = output.format(date);
myDate = Date.parse("yyyy-MM-dd'T'HH:mm:ss.SSS", nTime) ;
//log.info("string: " + string);
log.info("date: " + nTime);

//completedDate
Date date1 = sdf.parse(completedDate.replaceAll("Z", "+0000"));
log.info("date1: " + date1);

String nTime1 = output.format(date1);
myDate1 = Date.parse("yyyy-MM-dd'T'HH:mm:ss.SSS", nTime1) ;
log.info("myDate1: " + myDate1);
log.info("date: " + nTime1);

DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS");
//get current date time with Date()
Date date2 = new Date();
log.info(dateFormat.format(date2));
//log.info firstDayOfWeekTimestamp
// Get calendar set to current date and time
Calendar c = Calendar.getInstance();
 	    c.set(Calendar.HOUR_OF_DAY, 0);
         c.set(Calendar.MINUTE, 0);
         c.set(Calendar.SECOND, 0);
         c.set(Calendar.MILLISECOND, 0);
         
         log.info c.getTime();


    
t2=(dateFormat.format(c.getTime()))
t3=(dateFormat.parse(t2))
Timeinhours=(myDate1 - t3);
log.info ("Time: " + Timeinhours);


DateDifferentExample(nTime1,t2)





Long DateDifferentExample(String dateStart,String dateStop) {

		//HH converts hour in 24 hours format (0-23), day calculation
		SimpleDateFormat format = new SimpleDateFormat("MM/dd/yyyy HH:mm:ss");

		Date d1 = null;
		Date d2 = null;

		try {
			d1 = format.parse(dateStart);
			d2 = format.parse(dateStop);

			//in milliseconds
			long diff = d2.getTime() - d1.getTime();

			long diffSeconds = diff / 1000 % 60;
			long diffMinutes = diff / (60 * 1000) % 60;
			long diffHours = diff / (60 * 60 * 1000) % 24;
			long diffDays = diff / (24 * 60 * 60 * 1000);

			log.info(diffDays + " days, ");
			log.info(diffHours + " hours, ");
			log.info(diffMinutes + " minutes, ");
			log.info(diffSeconds + " seconds.");

		} catch (Exception e) {
			e.printStackTrace();
		}

	}

</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script" id="95916dde-bbb2-4fed-b392-7ca9538d86e8" disabled="true"><con:settings/><con:config><script>import java.text.SimpleDateFormat;
import java.util.Date;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.text.DateFormat;
import java.util.TimeZone;
import java.util.concurrent.TimeUnit;
import java.lang.Long

def createdOnDate = context.expand( '${#TestCase#CreatedOnDate}' )
def completedDate = context.expand( '${#TestCase#CompletedDate}' )


SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ");
SimpleDateFormat output = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS");

//createdOnDate
Date date = sdf.parse(createdOnDate.replaceAll("Z", "+0000"));

//completedDate
Date date1 = sdf.parse(completedDate.replaceAll("Z", "+0000"));


days(date,date1)


 Long days(Date start, Date end){
    //Ignore argument check

    Calendar c1 = Calendar.getInstance();
    c1.setTime(start);
    int w1 = c1.get(Calendar.DAY_OF_WEEK);
    c1.add(Calendar.DAY_OF_WEEK, -w1);

    Calendar c2 = Calendar.getInstance();
    c2.setTime(end);
    int w2 = c2.get(Calendar.DAY_OF_WEEK);
    c2.add(Calendar.DAY_OF_WEEK, -w2);

    //end Saturday to start Saturday 
    long days = (c2.getTimeInMillis()-c1.getTimeInMillis())/(1000*60*60*24);
    long daysWithoutWeekendDays = days-(days*2/7);

    // Adjust days to add on (w2) and days to subtract (w1) so that Saturday
    // and Sunday are not included
    if (w1 == Calendar.SUNDAY &amp;&amp; w2 != Calendar.SATURDAY) {
        w1 = Calendar.MONDAY;
    } else if (w1 == Calendar.SATURDAY &amp;&amp; w2 != Calendar.SUNDAY) {
        w1 = Calendar.FRIDAY;
    } 

    if (w2 == Calendar.SUNDAY) {
        w2 = Calendar.MONDAY;
    } else if (w2 == Calendar.SATURDAY) {
        w2 = Calendar.FRIDAY;
    }
   log.info("days: " + (daysWithoutWeekendDays-w1+w2));
    //return daysWithoutWeekendDays-w1+w2;
}</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script 6" id="6d2a19d4-15c4-4a05-9968-ef450dc90cf5" disabled="true"><con:settings/><con:config><script>Random random = new Random();
      

     String randomInteger = random.nextInt().toString();
      log.info("SoNumber: " + randomInteger);
 </script></con:config></con:testStep><con:properties><con:property><con:name>CompletedDate</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>CreatedOnDate</con:name><con:value>2016-05-16T12:18:10.158Z</con:value></con:property><con:property><con:name>BookingDisplayName</con:name><con:value>B-APOS-1 800 HOSTING_US45333268-CLIENT-FY15Q1-57-V1</con:value></con:property><con:property><con:name>BookingID</con:name><con:value>5739ba81e4b0ad198a990cca</con:value></con:property><con:property><con:name>TatfromTatTotal</con:name><con:value>3 Days 1 Hours 44 Minutes 0 Seconds</con:value></con:property><con:property><con:name>TatNet</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>tatNetmillies</con:name><con:value>3 Days 1 Hours 44 Minutes 0 Seconds</con:value></con:property><con:property><con:name>TatTotal</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>Timediff</con:name><con:value>3 days, 1 hours, 44 minutes, 19.238 seconds</con:value></con:property><con:property><con:name>TimediffAfterCal</con:name><con:value>3 Days 1 Hours 44 Minutes 0 Seconds</con:value></con:property><con:property><con:name>TimeGap</con:name><con:value/></con:property><con:property><con:name>TimeZone</con:name><con:value>UTC+5:30</con:value></con:property><con:property><con:name>LineItemAmount</con:name><con:value>30648.84</con:value></con:property><con:property><con:name>SOAmount</con:name><con:value>30648.84</con:value></con:property><con:property><con:name>PaAmount</con:name><con:value>30648.84</con:value></con:property><con:property><con:name>PaCurrencyName</con:name><con:value>eur</con:value></con:property><con:property><con:name>PaCurrencyDisplayName</con:name><con:value>EUR</con:value></con:property><con:property><con:name>currentDate</con:name><con:value>2016-05-19T18:10:53.741Z</con:value></con:property><con:property><con:name>TimeDiffMilliesFromDate</con:name><con:value>265459238</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>6bda5a34-450f-427a-af64-6c06a948395d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c7cd9b4b-e847-484c-aef7-6b7380700d73</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f24e4578-6c82-46aa-963a-5be8c0cac063</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>ef6b8989-f85b-439f-b50a-064ecf6480d4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>08492c3e-1c05-4fb7-ac4f-4644aa99fe2d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>cd7dda61-054f-4b73-8ef1-a81f73dcfb35</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>34f3dc72-65dc-4452-98c0-80d30fcc8a99</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>af1e3118-92db-4292-a3a8-d46858c7e2a4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>72ab2170-83ea-44a7-bf57-9bf834b5cea8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>839f97e6-dc3c-4439-9ab6-dca896301400</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d5324741-f6c2-4fb5-823c-44d9919d4d60</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>1cad318f-6582-4a05-b57e-06db5ca349d4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>667c7017-97d0-4cab-a7c6-95f4035bbc12</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>68466991-c0f2-4c50-a01b-9e72d0b8d877</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>973c04db-15fc-4b8c-a5c2-de882484f7b7</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase id="64bd72a2-0b84-494f-9c8d-8356c61b246d" discardOkResults="true" failOnError="true" failTestCaseOnErrors="true" keepSession="false" name="Tasks-ClosedUnsuccessfully-Requested during weekday, Completed during weekday of the same week" searchProperties="true" disabled="true"><con:settings/><con:testStep type="calltestcase" name="Find Cookie" id="7a882cf2-28bb-41d3-ad52-a3796744d071"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>c0ce29f2-7cb0-4efc-a1f0-d98a032504a6</con:targetTestCase><con:properties><con:property><con:name>qaDevCookies</con:name><con:value>[avalon.sid=s%3A54cb1cf0e4b004ec636c4d71.OKyf7Hynz6NWePZzjLl5L9azOOkbtfD5ExcpJE%2FUL48</con:value></con:property></con:properties><con:returnProperties><con:entry>qaDevCookies</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script -CreatedOnDate" id="b5675948-e754-43c4-82a7-838eeb4f7e63"><con:settings/><con:config><script>import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.text.DateFormat;
import java.util.Date;
import java.util.TimeZone;
import java.util.*
import org.joda.time.DateTime;

DateTime dateTime = new DateTime();
long firstDayOfWeekTimestamp = dateTime.withDayOfWeek(1).getMillis();
log.info firstDayOfWeekTimestamp
// Get calendar set to current date and time
Calendar c = Calendar.getInstance();
 	    c.set(Calendar.HOUR_OF_DAY, 0);
         c.set(Calendar.MINUTE, 0);
         c.set(Calendar.SECOND, 0);
         c.set(Calendar.MILLISECOND, 0);
        
       
// Set the calendar to SUNDAY of the current week
c.set(Calendar.DAY_OF_WEEK, Calendar.MONDAY);

// Print dates of the current week starting on SUNDAY
DateFormat df = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ");
for (int i = 0; i &lt; 1; i++) {
    log.info(df.format(c.getTime()));
 DateFormat df1 = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS");
 log.info(df1.format(c.getTime()));
    //c.add(Calendar.DATE, 1);
    testRunner.testCase.setPropertyValue( "CreatedOnDate", (df1.format(c.getTime()).toString()+"Z"));
}</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script-FIndQuotesRequest" id="7cefc5b9-2871-47da-8a8c-397b774db3f3" disabled="true"><con:settings/><con:config><script>import groovy.json.*
def serverName = context.expand( '${#TestSuite#serverName}' )
def tenant = context.expand( '${#TestSuite#tenant}' )
def createdOnDate = context.expand( '${#TestCase#CreatedOnDate}' )

if (tenant=="dell" &amp;&amp; serverName =="pe-internal.dev")
{

                def jsonText='''{"filter":{"flows.quoteStages.state.name":"requested","flows.quoteStages.transitions":{"$elemMatch":{"changeDate":{"$gte":"${#TestCase#CreatedOnDate}"},"toState":"requested"}},"isBase":false,"isDraft":false},"params":{"sort":{"systemProperties.createdOn":1},"start":0,"limit":50,"columns":["_id","type","systemProperties","displayName","requestReason","flows.quoteStages.state","flows.quoteStages.target","relationships.requestedBy","relationships.assignee","expirationDate","flows.quoteStages.transitions","dueDate","amount.normalizedAmount","relationships.customer","tags","flows.quoteStages.transitions","flows.quoteStages.transitions"]},"origin":{"component":"AvalonGridDuplo","url":"#tab/app.quotes/vq=STATUS%3A%20%22Requested%22%20REQUEST-DATE%${#TestCase#CreatedOnDate}%"},"inversesummary":false}'''
}
else
{
                def jsonText='''{"filter":{"flows.quoteStages.state.name":"requested","systemProperties.createdOn":{"$gt":"${#TestCase#CreatedOnDate}"},"isBase":false,"isDraft":false},"params":{"sort":{"dueDate":1},"start":0,"limit":50,"columns":["_id","type","systemProperties","displayName","requestReason","flows.quoteStages.state","flows.quoteStages.target","relationships.requestedBy","relationships.assignee","expirationDate","flows.quoteStages.transitions","dueDate","amount.normalizedAmount","relationships.customer","tags","flows.quoteStages.transitions","flows.quoteStages.transitions"]},"origin":{"component":"AvalonGridDuplo","url":"#tab/app.quotes/vq=STATUS%3A%20%22Requested%7CStaged%7COn%20Hold%22%20CREATED-ON%3A%20%22%3E04-24-2016%22"},"inversesummary":false}'''
}




//{"filter":{"flows.quoteStages.state.name":"requested","systemProperties.createdOn":{"$gt":"${#TestCase#CreatedOnDate}"},"isBase":false,"isDraft":false},"params":{"sort":{"systemProperties.createdOn":1},"start":0,"limit":50,"columns":["_id","type","systemProperties","displayName","requestReason","flows.quoteStages.state","flows.quoteStages.target","relationships.requestedBy","relationships.assignee","expirationDate","flows.quoteStages.transitions","dueDate","amount.normalizedAmount","relationships.customer","tags","flows.quoteStages.transitions","flows.quoteStages.transitions"]},"origin":{"component":"AvalonGridDuplo","url":"#tab/app.quotes/vq=STATUS%3A%20%22Requested%22%20CREATED-ON%3A%20%22%3E04-14-2016%22"},"inversesummary":false}</script></con:config></con:testStep><con:testStep type="restrequest" name="FindTask" id="db7e0ce4-1ff0-416b-82e2-8861d18bb231"><con:settings/><con:config service="FindTask" resourcePath="/rest/api/${#TestSuite#tenant}/app.tasks::find" methodName="App.tasks::find" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="FindTask" id="72d7ffb4-c9d1-4bee-8c95-65eb37ae1f09" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Cookie" value="${#TestSuite#Cookie}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://${#TestSuite#serverName}.ssi-cloud.com</con:endpoint><con:request>{"filter":{"tags":{"$nin":[{"$regex":"^TAT_TEST"},{"$regex":"^Functional_QA"}]},"flows.taskStatus.state.name":"open","systemProperties.createdOn":{"$gte":"${#TestCase#CreatedOnDate}"}},"params":{"sort":{"systemProperties.createdOn":1},"start":0,"limit":150,"columns":["_id","type","systemProperties","displayName","taskType","dueDate","flows.taskStatus.state","flows.taskStatus.target","priority","relationships.assignee","relationships.requestedBy","systemProperties.createdOn"]},"origin":{"component":"AvalonGridDuplo"},"inversesummary":false}</con:request><con:originalUri>https://pe-internal.dev.ssi-cloud.com/rest/api/dell/app.tasks::find</con:originalUri><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="Property Transfer-TaskID" id="f524ec6f-3c7f-4e98-bfbe-43c625f6597a"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TaskID</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>FindTask</con:sourceStep><con:sourcePath>declare namespace ns1='https://pe-internal.dev.ssi-cloud.com/rest/api/dell/app.tasks::find';
//ns1:Response[1]/ns1:data[1]/ns1:app.task[1]/ns1:e[1]/ns1:_id[1]</con:sourcePath><con:targetType>TaskID</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:targetPath/><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TaskDisplayName</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>FindTask</con:sourceStep><con:sourcePath>declare namespace ns1='https://pe-internal.dev.ssi-cloud.com/rest/api/dell/app.tasks::find';
//ns1:Response[1]/ns1:data[1]/ns1:app.task[1]/ns1:e[1]/ns1:displayName[1]</con:sourcePath><con:targetType>TaskDisplayName</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TaskCount</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>FindTask</con:sourceStep><con:sourcePath>declare namespace ns1='https://pe-internal.dev.ssi-cloud.com/rest/api/dell/app.tasks::find';
//ns1:Response[1]/ns1:recordCount[1]/ns1:app.task[1]</con:sourcePath><con:targetType>TaskCount</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="TaskID" id="cdff915a-ab0c-47a8-ad89-e342c113134a"><con:settings/><con:config><script>import groovy.json.JsonSlurper
import com.eviware.soapui.support.XmlHolder
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
def holder = groovyUtils.getXmlHolder(testRunner.testCase.testSteps["FindTask"].testRequest.response.getContentAsXml());
def taskCount = context.expand( '${#TestCase#TaskCount}' )


log.info taskCount
def responseAsXml = context.expand( '${FindBooking#ResponseAsXml#declare namespace ns1=\'https://pe-internal.dev.ssi-cloud.com/rest/api/pe-internal.dev/app.bookings::find\'; //ns1:Response[1]/ns1:data[1]/ns1:app.booking[1]/ns1:e[1]/ns1:_id[1]}' )




def TaskIDs=[]

                def i=1
                def j=1             
                for(node in holder["//ns1:Response[1]/ns1:data[1]/ns1:app.task[1]/ns1:e[${i}]"])
                {              
								   
               //rate = holder.getNodeValue("ns1:Response[1]/ns1:data[1]/ns1:app.task[1]/ns1:e[${i}]/ns1:amount[1]/ns1:normalizedAmount[1]/ns1:rate[1]")   
               //affinityOrg= holder.getNodeValue("ns1:Response[1]/ns1:data[1]/ns1:app.quote[1]/ns1:e[${i}]/ns1:relationships[1]/ns1:e[2]/ns1:target[1]/ns1:relationships[1]/ns1:affinityOrganization[1]/ns1:targets[1]/ns1:e[1]/ns1:extensions[1]/ns1:tenant[1]/ns1:l0AffinityId[1]/ns1:value[1]")
          
              //log.info rate
              //log.info affinityOrg
              //if(rate!=null){
              //	 if(rate!=null&amp;&amp; affinityOrg != null){
              	
          									   
                                id = holder.getNodeValue("ns1:Response[1]/ns1:data[1]/ns1:app.task[1]/ns1:e[${i}]/ns1:_id[1]" )
                                TaskIDs.add(id)                              
                                i=i+1
                                log.info i
                                if(i==taskCount.toInteger())
                                break;
                }
                //}
//testRunner.testCase.setPropertyValue( "rate", rate.toString() ) 
testRunner.testCase.setPropertyValue( "TaskIDs", TaskIDs.toString())
testRunner.testCase.setPropertyValue( "taskCount", i.toString())
log.info TaskIDs.toString()
def count=0
testRunner.testCase.setPropertyValue( "i", count.toString() )
def flag=false
testRunner.testCase.setPropertyValue( "flag",flag.toString())

</script></con:config></con:testStep><con:testStep type="groovy" name="Counter" id="bbadc5c4-76a8-4603-bda4-0b4c9c3dfbf5"><con:settings/><con:config><script>def i = context.expand( '${#TestCase#i}' )
log.info i
def taskID = context.expand( '${#TestCase#TaskIDs#$[${#TestCase#i}]}' )



log.info taskID
testRunner.testCase.setPropertyValue( "taskID", taskID.toString() )
</script></con:config></con:testStep><con:testStep type="restrequest" name="TaskDetails" id="9b95f99c-29de-483b-b5b5-a061db382459"><con:settings/><con:config service="TaskDetails" resourcePath="/rest/api/${#TestSuite#tenant}/app.tasks::find" methodName="App.tasks::find" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="TaskDetails" id="a283c0b1-fe82-48ae-a333-6e53781e3cc8" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Cookie" value="${#TestSuite#Cookie}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://${#TestSuite#serverName}.ssi-cloud.com</con:endpoint><con:request>{"inversesummary":true,"filter":{"_id":"${#TestCase#TaskID}"},"params":{"start":0,"limit":1},"origin":{"component":"AvalonCollection"}}</con:request><con:originalUri>https://pe-internal.dev.ssi-cloud.com/rest/api/dell/app.tasks::find</con:originalUri><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters><entry key="inversesummary" value="true" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>inversesummary</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="Property Transfer-TimeZone" id="7093d874-e86e-4cb9-a791-089ad2c420d4"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="true" transferChildNodes="false"><con:name>TimeZone</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>TaskDetails</con:sourceStep><con:sourcePath>declare namespace ns1='https://pe-internal.dev.ssi-cloud.com/rest/api/dell/app.tasks::find';
//ns1:Response[1]/ns1:data[1]/ns1:app.task[1]/ns1:e[1]/ns1:extensions[1]/ns1:master[1]/ns1:requestedTimeZone[1]/ns1:value[1]/ns1:displayName[1]</con:sourcePath><con:targetType>TimeZone</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:targetPath/><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="Counter++" id="a881da85-bc0f-4a47-89e9-a499ce589576"><con:settings/><con:config><script>import groovy.json.JsonSlurper
import com.eviware.soapui.support.XmlHolder
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
def holder = groovyUtils.getXmlHolder(testRunner.testCase.testSteps["TaskDetails"].testRequest.response.getContentAsXml());
def flag = context.expand( '${#TestCase#flag}' )                                






                          timeZone=holder.getNodeValue("//ns1:Response[1]/ns1:data[1]/ns1:app.task[1]/ns1:e[1]/ns1:extensions[1]/ns1:master[1]/ns1:requestedTimeZone[1]/ns1:value[1]/ns1:displayName[1]")
                        //  isrevised=holder.getNodeValue("//ns1:Response[1]/ns1:data[1]/ns1:app.quote[1]/ns1:e[1]/ns1:isRevised[1]")
                          
                                
                                log.info ("Timezone: " + timeZone)
                              //  log.info isrevised
                        
                                if(timeZone != null ){
                            
                                flag==true
                                testRunner.testCase.setPropertyValue( "flag","true")                   
                                }
                                else
                                {
                                	testRunner.testCase.setPropertyValue( "flag","false")   
                                }
                                log.info flag
               
def i = context.expand( '${#TestCase#i}' )
log.info i
def c = i.toInteger()+1
testRunner.testCase.setPropertyValue( "i", c.toString() )
</script></con:config></con:testStep><con:testStep type="groovy" name="Counter Check" id="a9c5f581-5203-4db8-be74-ad8a628ff021"><con:settings/><con:config><script>def i = context.expand( '${#TestCase#i}' )

def taskCount = context.expand( '${#TestCase#TaskCount}' )

def flag = context.expand( '${#TestCase#flag}' )
log.info i
log.info taskCount
log.info flag
if((i.toInteger()&lt;taskCount.toInteger())&amp;&amp; (flag=="false"))
{
   testRunner.gotoStepByName( "Counter" )
}
else if ((i.toInteger()==taskCount.toInteger())&amp;&amp; (flag=="false"))
{
	testRunner.gotoStepByName( "Delay 3" );
	log.info ("Test Case Fail : DATA NOT FOUND")
	def DATA_NOT_FOUND="DATA NOT FOUND"
	return DATA_NOT_FOUND
	
    
}
else 
{
    testRunner.gotoStepByName( "Delay 2" )
}</script></con:config></con:testStep><con:testStep type="delay" name="Delay 2" id="4be147ba-55e2-472f-81bd-d0646d9a602b"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:testStep type="restrequest" name="FindActivities" id="b3f87b21-87d9-4011-916e-6eaa105889ad"><con:settings/><con:config service="FindActivities" resourcePath="/rest/api/dell/core.activities::getrhpactivities" methodName="Core.activities::getrhpactivities" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="FindActivities" id="ec32ed71-dac8-4f9f-8863-509201de0075" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Cookie" value="${#TestSuite#Cookie}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://${#TestSuite#serverName}.ssi-cloud.com</con:endpoint><con:request>{"params":{"sort":{"systemProperties.createdOn":-1},"start":0,"limit":50,"columns":["relatedObjects"]},"origin":{"component":"Duplo_TimelineStream","url":"#tab/core.activities"},"inversesummary":false,"type":"app.task","key":"${#TestCase#TaskID}","filter":{"crudBased":false},"configParams":{"includeNotes":true}}</con:request><con:originalUri>https://qa-internal.dev.ssi-cloud.com/rest/api/dell/core.activities::getrhpactivities</con:originalUri><con:credentials><con:username>maria.gomez@dell.com</con:username><con:password>passwordone</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="Property Transfer-CreatedOnDate" id="28c800af-5f1b-4a43-9b50-a16544e1d3d6"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>CreatedOnDate</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>FindActivities</con:sourceStep><con:sourcePath>declare namespace ns1='https://qa-internal.dev.ssi-cloud.com/rest/api/dell/core.activities::getrhpactivities';
//ns1:Response[1]/ns1:data[1]/ns1:core.activity[1]/ns1:e[1]/ns1:systemProperties[1]/ns1:createdOn[1]</con:sourcePath><con:targetType>CreatedOnDate</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:targetPath/><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="restrequest" name="CloseUnsuccessfully" id="e5ea011a-e3c2-43c1-9489-56c90dfd0ef5"><con:settings/><con:config service="CloseUnsuccessfully" resourcePath="/rest/api/${#TestSuite#tenant}/app.tasks/${#TestCase#TaskID}::closeUnsuccessfullyTask" methodName="5732d41ce4b0e839c0ec0e36::closeUnsuccessfullyTask" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CloseUnsuccessfully" id="c78b4682-ba1c-479a-9b40-cc1203002368" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Cookie" value="${#TestSuite#Cookie}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://${#TestSuite#serverName}.ssi-cloud.com</con:endpoint><con:request>{"notes":[{"relationships":[],"inverseSummary":{},"extensions":{"master":{},"tenant":{},"type":false},"externalIds":[],"dq":[],"tags":[],"type":"core.note","text":"APITesting","attachment":[],"notes":[]}],"_id":"","type":"app.task.closeunsuccessfully.input","closeUnsuccessfullyReason":{"displayName":"Other","name":"other","type":"app.lookup","key":"51a67a6316a8afd0f000c6e9"},"inversesummary":true,"extinversesummary":true,"origin":{"url":"#detail/app.tasks/${#TestCase#TaskID}"}}</con:request><con:originalUri>https://qa-internal.dev.ssi-cloud.com/rest/api/dell/app.tasks/5732d41ce4b0e839c0ec0e36::closeUnsuccessfullyTask</con:originalUri><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters>
  <con:entry key="inversesummary" value="true"/>
  <con:entry key="extinversesummary" value="true"/>
</con:parameters><con:parameterOrder><con:entry>inversesummary</con:entry><con:entry>extinversesummary</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="CloseUnsuccessfullyDetails" id="a53a303c-011b-49a9-9936-81badf58c5c0"><con:settings/><con:config service="CloseUnsuccessfulyDetails" resourcePath="/rest/api/${#TestSuite#tenant}/core.templates::find" methodName="Core.templates::find" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CloseUnsuccessfullyDetails" id="110d310f-35ba-4e44-8226-3bc9d8997278" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Cookie" value="${#TestSuite#Cookie}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://${#TestSuite#serverName}.ssi-cloud.com</con:endpoint><con:request>{"filter":{"templateType.name":"authAction"},"params":{"columns":["name","content","visualCls"]},"origin":{"url":"#detail/app.tasks/${#TestCase#TaskID}"}}</con:request><con:originalUri>https://qa-internal.dev.ssi-cloud.com/rest/api/dell/core.templates::find</con:originalUri><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="CompleteTask" id="a241cca9-d387-4a9d-a7e3-06f0902ee643" disabled="true"><con:settings/><con:config service="CompleteTask" resourcePath="/rest/api/${#TestSuite#tenant}/app.tasks/${#TestCase#TaskID}::completeTask" methodName="511a69f263165f8e0f05266e::completeTask" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CompleteTask" id="b101cbcc-5363-41ee-bc9f-5eb57ab80861" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Cookie" value="${#TestSuite#Cookie}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://${#TestSuite#serverName}.ssi-cloud.com</con:endpoint><con:request>{"detail":{"_id":"${#TestCase#TaskID}","type":"app.task","displayName":"${#TestCase#TaskDisplayName}"},"selections":[],"inversesummary":true,"extinversesummary":true,"origin":{}}</con:request><con:originalUri>https://pe-internal.dev.ssi-cloud.com/rest/api/dell/app.tasks/::completeTask</con:originalUri><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters>
  <con:entry key="inversesummary" value="true"/>
  <con:entry key="extinversesummary" value="true"/>
</con:parameters><con:parameterOrder><con:entry>inversesummary</con:entry><con:entry>extinversesummary</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="TaskDetails-Completed" id="c9aed9ce-47e1-41c4-bf03-d4bdcb2b16de"><con:settings/><con:config service="TaskDetails" resourcePath="/rest/api/${#TestSuite#tenant}/app.tasks::find" methodName="App.tasks::find" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="TaskDetails-Completed" id="a283c0b1-fe82-48ae-a333-6e53781e3cc8" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Cookie" value="${#TestSuite#Cookie}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://${#TestSuite#serverName}.ssi-cloud.com</con:endpoint><con:request>{"inversesummary":true,"filter":{"_id":"${#TestCase#TaskID}"},"params":{"start":0,"limit":1},"origin":{"component":"AvalonCollection","url":"#tab/app.tasks"}}

</con:request><con:originalUri>https://qa-internal.dev.ssi-cloud.com/rest/api/dell/app.tasks::find</con:originalUri><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters><entry key="inversesummary" value="true" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>inversesummary</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="Property Transfer-CompletedDate" id="9c5bba2c-7c41-4e41-9076-ff3d4a6c1c09"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>CompletedDate</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>TaskDetails-Completed</con:sourceStep><con:sourcePath>declare namespace ns1='https://qa-internal.dev.ssi-cloud.com/rest/api/dell/app.tasks::find';
//ns1:Response[1]/ns1:data[1]/ns1:app.task[1]/ns1:e[1]/ns1:flows[1]/ns1:taskStatus[1]/ns1:transitions[1]/ns1:e[2]/ns1:changeDate[1]</con:sourcePath><con:targetType>CompletedDate</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:targetPath/><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TatTotal</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>TaskDetails-Completed</con:sourceStep><con:sourcePath>declare namespace ns1='https://qa-internal.dev.ssi-cloud.com/rest/api/dell/app.tasks::find';
//ns1:Response[1]/ns1:data[1]/ns1:app.task[1]/ns1:e[1]/ns1:extensions[1]/ns1:master[1]/ns1:tatTotal[1]/ns1:value[1]</con:sourcePath><con:targetType>TatTotal</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TatNet</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>TaskDetails-Completed</con:sourceStep><con:sourcePath>declare namespace ns1='https://qa-internal.dev.ssi-cloud.com/rest/api/dell/app.tasks::find';
//ns1:Response[1]/ns1:data[1]/ns1:app.task[1]/ns1:e[1]/ns1:extensions[1]/ns1:master[1]/ns1:tatNet[1]/ns1:value[1]</con:sourcePath><con:targetType>TatNet</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script-TatCalculations" id="8b95f82f-d5b2-4ad7-acb9-08381520f549"><con:settings/><con:config><script><![CDATA[import java.text.SimpleDateFormat;
import java.util.Date;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.text.DateFormat;
import java.util.TimeZone;
import java.util.concurrent.TimeUnit;
import java.lang.Long

def createdOnDate = context.expand( '${#TestCase#CreatedOnDate}' )
def completedDate = context.expand( '${#TestCase#CompletedDate}' )

String string = createdOnDate;
String string1 = completedDate;


SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ");
SimpleDateFormat output = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS");

//requested Date
Date date = sdf.parse(createdOnDate.replaceAll("Z", "+0000"));
String nTime = output.format(date);

myDate = Date.parse("yyyy-MM-dd'T'HH:mm:ss.SSS", nTime) ;
//log.info("string: " + string);
log.info("date: " + nTime);

//change Date
Date date1 = sdf.parse(completedDate.replaceAll("Z", "+0000"));
log.info("date1: " + date1);

String nTime1 = output.format(date1);
myDate1 = Date.parse("yyyy-MM-dd'T'HH:mm:ss.SSS", nTime1) ;
log.info("myDate1: " + myDate1);
log.info("date: " + nTime1);


use(groovy.time.TimeCategory) {
    def duration = date1 - date
    log.info ("Timediff::" + duration)
    log.info "Days: ${duration.days}, Hours: ${duration.hours},Minutes: ${duration.minutes},Seconds: ${duration.seconds}"
    testRunner.testCase.setPropertyValue( "Timediff", duration.toString());
     def minutes=0
     def seconds=0

   StringBuilder sb = new StringBuilder(64);
        sb.append(duration.days);
        sb.append(" Days ");
        sb.append(duration.hours);
        sb.append(" Hours ");
      

        if (duration.minutes==0 && duration.seconds>0){
           minutes=duration.minutes+1
        	 sb.append(duration.minutes);
        	 sb.append(" Minutes ");
        	 seconds=0
        	 sb.append(seconds);
           sb.append(" Seconds");
        }
       else if (duration.minutes>0 && duration.seconds>0 && duration.seconds<=30){
	      sb.append(duration.minutes);
        	 sb.append(" Minutes ");
        	 seconds=0
        	 sb.append(seconds);
           sb.append(" Seconds");
        }
        else if (duration.minutes>0 && duration.seconds>30){
        	minutes=duration.minutes+1
        	 sb.append(minutes);
        	 sb.append(" Minutes ");
        	seconds=0
        	 sb.append(seconds);
           sb.append(" Seconds");
        	}
              
log.info("sbTime::" + sb.toString())
 testRunner.testCase.setPropertyValue( "TimediffAfterCal", sb.toString());

    
}]]></script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script-TAT Calculations" id="0defb2e3-881d-4e50-892c-aed94111494c"><con:settings/><con:config><script><![CDATA[import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.TimeZone;
import java.util.concurrent.TimeUnit;
def quoteID = context.expand( '${#TestCase#QuoteID}' )
def timeZone = context.expand( '${#TestCase#TimeZone}' )
def requestedTime = context.expand( '${#TestCase#requestedTime}' )
def changeDate = context.expand( '${#TestCase#ChangeDate}' )


def turnaroundTime = context.expand( '${#TestCase#TurnaroundTime}' )
def tatNet = context.expand( '${#TestCase#TatNet}' )
def tatTotal = context.expand( '${#TestCase#TatTotal}' )
def long minutes1 = tatTotal.toLong()
def long tatTotalmillies = minutes1 * 60 * 1000;
def long tatNetmillies = minutes1 * 60 * 1000;

//getWorkingDaysBetweenTwoDates( requestedTime,endDate)

//getDurationBreakdown(millies)

getDurationBreakdownMinutes(tatTotalmillies)
getDurationBreakdownMinutes1(tatNetmillies)


/*def String getDurationBreakdown(long millies)
    {
        if(millies < 0)
        {
            throw new IllegalArgumentException("Duration must be greater than zero!");
        }

        long days = TimeUnit.MILLISECONDS.toDays(millies);
        millies -= TimeUnit.DAYS.toMillis(days);
        long hours = TimeUnit.MILLISECONDS.toHours(millies);
        millies -= TimeUnit.HOURS.toMillis(hours);
        long minutes = TimeUnit.MILLISECONDS.toMinutes(millies);
        millies -= TimeUnit.MINUTES.toMillis(minutes);
        long seconds = TimeUnit.MILLISECONDS.toSeconds(millies);

        StringBuilder sb = new StringBuilder(64);
        sb.append(days);
        sb.append(" Days ");
        sb.append(hours);
        sb.append(" Hours ");
      

        if (minutes==0 && seconds>0){
        	 minutes=minutes+1
        	 sb.append(minutes);
        	 sb.append(" Minutes ");
        	 seconds=0
        	 sb.append(seconds);
           sb.append(" Seconds");
        }
       else if (minutes>0 && seconds>0 && seconds<=30){
	      sb.append(minutes);
        	 sb.append(" Minutes ");
        	 seconds=0
        	 sb.append(seconds);
           sb.append(" Seconds");
        }
        else if (minutes>0 && seconds>30){
        	minutes=minutes+1
        	 sb.append(minutes);
        	 sb.append(" Minutes ");
        	 seconds=0
        	 sb.append(seconds);
           sb.append(" Seconds");
        	}
              
log.info(sb.toString())
       testRunner.testCase.setPropertyValue( "TatfromRestTimegap", sb.toString());
    }*/

def String getDurationBreakdownMinutes(long tatTotalmillies)
    {
        if(tatTotalmillies < 0)
        {
            throw new IllegalArgumentException("Duration must be greater than zero!");
        }

        long days = TimeUnit.MILLISECONDS.toDays(tatTotalmillies);
        tatTotalmillies -= TimeUnit.DAYS.toMillis(days);
        long hours = TimeUnit.MILLISECONDS.toHours(tatTotalmillies);
        tatTotalmillies -= TimeUnit.HOURS.toMillis(hours);
        long minutes = TimeUnit.MILLISECONDS.toMinutes(tatTotalmillies);
        tatTotalmillies -= TimeUnit.MINUTES.toMillis(minutes);
        long seconds = TimeUnit.MILLISECONDS.toSeconds(tatTotalmillies);

        StringBuilder sb = new StringBuilder(64);
        sb.append(days);
        sb.append(" Days ");
        sb.append(hours);
        sb.append(" Hours ");
        sb.append(minutes);
        sb.append(" Minutes "); 
        sb.append(seconds);
        sb.append(" Seconds");
        
        log.info("TatfromTatTotal : " + sb.toString())
        testRunner.testCase.setPropertyValue( "TatfromTatTotal", sb.toString());
    }

def String getDurationBreakdownMinutes1(long tatNetmillies)
    {
        if(tatNetmillies < 0)
        {
            throw new IllegalArgumentException("Duration must be greater than zero!");
        }

        long days = TimeUnit.MILLISECONDS.toDays(tatNetmillies);
        tatNetmillies -= TimeUnit.DAYS.toMillis(days);
        long hours = TimeUnit.MILLISECONDS.toHours(tatNetmillies);
        tatNetmillies -= TimeUnit.HOURS.toMillis(hours);
        long minutes = TimeUnit.MILLISECONDS.toMinutes(tatNetmillies);
        tatNetmillies -= TimeUnit.MINUTES.toMillis(minutes);
        long seconds = TimeUnit.MILLISECONDS.toSeconds(tatNetmillies);

        StringBuilder sb = new StringBuilder(64);
        sb.append(days);
        sb.append(" Days ");
        sb.append(hours);
        sb.append(" Hours ");
        sb.append(minutes);
        sb.append(" Minutes "); 
        sb.append(seconds);
        sb.append(" Seconds");
        
        log.info("tatNetmillies : " + sb.toString())
        testRunner.testCase.setPropertyValue( "tatNetmillies", sb.toString());
    }




    ]]></script></con:config></con:testStep><con:testStep type="groovy" name="Assertion For TatTotal and TatNet" id="83502b4e-5fdc-4e7f-be23-0bc0e6668e82"><con:settings/><con:config><script>def tatfromTatTotal = context.expand( '${#TestCase#TatfromTatTotal}' )
def tatfromRestTimegap = context.expand( '${#TestCase#TatfromRestTimegap}' )
def tatNetmillies = context.expand( '${#TestCase#tatNetmillies}' )
def timediffAfterCal = context.expand( '${#TestCase#TimediffAfterCal}' )




assert tatfromTatTotal==timediffAfterCal
assert tatNetmillies==timediffAfterCal</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script 5" id="97af1f75-7abb-4f2e-b2b8-b3ec4bd756e8" disabled="true"><con:settings/><con:config><script>import java.text.SimpleDateFormat;
import java.util.Date;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.text.DateFormat;
import java.util.TimeZone;
import java.util.concurrent.TimeUnit;
import java.lang.Long
def createdOnDate = context.expand( '${#TestCase#CreatedOnDate}' )
def completedDate = context.expand( '${#TestCase#CompletedDate}' )

//log.info createdOnDate
//log.info completedDate

//String string = createdOnDate;
//String string1 = completedDate;

SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ");
SimpleDateFormat output = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS");

//createdOnDate
Date date = sdf.parse(createdOnDate.replaceAll("Z", "+0000"));
String nTime = output.format(date);
myDate = Date.parse("yyyy-MM-dd'T'HH:mm:ss.SSS", nTime) ;
//log.info("string: " + string);
log.info("date: " + nTime);

//completedDate
Date date1 = sdf.parse(completedDate.replaceAll("Z", "+0000"));
log.info("date1: " + date1);

String nTime1 = output.format(date1);
myDate1 = Date.parse("yyyy-MM-dd'T'HH:mm:ss.SSS", nTime1) ;
log.info("myDate1: " + myDate1);
log.info("date: " + nTime1);

DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS");
//get current date time with Date()
Date date2 = new Date();
log.info(dateFormat.format(date2));
//log.info firstDayOfWeekTimestamp
// Get calendar set to current date and time
Calendar c = Calendar.getInstance();
 	    c.set(Calendar.HOUR_OF_DAY, 0);
         c.set(Calendar.MINUTE, 0);
         c.set(Calendar.SECOND, 0);
         c.set(Calendar.MILLISECOND, 0);
         
         log.info c.getTime();


    
t2=(dateFormat.format(c.getTime()))
t3=(dateFormat.parse(t2))
Timeinhours=(myDate1 - t3);
log.info ("Time: " + Timeinhours);


DateDifferentExample(nTime1,t2)





Long DateDifferentExample(String dateStart,String dateStop) {

		//HH converts hour in 24 hours format (0-23), day calculation
		SimpleDateFormat format = new SimpleDateFormat("MM/dd/yyyy HH:mm:ss");

		Date d1 = null;
		Date d2 = null;

		try {
			d1 = format.parse(dateStart);
			d2 = format.parse(dateStop);

			//in milliseconds
			long diff = d2.getTime() - d1.getTime();

			long diffSeconds = diff / 1000 % 60;
			long diffMinutes = diff / (60 * 1000) % 60;
			long diffHours = diff / (60 * 60 * 1000) % 24;
			long diffDays = diff / (24 * 60 * 60 * 1000);

			log.info(diffDays + " days, ");
			log.info(diffHours + " hours, ");
			log.info(diffMinutes + " minutes, ");
			log.info(diffSeconds + " seconds.");

		} catch (Exception e) {
			e.printStackTrace();
		}

	}

</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script" id="74aeb434-9452-4541-a4ef-89831d46ed00" disabled="true"><con:settings/><con:config><script>import java.text.SimpleDateFormat;
import java.util.Date;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.text.DateFormat;
import java.util.TimeZone;
import java.util.concurrent.TimeUnit;
import java.lang.Long

def createdOnDate = context.expand( '${#TestCase#CreatedOnDate}' )
def completedDate = context.expand( '${#TestCase#CompletedDate}' )


SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ");
SimpleDateFormat output = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS");

//createdOnDate
Date date = sdf.parse(createdOnDate.replaceAll("Z", "+0000"));

//completedDate
Date date1 = sdf.parse(completedDate.replaceAll("Z", "+0000"));


days(date,date1)


 Long days(Date start, Date end){
    //Ignore argument check

    Calendar c1 = Calendar.getInstance();
    c1.setTime(start);
    int w1 = c1.get(Calendar.DAY_OF_WEEK);
    c1.add(Calendar.DAY_OF_WEEK, -w1);

    Calendar c2 = Calendar.getInstance();
    c2.setTime(end);
    int w2 = c2.get(Calendar.DAY_OF_WEEK);
    c2.add(Calendar.DAY_OF_WEEK, -w2);

    //end Saturday to start Saturday 
    long days = (c2.getTimeInMillis()-c1.getTimeInMillis())/(1000*60*60*24);
    long daysWithoutWeekendDays = days-(days*2/7);

    // Adjust days to add on (w2) and days to subtract (w1) so that Saturday
    // and Sunday are not included
    if (w1 == Calendar.SUNDAY &amp;&amp; w2 != Calendar.SATURDAY) {
        w1 = Calendar.MONDAY;
    } else if (w1 == Calendar.SATURDAY &amp;&amp; w2 != Calendar.SUNDAY) {
        w1 = Calendar.FRIDAY;
    } 

    if (w2 == Calendar.SUNDAY) {
        w2 = Calendar.MONDAY;
    } else if (w2 == Calendar.SATURDAY) {
        w2 = Calendar.FRIDAY;
    }
   log.info("days: " + (daysWithoutWeekendDays-w1+w2));
    //return daysWithoutWeekendDays-w1+w2;
}</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script 6" id="2e1da583-1d50-466d-b9fd-6111f2506ca7" disabled="true"><con:settings/><con:config><script>import java.text.SimpleDateFormat;
import java.util.Date;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.text.DateFormat;
import java.util.TimeZone;
import java.util.concurrent.TimeUnit;

def changeDate = context.expand( '${#TestCase#ChangeDate}' )
def requestedTime = context.expand( '${#TestCase#requestedTime}' )
log.info requestedTime
log.info changeDate

SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ");
SimpleDateFormat output = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS");

//requested Date
Date date = sdf.parse(requestedTime.replaceAll("Z", "+0000"));
String nTime = output.format(date);
myDate = Date.parse("yyyy-MM-dd'T'HH:mm:ss.SSS", nTime) ;
//log.info("string: " + string);
log.info("date: " + nTime);

//change Date
Date date1 = sdf.parse(changeDate.replaceAll("Z", "+0000"));
log.info("date1: " + date1);

String nTime1 = output.format(date1);
myDate1 = Date.parse("yyyy-MM-dd'T'HH:mm:ss.SSS", nTime1) ;
log.info("myDate1: " + myDate1);
log.info("date1: " + nTime1);

getTimeDiff(date,date1)
getDurationBreakdownMinutes(timeDiff)

def getTimeDiff(Date dateOne, Date dateTwo) {
            String diff = "";
            long timeDiff = Math.abs(dateOne.getTime() - dateTwo.getTime());
            log.info ("TimeDiff : " + timeDiff);
            testRunner.testCase.setPropertyValue( "TimeDiffMilliesFromDate", timeDiff.toString())
              return timeDiff;
    }


def String getDurationBreakdownMinutes(long timeDiff)
    {
        if(timeDiff &lt; 0)
        {
            throw new IllegalArgumentException("Duration must be greater than zero!");
        }

        long days = TimeUnit.MILLISECONDS.toDays(timeDiff);
        timeDiff -= TimeUnit.DAYS.toMillis(days);
        long hours = TimeUnit.MILLISECONDS.toHours(timeDiff);
        timeDiff -= TimeUnit.HOURS.toMillis(hours);
        long minutes = TimeUnit.MILLISECONDS.toMinutes(timeDiff);
        timeDiff -= TimeUnit.MINUTES.toMillis(minutes);
        long seconds = TimeUnit.MILLISECONDS.toSeconds(timeDiff);

        StringBuilder sb = new StringBuilder(64);
        sb.append(days);
        sb.append(" Days ");
        sb.append(hours);
        sb.append(" Hours ");
        sb.append(minutes);
        sb.append(" Minutes "); 
        sb.append(seconds);
        sb.append(" Seconds");
        
        log.info("TatfromTatTotal : " + sb.toString())
        testRunner.testCase.setPropertyValue( "TatfromTatTotal", sb.toString());
    }








</script></con:config></con:testStep><con:testStep type="delay" name="Delay 3" id="c6090653-b9ab-43cd-829f-00d950718e59"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:properties><con:property><con:name>CompletedDate</con:name><con:value>2016-06-02T12:38:42.419Z</con:value></con:property><con:property><con:name>CreatedOnDate</con:name><con:value>2016-05-30T07:19:20.871Z</con:value></con:property><con:property><con:name>TaskDisplayName</con:name><con:value>Task213</con:value></con:property><con:property><con:name>TaskID</con:name><con:value>574be978e4b029e37e2dc1c1</con:value></con:property><con:property><con:name>TatfromTatTotal</con:name><con:value>3 Days 5 Hours 19 Minutes 0 Seconds</con:value></con:property><con:property><con:name>TatNet</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">4639</con:value></con:property><con:property><con:name>tatNetmillies</con:name><con:value>3 Days 5 Hours 19 Minutes 0 Seconds</con:value></con:property><con:property><con:name>TatTotal</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">4639</con:value></con:property><con:property><con:name>Timediff</con:name><con:value>3 days, 5 hours, 19 minutes, 21.548 seconds</con:value></con:property><con:property><con:name>TimediffAfterCal</con:name><con:value>3 Days 5 Hours 19 Minutes 0 Seconds</con:value></con:property><con:property><con:name>TimeZone</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">UTC+5:30</con:value></con:property><con:property><con:name>TaskCount</con:name><con:value>6</con:value></con:property><con:property><con:name>TaskIDs</con:name><con:value>[574be978e4b029e37e2dc1c1, 574bfe04e4b06e9e1bb34444, 574bff68e4b029e37e2e0692, 574bff8ee4b06e9e1bb34c3e, 574e6a30e4b0f0d579dbf739]</con:value></con:property><con:property><con:name>i</con:name><con:value>1</con:value></con:property><con:property><con:name>flag</con:name><con:value>true</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>6bda5a34-450f-427a-af64-6c06a948395d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c7cd9b4b-e847-484c-aef7-6b7380700d73</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f24e4578-6c82-46aa-963a-5be8c0cac063</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>ef6b8989-f85b-439f-b50a-064ecf6480d4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>08492c3e-1c05-4fb7-ac4f-4644aa99fe2d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>cd7dda61-054f-4b73-8ef1-a81f73dcfb35</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>34f3dc72-65dc-4452-98c0-80d30fcc8a99</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e5ea011a-e3c2-43c1-9489-56c90dfd0ef5</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a53a303c-011b-49a9-9936-81badf58c5c0</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>cdff915a-ab0c-47a8-ad89-e342c113134a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>bbadc5c4-76a8-4603-bda4-0b4c9c3dfbf5</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a881da85-bc0f-4a47-89e9-a499ce589576</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a9c5f581-5203-4db8-be74-ad8a628ff021</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>7093d874-e86e-4cb9-a791-089ad2c420d4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>4be147ba-55e2-472f-81bd-d0646d9a602b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase id="b6e4681a-3408-4da6-8f9a-84cb1a53e360" discardOkResults="true" failOnError="true" failTestCaseOnErrors="true" keepSession="false" name="Quotes-ClosedUnsuccessfully-Requested during weekday, Completed during weekday of the same week" searchProperties="true" disabled="true"><con:settings/><con:testStep type="calltestcase" name="Find Cookie" id="41b0bd91-868b-40cc-a3be-1d5545169a3c"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>c0ce29f2-7cb0-4efc-a1f0-d98a032504a6</con:targetTestCase><con:properties><con:property><con:name>qaDevCookies</con:name><con:value>[avalon.sid=s%3A54cb1cf0e4b004ec636c4d71.OKyf7Hynz6NWePZzjLl5L9azOOkbtfD5ExcpJE%2FUL48</con:value></con:property></con:properties><con:returnProperties><con:entry>qaDevCookies</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script -CreatedOnDate" id="ec232883-951e-475a-9f6e-002b751c3c93"><con:settings/><con:config><script>import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.text.DateFormat;
import java.util.Date;
import java.util.TimeZone;
import java.util.*
import org.joda.time.DateTime;

DateTime dateTime = new DateTime();
long firstDayOfWeekTimestamp = dateTime.withDayOfWeek(1).getMillis();
log.info firstDayOfWeekTimestamp
// Get calendar set to current date and time
Calendar c = Calendar.getInstance();
 	    c.set(Calendar.HOUR_OF_DAY, 0);
         c.set(Calendar.MINUTE, 0);
         c.set(Calendar.SECOND, 0);
         c.set(Calendar.MILLISECOND, 0);
        
       
// Set the calendar to SUNDAY of the current week
c.set(Calendar.DAY_OF_WEEK, Calendar.MONDAY);

// Print dates of the current week starting on SUNDAY
DateFormat df = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ");
for (int i = 0; i &lt; 1; i++) {
    log.info(df.format(c.getTime()));
 DateFormat df1 = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS");
 log.info(df1.format(c.getTime()));
    //c.add(Calendar.DATE, 1);
    testRunner.testCase.setPropertyValue( "CreatedOnDate", (df1.format(c.getTime()).toString()+"Z"));
}</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script-FIndQuotesRequest" id="9d5d0510-9226-4b8d-827a-3b899d178ae3"><con:settings/><con:config><script>import groovy.json.*
def serverName = context.expand( '${#TestSuite#serverName}' )
def tenant = context.expand( '${#TestSuite#tenant}' )
def createdOnDate = context.expand( '${#TestCase#CreatedOnDate}' )

if (tenant=="dell" &amp;&amp; serverName =="pe-internal.dev")
{

                def jsonText='''{"filter":{"flows.quoteStages.state.name":"requested","flows.quoteStages.transitions":{"$elemMatch":{"changeDate":{"$gte":"${#TestCase#CreatedOnDate}"},"toState":"requested"}},"isBase":false,"isDraft":false},"params":{"sort":{"systemProperties.createdOn":1},"start":0,"limit":50,"columns":["_id","type","systemProperties","displayName","requestReason","flows.quoteStages.state","flows.quoteStages.target","relationships.requestedBy","relationships.assignee","expirationDate","flows.quoteStages.transitions","dueDate","amount.normalizedAmount","relationships.customer","tags","flows.quoteStages.transitions","flows.quoteStages.transitions"]},"origin":{"component":"AvalonGridDuplo"},"inversesummary":false}'''
}
else
{
                def jsonText='''{"filter":{"flows.quoteStages.state.name":"requested","systemProperties.createdOn":{"$gt":"${#TestCase#CreatedOnDate}"},"isBase":false,"isDraft":false},"params":{"sort":{"dueDate":1},"start":0,"limit":50,"columns":["_id","type","systemProperties","displayName","requestReason","flows.quoteStages.state","flows.quoteStages.target","relationships.requestedBy","relationships.assignee","expirationDate","flows.quoteStages.transitions","dueDate","amount.normalizedAmount","relationships.customer","tags","flows.quoteStages.transitions","flows.quoteStages.transitions"]},"origin":{"component":"AvalonGridDuplo","url":"#tab/app.quotes/vq=STATUS%3A%20%22Requested%7CStaged%7COn%20Hold%22%20CREATED-ON%3A%20%22%3E04-24-2016%22"},"inversesummary":false}'''
}




//{"filter":{"flows.quoteStages.state.name":"requested","systemProperties.createdOn":{"$gt":"${#TestCase#CreatedOnDate}"},"isBase":false,"isDraft":false},"params":{"sort":{"systemProperties.createdOn":1},"start":0,"limit":50,"columns":["_id","type","systemProperties","displayName","requestReason","flows.quoteStages.state","flows.quoteStages.target","relationships.requestedBy","relationships.assignee","expirationDate","flows.quoteStages.transitions","dueDate","amount.normalizedAmount","relationships.customer","tags","flows.quoteStages.transitions","flows.quoteStages.transitions"]},"origin":{"component":"AvalonGridDuplo","url":"#tab/app.quotes/vq=STATUS%3A%20%22Requested%22%20CREATED-ON%3A%20%22%3E04-14-2016%22"},"inversesummary":false}</script></con:config></con:testStep><con:testStep type="restrequest" name="FindQuotes" id="6201a901-391b-4765-a3ea-5a595c4c6277"><con:settings/><con:config service="FindQuotes" resourcePath="/rest/api/dell/app.quotes::find" methodName="App.quotes::find" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="FindQuotes" id="0303b810-05fa-4e34-9420-745dad712ec3" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Cookie" value="${#TestSuite#Cookie}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://${#TestSuite#serverName}.ssi-cloud.com</con:endpoint><con:request>{"filter":{"tags":{"$nin":[{"$regex":"^TAT_TEST"},{"$regex":"^Functional_QA"}]},"flows.quoteStages.state.name":"requested","systemProperties.createdOn":{"$gte":"${#TestCase#CreatedOnDate}"},"isBase":false,"isDraft":false},"params":{"sort":{"systemProperties.createdOn":1},"start":0,"limit":50,"columns":["_id","type","systemProperties","displayName","requestReason","flows.quoteStages.state","flows.quoteStages.target","relationships.requestedBy","relationships.assignee","expirationDate","flows.quoteStages.transitions","dueDate","amount.normalizedAmount","relationships.customer","tags","flows.quoteStages.transitions","flows.quoteStages.transitions"]},"origin":{"component":"AvalonGridDuplo"},"inversesummary":false}</con:request><con:originalUri>https://qa-internal.dev.ssi-cloud.com/rest/api/dell/app.quotes::find</con:originalUri><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="Property Transfer-QuoteCount" id="33e4b9ee-1baa-45ea-8c48-d69fca3824cd"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>QuoteCount</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>FindQuotes</con:sourceStep><con:sourcePath>declare namespace ns1='https://qa-internal.dev.ssi-cloud.com/rest/api/dell/app.quotes::find';
//ns1:Response[1]/ns1:recordCount[1]/ns1:app.quote[1]</con:sourcePath><con:targetType>QuoteCount</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:targetPath/><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="QuoteID" id="e1cd82b5-faff-45d6-9cee-ef77c68f20b6"><con:settings/><con:config><script>import groovy.json.JsonSlurper
import com.eviware.soapui.support.XmlHolder
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
def holder = groovyUtils.getXmlHolder(testRunner.testCase.testSteps["FindQuotes"].testRequest.response.getContentAsXml());
def quoteCount = context.expand( '${#TestCase#QuoteCount}' )

log.info quoteCount


def QuoteIDs=[]

                def i=1
                def j=1
                for(node in holder["//ns1:Response[1]/ns1:data[1]/ns1:app.quote[1]/ns1:e[${i}]"])
                {              

             //  rate = holder.getNodeValue("ns1:Response[1]/ns1:data[1]/ns1:app.quote[1]/ns1:e[${i}]/ns1:amount[1]/ns1:normalizedAmount[1]/ns1:rate[1]")   
              // affinityOrg= holder.getNodeValue("ns1:Response[1]/ns1:data[1]/ns1:app.quote[1]/ns1:e[${i}]/ns1:relationships[1]/ns1:e[2]/ns1:target[1]/ns1:relationships[1]/ns1:affinityOrganization[1]/ns1:targets[1]/ns1:e[1]/ns1:extensions[1]/ns1:tenant[1]/ns1:l0AffinityId[1]/ns1:value[1]")
          
             // log.info rate
             // log.info affinityOrg
             // if(rate==!null&amp;&amp; affinityOrg== !null){
          
                                id = holder.getNodeValue("ns1:Response[1]/ns1:data[1]/ns1:app.quote[1]/ns1:e[1]/ns1:_id[1]" )
                                QuoteIDs.add(id)                              
                                i=i+1
                                log.info i
                                if(i==quoteCount.toInteger())
                                break;
                }
                //}
//testRunner.testCase.setPropertyValue( "rate", rate.toString() ) 
testRunner.testCase.setPropertyValue( "QuoteIDs", QuoteIDs.toString())
testRunner.testCase.setPropertyValue( "quoteCount", i.toString())
log.info QuoteIDs.toString()
def count=0
testRunner.testCase.setPropertyValue( "i", count.toString() )
def flag=false
testRunner.testCase.setPropertyValue( "flag",flag.toString())

</script></con:config></con:testStep><con:testStep type="groovy" name="Counter" id="a8248af0-95b9-4e45-b34e-86a2369cc46d"><con:settings/><con:config><script>def i = context.expand( '${#TestCase#i}' )
log.info i

def quoteID = context.expand( '${#TestCase#QuoteIDs#$[${#TestCase#i}]}' )
log.info quoteID
testRunner.testCase.setPropertyValue( "quoteID", quoteID.toString() )
</script></con:config></con:testStep><con:testStep type="restrequest" name="QuoteDetails" id="f727a50a-c5f3-49b2-8602-016e3a319cca"><con:settings/><con:config service="QuoteDetails" resourcePath="/rest/api/dell/app.quotes::find" methodName="App.quotes::find" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="QuoteDetails" id="73cce1c1-ad05-4f68-83e5-e387a9e63e66" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Cookie" value="${#TestSuite#Cookie}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://${#TestSuite#serverName}.ssi-cloud.com</con:endpoint><con:request>{"inversesummary":true,"extinversesummary":true,"filter":{"_id":"${#TestCase#QuoteID}"},"params":{"start":0,"limit":1},"origin":{"component":"AvalonCollection"}}</con:request><con:originalUri>https://qa-internal.dev.ssi-cloud.com/rest/api/dell/app.quotes::find</con:originalUri><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters>
  <con:entry key="inversesummary" value="true"/>
  <con:entry key="extinversesummary" value="true"/>
</con:parameters><con:parameterOrder><con:entry>inversesummary</con:entry><con:entry>extinversesummary</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="Property Transfer-TimeZone" id="df9f9fd2-b2e4-4f10-842b-eac8f4b1d2cf"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TimeZone</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>QuoteDetails</con:sourceStep><con:sourcePath>declare namespace ns1='https://qa-internal.dev.ssi-cloud.com/rest/api/dell/app.quotes::find';
//ns1:Response[1]/ns1:data[1]/ns1:app.quote[1]/ns1:e[1]/ns1:extensions[1]/ns1:master[1]/ns1:requestedTimeZone[1]/ns1:value[1]/ns1:displayName[1]</con:sourcePath><con:targetType>TimeZone</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:targetPath/><con:type>XPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TimeZoneKey</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>QuoteDetails</con:sourceStep><con:sourcePath>declare namespace ns1='https://qa-internal.dev.ssi-cloud.com/rest/api/dell/app.quotes::find';
//ns1:Response[1]/ns1:data[1]/ns1:app.quote[1]/ns1:e[1]/ns1:extensions[1]/ns1:master[1]/ns1:requestedTimeZone[1]/ns1:value[1]/ns1:key[1]</con:sourcePath><con:targetType>TimeZoneKey</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>amount1</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>QuoteDetails</con:sourceStep><con:sourcePath>declare namespace ns1='https://qa-internal.dev.ssi-cloud.com/rest/api/dell/app.quotes::find';
//ns1:Response[1]/ns1:data[1]/ns1:app.quote[1]/ns1:e[1]/ns1:amount[1]/ns1:amount[1]</con:sourcePath><con:targetType>amount</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>corelookupKey</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>QuoteDetails</con:sourceStep><con:sourcePath>declare namespace ns1='https://qa-internal.dev.ssi-cloud.com/rest/api/dell/app.quotes::find';
//ns1:Response[1]/ns1:data[1]/ns1:app.quote[1]/ns1:e[1]/ns1:amount[1]/ns1:code[1]/ns1:key[1]</con:sourcePath><con:targetType>coreLookUpKey</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>coreLookUpKEY2</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>QuoteDetails</con:sourceStep><con:sourcePath>declare namespace ns1='https://qa-internal.dev.ssi-cloud.com/rest/api/dell/app.quotes::find';
//ns1:Response[1]/ns1:data[1]/ns1:app.quote[1]/ns1:e[1]/ns1:amount[1]/ns1:normalizedAmount[1]/ns1:code[1]/ns1:key[1]</con:sourcePath><con:targetType>coreLookUpKEY2</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>currencyName1</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>QuoteDetails</con:sourceStep><con:sourcePath>declare namespace ns1='https://qa-internal.dev.ssi-cloud.com/rest/api/dell/app.quotes::find';
//ns1:Response[1]/ns1:data[1]/ns1:app.quote[1]/ns1:e[1]/ns1:amount[1]/ns1:code[1]/ns1:name[1]</con:sourcePath><con:targetType>currencyName1</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false"><con:name>currencyDisplayName1</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>QuoteDetails</con:sourceStep><con:sourcePath>declare namespace ns1='https://qa-internal.dev.ssi-cloud.com/rest/api/dell/app.quotes::find';
//ns1:Response[1]/ns1:data[1]/ns1:app.quote[1]/ns1:e[1]/ns1:amount[1]/ns1:code[1]/ns1:displayName[1]</con:sourcePath><con:targetType>currencyDisplayName1</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:targetPath xsi:nil="true"/><con:type>XPATH</con:type><con:targetTransferType>XPATH</con:targetTransferType><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false"><con:name>currencyDisplayName2</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>QuoteDetails</con:sourceStep><con:sourcePath>declare namespace ns1='https://qa-internal.dev.ssi-cloud.com/rest/api/dell/app.quotes::find';
//ns1:Response[1]/ns1:data[1]/ns1:app.quote[1]/ns1:e[1]/ns1:amount[1]/ns1:normalizedAmount[1]/ns1:code[1]/ns1:displayName[1]</con:sourcePath><con:targetType>currencyDisplayName2</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:targetPath xsi:nil="true"/><con:type>XPATH</con:type><con:targetTransferType>XPATH</con:targetTransferType><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>CurrencyName2</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>QuoteDetails</con:sourceStep><con:sourcePath>declare namespace ns1='https://qa-internal.dev.ssi-cloud.com/rest/api/dell/app.quotes::find';
//ns1:Response[1]/ns1:data[1]/ns1:app.quote[1]/ns1:e[1]/ns1:amount[1]/ns1:normalizedAmount[1]/ns1:code[1]/ns1:name[1]</con:sourcePath><con:targetType>currencyName2</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>amount2</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>QuoteDetails</con:sourceStep><con:sourcePath>declare namespace ns1='https://qa-internal.dev.ssi-cloud.com/rest/api/dell/app.quotes::find';
//ns1:Response[1]/ns1:data[1]/ns1:app.quote[1]/ns1:e[1]/ns1:amount[1]/ns1:normalizedAmount[1]/ns1:amount[1]</con:sourcePath><con:targetType>amount2</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="Counter++" id="f729b63a-e97a-40fc-b0fd-14c6ef737629"><con:settings/><con:config><script>import groovy.json.JsonSlurper
import com.eviware.soapui.support.XmlHolder
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
def holder = groovyUtils.getXmlHolder(testRunner.testCase.testSteps["QuoteDetails"].testRequest.response.getContentAsXml());
def flag = context.expand( '${#TestCase#flag}' )                                
//def timeZone = context.expand( '${#TestCase#TimeZone}' )




                          timeZone=holder.getNodeValue("//ns1:Response[1]/ns1:data[1]/ns1:app.quote[1]/ns1:e[1]/ns1:extensions[1]/ns1:master[1]/ns1:requestedTimeZone[1]/ns1:value[1]/ns1:displayName[1]")
                          isrevised=holder.getNodeValue("//ns1:Response[1]/ns1:data[1]/ns1:app.quote[1]/ns1:e[1]/ns1:isRevised[1]")
                          
                                
                                log.info ("Timezone: " + timeZone)
                                log.info isrevised
                        
                                if(isrevised==null &amp;&amp; timeZone!=null )
                                {
                            
                                flag==true
                                testRunner.testCase.setPropertyValue( "flag","true")                   
                                }
                                else
                                {
                                	testRunner.testCase.setPropertyValue( "flag","false")   
                                }
                                log.info flag
               
def i = context.expand( '${#TestCase#i}' )
log.info i
def c = i.toInteger()+1
testRunner.testCase.setPropertyValue( "i", c.toString() )
</script></con:config></con:testStep><con:testStep type="groovy" name="Counter Check" id="7c4f6054-342f-4270-bca8-475e54a2f29d"><con:settings/><con:config><script>def i = context.expand( '${#TestCase#i}' )
def quoteCount = context.expand( '${#TestCase#QuoteCount}' )
def flag = context.expand( '${#TestCase#flag}' )
log.info i
log.info quoteCount
log.info flag
if((i.toInteger()&lt;quoteCount.toInteger())&amp;&amp; (flag=="false"))
{
   testRunner.gotoStepByName( "Counter" )
}
else if ((i.toInteger()==quoteCount.toInteger())&amp;&amp; (flag=="false"))
{
	testRunner.gotoStepByName( "Delay 3" );
	log.info ("Test Case Fail : DATA NOT FOUND")
	def DATA_NOT_FOUND="DATA NOT FOUND"
	return DATA_NOT_FOUND
	
    
}
else 
{
    testRunner.gotoStepByName( "Delay 2" )
}</script></con:config></con:testStep><con:testStep type="delay" name="Delay 2" id="d72f04bf-183c-4e28-b6c7-8041c7beecca"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script-CheckBadData" id="a29afd96-30e7-49da-8f0f-cc5ba0075f57" disabled="true"><con:settings/><con:config><script>//def responseAsXml = context.expand( '${REST Request-test#ResponseAsXml#declare namespace ns1=\'https://qa-internal.dev.ssi-cloud.com/rest/api/dell/app.quotes::find\'; //ns1:Response[1]/ns1:data[1]/ns1:app.quote[1]/ns1:e[1]/ns1:relationships[1]/ns1:e[2]/ns1:target[1]/ns1:relationships[1]/ns1:affinityOrganization[1]}' )
def responseAsXml = context.expand( '${REST Request-test#ResponseAsXml#declare namespace ns1=\'https://qa-internal.dev.ssi-cloud.com/rest/api/dell/app.quotes::find\'; //ns1:Response[1]/ns1:data[1]/ns1:app.quote[1]/ns1:e[1]/ns1:relationships[1]/ns1:e[2]/ns1:target[1]/ns1:relationships[1]/ns1:affinityOrganization[1]/ns1:targets[1]/ns1:e[1]/ns1:extensions[1]/ns1:tenant[1]/ns1:l0AffinityId[1]/ns1:value[1]}' )
def responseAsXml = context.expand( '${REST Request-test#ResponseAsXml#declare namespace ns1=\'https://qa-internal.dev.ssi-cloud.com/rest/api/dell/app.quotes::find\'; //ns1:Response[1]/ns1:data[1]/ns1:app.quote[1]/ns1:e[1]/ns1:relationships[1]/ns1:e[2]/ns1:target[1]/ns1:relationships[1]/ns1:affinityOrganization[1]}' )
</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script-GetQuoteID" id="53e97fdb-a128-4a5f-8d38-5ac97fd71e37" disabled="true"><con:settings/><con:config><script>import groovy.json.JsonSlurper
import com.eviware.soapui.support.XmlHolder
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
def holder = groovyUtils.getXmlHolder(testRunner.testCase.testSteps["FindQuotes"].testRequest.response.getContentAsXml());


def i=1
def j=1
                
for(node in holder["ns1:Response[1]/ns1:data[1]/ns1:app.quote[1]/ns1:e[${i}]/ns1:_id[1]"])
   {              
    rate = holder.getNodeValue("ns1:Response[1]/ns1:data[1]/ns1:app.quote[1]/ns1:e[${i}]/ns1:amount[1]/ns1:normalizedAmount[1]/ns1:rate[1]")   
    affinityOrg= holder.getNodeValue("ns1:Response[1]/ns1:data[1]/ns1:app.quote[1]/ns1:e[${i}]/ns1:relationships[1]/ns1:e[2]/ns1:target[1]/ns1:relationships[1]/ns1:affinityOrganization[1]/ns1:targets[1]/ns1:e[1]/ns1:extensions[1]/ns1:tenant[1]/ns1:l0AffinityId[1]/ns1:value[1]")
          
    log.info rate
    log.info affinityOrg
  // if(rate!=null&amp;&amp; affinityOrg != null)
     if(rate!=null)
      { 
       //	if(rate.toFloat()==1)
       
           
         	id = holder.getNodeValue("ns1:Response[1]/ns1:data[1]/ns1:app.quote[1]/ns1:e[${i}]/ns1:_id[1]" )
       
          log.info id
            j=j+1
                       
           i=i+1
           if(j==2)
testRunner.testCase.setPropertyValue( "QuoteID", id.toString() )
testRunner.testCase.setPropertyValue( "rate", rate.toString() ) 
              break;

                }
 
                }

  
</script></con:config></con:testStep><con:testStep type="transfer" name="Property Transfer-QuoteID" id="a8647a5d-1911-415e-adc6-90639d23e2f3" disabled="true"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>QuoteID</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>FindQuotes</con:sourceStep><con:sourcePath>declare namespace ns1='https://qa-internal.dev.ssi-cloud.com/rest/api/dell/app.quotes::find';
//ns1:Response[1]/ns1:data[1]/ns1:app.quote[1]/ns1:e[1]/ns1:_id[1]</con:sourcePath><con:targetType>QuoteID</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:targetPath/><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="true" useXQuery="false"><con:name>QuoteName</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>FindQuotes</con:sourceStep><con:sourcePath>declare namespace ns1='https://qa-internal.dev.ssi-cloud.com/rest/api/dell/app.quotes::find';
//ns1:Response[1]/ns1:data[1]/ns1:app.quote[1]/ns1:e[1]/ns1:displayName[1]</con:sourcePath><con:targetType>QuoteName</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:targetPath xsi:nil="true"/><con:type>XPATH</con:type><con:targetTransferType>XPATH</con:targetTransferType><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="restrequest" name="FindActivities" id="56d898d6-4104-4d8b-b561-dc4636b57baf"><con:settings/><con:config service="FindActivities" resourcePath="/rest/api/dell/core.activities::getrhpactivities" methodName="Core.activities::getrhpactivities" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="FindActivities" id="ec32ed71-dac8-4f9f-8863-509201de0075" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Cookie" value="${#TestSuite#Cookie}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://${#TestSuite#serverName}.ssi-cloud.com</con:endpoint><con:request>{"params":{"sort":{"systemProperties.createdOn":-1},"start":0,"limit":50,"columns":["relatedObjects"]},"origin":{"component":"Duplo_TimelineStream","url":"#tab/core.activities"},"inversesummary":false,"type":"app.quote","key":"${#TestCase#QuoteID}","filter":{"crudBased":false},"configParams":{"includeNotes":true}}</con:request><con:originalUri>https://qa-internal.dev.ssi-cloud.com/rest/api/dell/core.activities::getrhpactivities</con:originalUri><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="Property Transfer-requestedTime" id="51acaca5-6de1-41fa-aa3c-90e126760d83"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>requestedTime</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>FindActivities</con:sourceStep><con:sourcePath>declare namespace ns1='https://qa-internal.dev.ssi-cloud.com/rest/api/dell/core.activities::getrhpactivities';
//ns1:Response[1]/ns1:data[1]/ns1:core.activity[1]/ns1:e[1]/ns1:context[1]/ns1:amount[1]/ns1:normalizedAmount[1]/ns1:convertedOn[1]</con:sourcePath><con:targetType>requestedTime</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:targetPath/><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="delay" name="Delay" id="3eba49a2-46fc-4068-b3c6-05a30ccdecc6"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:testStep type="restrequest" name="CloseQuoteUnsuccessfully" id="7ab39cc2-1e19-4bf0-88c1-52c000d2d1d7"><con:settings/><con:config service="CloseQuoteUnsuccessfully" resourcePath="/rest/api/${#TestSuite#tenant}/app.quotes/${#TestCase#QuoteID}::closeUnsuccessfullyQuote" methodName="5421080ce4b0b9322bdc9d21::closeUnsuccessfullyQuote" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CloseQuoteUnsuccessfully" id="1efd95ed-7346-427a-b642-cba0eb57619e" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Cookie" value="${#TestSuite#Cookie}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://${#TestSuite#serverName}.ssi-cloud.com</con:endpoint><con:request>{"note":{"systemProperties":{"transId":[],"expiredOn":"9999-01-01T00:00:00.000Z"},"relationships":[],"notes":[],"attachment":[],"keywords":[],"externalIds":[],"dq":[],"tags":[]},"_id":"${#TestCase#QuoteID}","type":"app.quote.closeunsuccessfully.input","closeUnsuccessfullyReason":{"displayName":"Other","name":"other","type":"app.lookup","key":"50ac01a51f9c0c0000000aba"},"notes":[],"inversesummary":true,"extinversesummary":true,"origin":{"url":"#detail/app.quotes/${#TestCase#QuoteID}"}}</con:request><con:originalUri>https://sqa-internal.dev.ssi-cloud.com/rest/api/dell/app.quotes/57395baae4b01e282f71085f::closeUnsuccessfullyQuote</con:originalUri><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters>
  <con:entry key="inversesummary" value="true"/>
  <con:entry key="extinversesummary" value="true"/>
</con:parameters><con:parameterOrder><con:entry>inversesummary</con:entry><con:entry>extinversesummary</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="QuoteDetails-Completed" id="d833867f-953b-4426-9e2e-1460bea0cac4"><con:settings/><con:config service="QuoteDetails" resourcePath="/rest/api/dell/app.quotes::find" methodName="App.quotes::find" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="QuoteDetails-Completed" id="73cce1c1-ad05-4f68-83e5-e387a9e63e66" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Cookie" value="${#TestSuite#Cookie}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://${#TestSuite#serverName}.ssi-cloud.com</con:endpoint><con:request>{"inversesummary":true,"extinversesummary":true,"filter":{"_id":"${#TestCase#QuoteID}"},"params":{"start":0,"limit":1},"origin":{"component":"AvalonCollection","url":"#tab/app.quotes/vq=STATUS%3A%20%22Completed%22%20CREATED-ON%3A%20%22%3E04-24-2016%22"}}</con:request><con:originalUri>https://qa-internal.dev.ssi-cloud.com/rest/api/dell/app.quotes::find</con:originalUri><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters>
  <con:entry key="inversesummary" value="true"/>
  <con:entry key="extinversesummary" value="true"/>
</con:parameters><con:parameterOrder><con:entry>inversesummary</con:entry><con:entry>extinversesummary</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="Property Transfer-TurnaroundTime" id="3435260f-a32c-425a-8843-8c47f7b27a2d"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>ChangeDate</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>QuoteDetails-Completed</con:sourceStep><con:sourcePath>declare namespace ns1='https://qa-internal.dev.ssi-cloud.com/rest/api/dell/app.quotes::find';
//ns1:Response[1]/ns1:data[1]/ns1:app.quote[1]/ns1:e[1]/ns1:flows[1]/ns1:quoteStages[1]/ns1:transitions[1]/ns1:e[3]/ns1:changeDate[1]</con:sourcePath><con:targetType>ChangeDate</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TimeGap</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>QuoteDetails-Completed</con:sourceStep><con:sourcePath>declare namespace ns1='https://qa-internal.dev.ssi-cloud.com/rest/api/dell/app.quotes::find';
//ns1:Response[1]/ns1:data[1]/ns1:app.quote[1]/ns1:e[1]/ns1:flows[1]/ns1:quoteStages[1]/ns1:transitions[1]/ns1:e[3]/ns1:timeGap[1]</con:sourcePath><con:targetType>TimeGap</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false"><con:name>TatTotal</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>QuoteDetails-Completed</con:sourceStep><con:sourcePath>declare namespace ns1='https://qa-internal.dev.ssi-cloud.com/rest/api/dell/app.quotes::find';
//ns1:Response[1]/ns1:data[1]/ns1:app.quote[1]/ns1:e[1]/ns1:extensions[1]/ns1:master[1]/ns1:tatTotal[1]/ns1:value[1]</con:sourcePath><con:targetType>TatTotal</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:targetPath/><con:type>XPATH</con:type><con:targetTransferType>XPATH</con:targetTransferType><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TatNet</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>QuoteDetails-Completed</con:sourceStep><con:sourcePath>declare namespace ns1='https://qa-internal.dev.ssi-cloud.com/rest/api/dell/app.quotes::find';
//ns1:Response[1]/ns1:data[1]/ns1:app.quote[1]/ns1:e[1]/ns1:extensions[1]/ns1:master[1]/ns1:tatNet[1]/ns1:value[1]</con:sourcePath><con:targetType>TatNet</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script-TAT Calculations11" id="4108387f-54ba-40f8-ad5c-9876841b75cf"><con:settings/><con:config><script><![CDATA[import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.TimeZone;
import java.util.concurrent.TimeUnit;
def quoteID = context.expand( '${#TestCase#QuoteID}' )
def timeZone = context.expand( '${#TestCase#TimeZone}' )
def requestedTime = context.expand( '${#TestCase#requestedTime}' )
def changeDate = context.expand( '${#TestCase#ChangeDate}' )
def timeGap = context.expand( '${#TestCase#TimeGap}' )
def long millies =timeGap.toLong()
def turnaroundTime = context.expand( '${#TestCase#TurnaroundTime}' )
def tatNet = context.expand( '${#TestCase#TatNet}' )
def tatTotal = context.expand( '${#TestCase#TatTotal}' )
def long minutes1 = tatTotal.toLong()
def long tatTotalmillies = minutes1 * 60 * 1000;
def long tatNetmillies = minutes1 * 60 * 1000;

//getWorkingDaysBetweenTwoDates( requestedTime,endDate)

getDurationBreakdown(millies)

getDurationBreakdownMinutes(tatTotalmillies)
getDurationBreakdownMinutes1(tatNetmillies)


def String getDurationBreakdown(long millies)
    {
        if(millies < 0)
        {
            throw new IllegalArgumentException("Duration must be greater than zero!");
        }

        long days = TimeUnit.MILLISECONDS.toDays(millies);
        millies -= TimeUnit.DAYS.toMillis(days);
        long hours = TimeUnit.MILLISECONDS.toHours(millies);
        millies -= TimeUnit.HOURS.toMillis(hours);
        long minutes = TimeUnit.MILLISECONDS.toMinutes(millies);
        millies -= TimeUnit.MINUTES.toMillis(minutes);
        long seconds = TimeUnit.MILLISECONDS.toSeconds(millies);

        StringBuilder sb = new StringBuilder(64);
        sb.append(days);
        sb.append(" Days ");
        sb.append(hours);
        sb.append(" Hours ");
      

        if (minutes==0 && seconds>0){
        	 minutes=minutes+1
        	 sb.append(minutes);
        	 sb.append(" Minutes ");
        	 seconds=0
        	 sb.append(seconds);
           sb.append(" Seconds");
        }
       else if (minutes>0 && seconds>0 && seconds<=30){
	      sb.append(minutes);
        	 sb.append(" Minutes ");
        	 seconds=0
        	 sb.append(seconds);
           sb.append(" Seconds");
        }
        else if (minutes>0 && seconds>30){
        	minutes=minutes+1
        	 sb.append(minutes);
        	 sb.append(" Minutes ");
        	 seconds=0
        	 sb.append(seconds);
           sb.append(" Seconds");
        	}
              
log.info(sb.toString())
       testRunner.testCase.setPropertyValue( "TatfromRestTimegap", sb.toString());
    }

def String getDurationBreakdownMinutes(long tatTotalmillies)
    {
        if(tatTotalmillies < 0)
        {
            throw new IllegalArgumentException("Duration must be greater than zero!");
        }

        long days = TimeUnit.MILLISECONDS.toDays(tatTotalmillies);
        tatTotalmillies -= TimeUnit.DAYS.toMillis(days);
        long hours = TimeUnit.MILLISECONDS.toHours(tatTotalmillies);
        tatTotalmillies -= TimeUnit.HOURS.toMillis(hours);
        long minutes = TimeUnit.MILLISECONDS.toMinutes(tatTotalmillies);
        tatTotalmillies -= TimeUnit.MINUTES.toMillis(minutes);
        long seconds = TimeUnit.MILLISECONDS.toSeconds(tatTotalmillies);

        StringBuilder sb = new StringBuilder(64);
        sb.append(days);
        sb.append(" Days ");
        sb.append(hours);
        sb.append(" Hours ");
        sb.append(minutes);
        sb.append(" Minutes "); 
        sb.append(seconds);
        sb.append(" Seconds");
        
        log.info(sb.toString())
        testRunner.testCase.setPropertyValue( "TatfromTatTotal", sb.toString());
    }

def String getDurationBreakdownMinutes1(long tatNetmillies)
    {
        if(tatNetmillies < 0)
        {
            throw new IllegalArgumentException("Duration must be greater than zero!");
        }

        long days = TimeUnit.MILLISECONDS.toDays(tatNetmillies);
        tatNetmillies -= TimeUnit.DAYS.toMillis(days);
        long hours = TimeUnit.MILLISECONDS.toHours(tatNetmillies);
        tatNetmillies -= TimeUnit.HOURS.toMillis(hours);
        long minutes = TimeUnit.MILLISECONDS.toMinutes(tatNetmillies);
        tatNetmillies -= TimeUnit.MINUTES.toMillis(minutes);
        long seconds = TimeUnit.MILLISECONDS.toSeconds(tatNetmillies);

        StringBuilder sb = new StringBuilder(64);
        sb.append(days);
        sb.append(" Days ");
        sb.append(hours);
        sb.append(" Hours ");
        sb.append(minutes);
        sb.append(" Minutes "); 
        sb.append(seconds);
        sb.append(" Seconds");
        
        log.info(sb.toString())
        testRunner.testCase.setPropertyValue( "tatNetmillies", sb.toString());
    }


    ]]></script></con:config></con:testStep><con:testStep type="groovy" name="Assertion For TatTotal and TatNet11" id="49933284-71a6-4711-8f30-cbe8404b0200"><con:settings/><con:config><script>def tatfromTatTotal = context.expand( '${#TestCase#TatfromTatTotal}' )
def tatfromRestTimegap = context.expand( '${#TestCase#TatfromRestTimegap}' )
def tatNetmillies = context.expand( '${#TestCase#tatNetmillies}' )




assert tatfromTatTotal==tatfromRestTimegap
assert tatNetmillies==tatfromRestTimegap</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script-FormatRequestedDate1" id="16728500-591d-497e-b17d-5c96a0f75953" disabled="true"><con:settings/><con:config><script>import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.text.DateFormat;
import java.util.Date;
import java.util.TimeZone;


def requestedTime = context.expand( '${#TestCase#requestedTime}' )
log.info requestedTime

String string = requestedTime;

String defaultTimezone = TimeZone.getDefault().getID();
SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ");
SimpleDateFormat output = new SimpleDateFormat("yyyy-MM-dd");
//Date d = sdf.parse(time);

Date date = sdf.parse(string.replaceAll("Z", "+0000"));
String nTime = output.format(date);
log.info("string: " + string);
log.info("date: " + date);
log.info("nTime: " + nTime);
testRunner.testCase.setPropertyValue( "FormatedRequestedDate", nTime.toString());</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script- FormatChangeDate1" id="13d42a38-d25c-4c48-917c-7556d0754a5f" disabled="true"><con:settings/><con:config><script>import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.text.DateFormat;
import java.util.Date;
import java.util.TimeZone;
def changeDate = context.expand( '${#TestCase#ChangeDate}' )

String string = changeDate;
//String defaultTimezone = TimeZone.getDefault().getID();
SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ");
SimpleDateFormat output = new SimpleDateFormat("yyyy-MM-dd");
//Date d = sdf.parse(time);

Date date = sdf.parse(string.replaceAll("Z", "+0000"));
String nTime = output.format(date);
log.info("string: " + string);
log.info("date: " + date);
log.info("nTime: " + nTime);
testRunner.testCase.setPropertyValue( "FormatedChangeDate", nTime.toString());</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script 21" id="add7ad44-0b1a-402e-b4ac-13d41d0b0865" disabled="true"><con:settings/><con:config><script><![CDATA[import java.text.SimpleDateFormat;
import java.util.Date;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.text.DateFormat;
import java.util.TimeZone;
import java.util.concurrent.TimeUnit;

def changeDate = context.expand( '${#TestCase#ChangeDate}' )
def requestedTime = context.expand( '${#TestCase#requestedTime}' )
log.info requestedTime
log.info changeDate
def timeDiffMilliesFromDate = context.expand( '${#TestCase#TimeDiffMilliesFromDate}' )


 Long timeDiffMilliesFromDate1 = Long.valueOf(timeDiffMilliesFromDate);
//String string = requestedTime;
//String string1 = changeDate;

SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ");
SimpleDateFormat output = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS");


//requested Date
Date date = sdf.parse(requestedTime.replaceAll("Z", "+0000"));
String nTime = output.format(date);
myDate = Date.parse("yyyy-MM-dd'T'HH:mm:ss.SSS", nTime) ;
//log.info("string: " + string);
log.info("date: " + nTime);




//change Date
Date date1 = sdf.parse(changeDate.replaceAll("Z", "+0000"));
log.info("date1: " + date1);

String nTime1 = output.format(date1);
myDate1 = Date.parse("yyyy-MM-dd'T'HH:mm:ss.SSS", nTime1) ;
log.info("myDate1: " + myDate1);
log.info("date1: " + nTime1);

DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS");
//get current date time with Date()
Date date2 = new Date();
log.info("CurrentDate: "+ dateFormat.format(date2));

// Get calendar set to current date and time
Calendar c = Calendar.getInstance();
 	    c.set(Calendar.HOUR_OF_DAY, 0);
         c.set(Calendar.MINUTE, 0);
         c.set(Calendar.SECOND, 0);
         c.set(Calendar.MILLISECOND, 0);
         
         log.info c.getTime();


    
t2=(dateFormat.format(c.getTime()))
t3=(dateFormat.parse(t2))
Timeinhours=(myDate1 - t3);
log.info ("Time: " + Timeinhours);


getTimeDiff(date,date1)

getDurationBreakdown(timeDiffMilliesFromDate1)




def getTimeDiff(Date dateOne, Date dateTwo) {
            String diff = "";
            long timeDiff = Math.abs(dateOne.getTime() - dateTwo.getTime());
            log.info ("TimeDiff : " + timeDiff);
            testRunner.testCase.setPropertyValue( "TimeDiffMilliesFromDate", timeDiff.toString())
              return timeDiff;
    }

def String getDurationBreakdown(long millies)
    {
        if(millies < 0)
        {
            throw new IllegalArgumentException("Duration must be greater than zero!");
        }

        long days = TimeUnit.MILLISECONDS.toDays(millies);
        millies -= TimeUnit.DAYS.toMillis(days);
        long hours = TimeUnit.MILLISECONDS.toHours(millies);
        millies -= TimeUnit.HOURS.toMillis(hours);
        long minutes = TimeUnit.MILLISECONDS.toMinutes(millies);
        millies -= TimeUnit.MINUTES.toMillis(minutes);
        long seconds = TimeUnit.MILLISECONDS.toSeconds(millies);

        StringBuilder sb = new StringBuilder(64);

        sb.append(hours);
        sb.append(" Hours ");
      

        if (minutes==0 && seconds>0){
        	 minutes=minutes+1
        	 sb.append(minutes);
        	 sb.append(" Minutes ");
        	 seconds=0
        	 sb.append(seconds);
           sb.append(" Seconds");
        }
       else if (minutes>0 && seconds>0 && seconds<=30){
       	minutes=minutes-1
	      sb.append(minutes);
        	 sb.append(" Minutes ");
        	 seconds=0
        	 sb.append(seconds);
           sb.append(" Seconds");
        }
        else if (minutes>0 && seconds>30){
        	minutes=minutes+1
        	 sb.append(minutes);
        	 sb.append(" Minutes ");
        	 seconds=0
        	 sb.append(seconds);
           sb.append(" Seconds");
        	}
            
log.info(sb.toString())
       testRunner.testCase.setPropertyValue( "MilliesFromDate", sb.toString());
    }]]></script></con:config></con:testStep><con:testStep type="groovy" name="BusinessDay Calculation1" id="05df1950-02c3-430e-98c9-2dcf9069c4f6" disabled="true"><con:settings/><con:config><script><![CDATA[import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.text.DateFormat;
import java.util.Date;
import java.util.TimeZone;
import java.util.*
import org.joda.time.DateTime;

def changeDate = context.expand( '${#TestCase#ChangeDate}' )
def formatedRequestedDate = context.expand( '${#TestCase#FormatedRequestedDate}' )
def formatedChangeDate = context.expand( '${#TestCase#FormatedChangeDate}' )

SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd");
String dateInString = formatedRequestedDate
log.info dateInString
Date date = formatter.parse(dateInString);
log.info(date);
log.info(formatter.format(date));
def projectContext = context.testCase.testSuite.project.context
projectContext.date = date






String dateInString1 = formatedChangeDate		
		
Date date1 = formatter.parse(dateInString1);
log.info(date1);
log.info(formatter.format(date1));

projectContext.date1 = date1

def date3 = projectContext.date1
def date2 = projectContext.date


days(date2,date3)

/*
SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ");
SimpleDateFormat output = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS");
//Date d = sdf.parse(time);



Date Changedate = sdf.parse(changeDate.replaceAll("Z", "+0000"));
String nTime = output.format(Changedate);

DateTime dateTime = new DateTime();
Calendar c = Calendar.getInstance();
	    c.setTime(new Date());
	    c.set(Calendar.HOUR_OF_DAY, 0);
         c.set(Calendar.MINUTE, 0);
         c.set(Calendar.SECOND, 0);
         c.set(Calendar.MILLISECOND, 0);

Date myDate = c.getTime();
log.info ("myDate::" + myDate);

String datediff= (nTime - myDate)
log.info ("datediff::" + datediff)



DateFormat sdf21 = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss"); 
Date date21 = sdf21.parse(datediff);
log.info ("Days :- " +date21.getDay()); 
log.info ("Hours :- " +date21.getHours()); 
log.info ("Min :- " + date21.getMinutes()); 
log.info ("Sec :- " + date21.getSeconds()); 

 StringBuilder sb = new StringBuilder(64);
        sb.append(date21.getHours());
        sb.append(" Hours ");
 if (date21.getMinutes()==0 && seconds>0){
        	 minutes=date21.getMinutes()+1
        	 sb.append(minutes);
        	 sb.append(" Minutes ");
        	 seconds=0
        	 sb.append(seconds);
           sb.append(" Seconds");
        }
       else if (date21.getMinutes()>0 && date21.getSeconds()>0 && date21.getSeconds()<=30){
	      sb.append(date21.getMinutes());
        	 sb.append(" Minutes ");
        	 seconds=0
        	 sb.append(seconds);
           sb.append(" Seconds");
        }
        else if (date21.getMinutes()>0 && date21.getSeconds()>30){
        	minutes=date21.getMinutes()+1
        	 sb.append(minutes);
        	 sb.append(" Minutes ");
        	 seconds=0
        	 sb.append(seconds);
           sb.append(" Seconds");
        	}

log.info("DateDiffAfterCal :- " +sb.toString())
testRunner.testCase.setPropertyValue( "DateDiffAfterCal", sb.toString());

*/




//Business Days Calculation

 long days(Date start, Date end){
    //Ignore argument check

    Calendar c1 = Calendar.getInstance();
    c1.setTime(start);
    int w1 = c1.get(Calendar.DAY_OF_WEEK);
    c1.add(Calendar.DAY_OF_WEEK, -w1);

    Calendar c2 = Calendar.getInstance();
    c2.setTime(end);
    int w2 = c2.get(Calendar.DAY_OF_WEEK);
    c2.add(Calendar.DAY_OF_WEEK, -w2);

    //end Saturday to start Saturday 
    long days = (c2.getTimeInMillis()-c1.getTimeInMillis())/(1000*60*60*24);
    long daysWithoutWeekendDays = days-(days*2/7);

    // Adjust days to add on (w2) and days to subtract (w1) so that Saturday
    // and Sunday are not included
    if (w1 == Calendar.SUNDAY && w2 != Calendar.SATURDAY) {
        w1 = Calendar.MONDAY;
    } else if (w1 == Calendar.SATURDAY && w2 != Calendar.SUNDAY) {
        w1 = Calendar.FRIDAY;
    } 

    if (w2 == Calendar.SUNDAY) {
        w2 = Calendar.MONDAY;
    } else if (w2 == Calendar.SATURDAY) {
        w2 = Calendar.FRIDAY;
    }
    testRunner.testCase.setPropertyValue( "BusinessDays", (daysWithoutWeekendDays-w1+w2).toString());
    return daysWithoutWeekendDays-w1+w2;
}
]]></script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script-TAT Calculations1" id="880f03d9-3e85-4a53-873a-920cde81aaea" disabled="true"><con:settings/><con:config><script><![CDATA[import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.TimeZone;
import java.util.concurrent.TimeUnit;
def quoteID = context.expand( '${#TestCase#QuoteID}' )
def timeZone = context.expand( '${#TestCase#TimeZone}' )
def requestedTime = context.expand( '${#TestCase#requestedTime}' )
def changeDate = context.expand( '${#TestCase#ChangeDate}' )
def timeGap = context.expand( '${#TestCase#TimeGap}' )
def long millies =timeGap.toLong()
def turnaroundTime = context.expand( '${#TestCase#TurnaroundTime}' )
def tatNet = context.expand( '${#TestCase#TatNet}' )
def tatTotal = context.expand( '${#TestCase#TatTotal}' )
def long minutes1 = tatTotal.toLong()
def long tatTotalmillies = minutes1 * 60 * 1000;
def long tatNetmillies = minutes1 * 60 * 1000;
def businessDays = context.expand( '${#TestCase#BusinessDays}' )
def dateDiffAfterCal = context.expand( '${#TestCase#DateDiffAfterCal}' )
def milliesFromDate = context.expand( '${#TestCase#MilliesFromDate}' )


def FinalTATCal = businessDays + " Days " + milliesFromDate
log.info (" FinalTATCal: " + FinalTATCal)
testRunner.testCase.setPropertyValue( "FinalTATCal", FinalTATCal.toString());

//getWorkingDaysBetweenTwoDates( requestedTime,endDate)

getDurationBreakdown(millies)

getDurationBreakdownMinutes(tatTotalmillies)
getDurationBreakdownMinutes1(tatNetmillies)


def String getDurationBreakdown(long millies)
    {
        if(millies < 0)
        {
            throw new IllegalArgumentException("Duration must be greater than zero!");
        }

        long days = TimeUnit.MILLISECONDS.toDays(millies);
        millies -= TimeUnit.DAYS.toMillis(days);
        long hours = TimeUnit.MILLISECONDS.toHours(millies);
        millies -= TimeUnit.HOURS.toMillis(hours);
        long minutes = TimeUnit.MILLISECONDS.toMinutes(millies);
        millies -= TimeUnit.MINUTES.toMillis(minutes);
        long seconds = TimeUnit.MILLISECONDS.toSeconds(millies);

        StringBuilder sb = new StringBuilder(64);
   	   sb.append(days);
        sb.append(" Days ");
        sb.append(hours);
        sb.append(" Hours ");
      

        if (minutes==0 && seconds>0){
        	 minutes=minutes+1
        	 sb.append(minutes);
        	 sb.append(" Minutes ");
        	 seconds=0
        	 sb.append(seconds);
           sb.append(" Seconds");
        }
       else if (minutes>0 && seconds>0 && seconds<=30){
	      sb.append(minutes);
        	 sb.append(" Minutes ");
        	 seconds=0
        	 sb.append(seconds);
           sb.append(" Seconds");
        }
        else if (minutes>0 && seconds>30){
        	minutes=minutes+1
        	 sb.append(minutes);
        	 sb.append(" Minutes ");
        	 seconds=0
        	 sb.append(seconds);
           sb.append(" Seconds");
        	}
              
log.info(sb.toString())
       testRunner.testCase.setPropertyValue( "TatfromRestTimegap", sb.toString());
    }

def String getDurationBreakdownMinutes(long tatTotalmillies)
    {
        if(tatTotalmillies < 0)
        {
            throw new IllegalArgumentException("Duration must be greater than zero!");
        }

        long days = TimeUnit.MILLISECONDS.toDays(tatTotalmillies);
        tatTotalmillies -= TimeUnit.DAYS.toMillis(days);
        long hours = TimeUnit.MILLISECONDS.toHours(tatTotalmillies);
        tatTotalmillies -= TimeUnit.HOURS.toMillis(hours);
        long minutes = TimeUnit.MILLISECONDS.toMinutes(tatTotalmillies);
        tatTotalmillies -= TimeUnit.MINUTES.toMillis(minutes);
        long seconds = TimeUnit.MILLISECONDS.toSeconds(tatTotalmillies);

        StringBuilder sb = new StringBuilder(64);
        sb.append(days);
        sb.append(" Days ");
        sb.append(hours);
        sb.append(" Hours ");
        sb.append(minutes);
        sb.append(" Minutes "); 
        sb.append(seconds);
        sb.append(" Seconds");
        
        log.info(sb.toString())
        testRunner.testCase.setPropertyValue( "TatfromTatTotal", sb.toString());
    }

def String getDurationBreakdownMinutes1(long tatNetmillies)
    {
        if(tatNetmillies < 0)
        {
            throw new IllegalArgumentException("Duration must be greater than zero!");
        }

        long days = TimeUnit.MILLISECONDS.toDays(tatNetmillies);
        tatNetmillies -= TimeUnit.DAYS.toMillis(days);
        long hours = TimeUnit.MILLISECONDS.toHours(tatNetmillies);
        tatNetmillies -= TimeUnit.HOURS.toMillis(hours);
        long minutes = TimeUnit.MILLISECONDS.toMinutes(tatNetmillies);
        tatNetmillies -= TimeUnit.MINUTES.toMillis(minutes);
        long seconds = TimeUnit.MILLISECONDS.toSeconds(tatNetmillies);

        StringBuilder sb = new StringBuilder(64);
        sb.append(days);
        sb.append(" Days ");
        sb.append(hours);
        sb.append(" Hours ");
        sb.append(minutes);
        sb.append(" Minutes "); 
        sb.append(seconds);
        sb.append(" Seconds");
        
        log.info(sb.toString())
        testRunner.testCase.setPropertyValue( "tatNetmillies", sb.toString());
    }


    ]]></script></con:config></con:testStep><con:testStep type="groovy" name="Assertion For TatTotal and TatNet1" id="950b172d-e5ac-490d-80e0-daf5352f8761" disabled="true"><con:settings/><con:config><script>def tatfromTatTotal = context.expand( '${#TestCase#TatfromTatTotal}' )
def tatfromRestTimegap = context.expand( '${#TestCase#TatfromRestTimegap}' )
def tatNetmillies = context.expand( '${#TestCase#tatNetmillies}' )
def finalTATCal = context.expand( '${#TestCase#FinalTATCal}' )




assert tatfromTatTotal==finalTATCal
assert tatNetmillies==finalTATCal</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script-FormatRequestedDate" id="c4288799-0b77-4160-9a9b-e0301e839573" disabled="true"><con:settings/><con:config><script>import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.text.DateFormat;
import java.util.Date;
import java.util.TimeZone;


def requestedTime = context.expand( '${#TestCase#requestedTime}' )
log.info requestedTime

String string = requestedTime;
String defaultTimezone = TimeZone.getDefault().getID();
SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ");
SimpleDateFormat output = new SimpleDateFormat("yyyy-MM-dd");
//Date d = sdf.parse(time);

Date date = sdf.parse(string.replaceAll("Z", "+0000"));
String nTime = output.format(date);
log.info("string: " + string);
log.info("date: " + date);
log.info("nTime: " + nTime);
testRunner.testCase.setPropertyValue( "FormatedRequestedDate", nTime.toString());</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script- FormatChangeDate" id="00f6bc30-bd2b-4f88-b113-1e2a0532b342" disabled="true"><con:settings/><con:config><script>import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.text.DateFormat;
import java.util.Date;
import java.util.TimeZone;
def changeDate = context.expand( '${#TestCase#ChangeDate}' )

String string = changeDate;
//String defaultTimezone = TimeZone.getDefault().getID();
SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ");
SimpleDateFormat output = new SimpleDateFormat("yyyy-MM-dd");
//Date d = sdf.parse(time);

Date date = sdf.parse(string.replaceAll("Z", "+0000"));
String nTime = output.format(date);
log.info("string: " + string);
log.info("date: " + date);
log.info("nTime: " + nTime);
testRunner.testCase.setPropertyValue( "FormatedChangeDate", nTime.toString());</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script 52" id="73577e1e-e018-476f-a38d-00ed1f220133" disabled="true"><con:settings/><con:config><script>import java.text.SimpleDateFormat;
import java.util.Date;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.text.DateFormat;
import java.util.TimeZone;
import java.util.concurrent.TimeUnit;

def changeDate = context.expand( '${#TestCase#ChangeDate}' )
def requestedTime = context.expand( '${#TestCase#requestedTime}' )
log.info requestedTime
log.info changeDate

SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ");
SimpleDateFormat output = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS");

//requested Date
Date date = sdf.parse(requestedTime.replaceAll("Z", "+0000"));
String nTime = output.format(date);
myDate = Date.parse("yyyy-MM-dd'T'HH:mm:ss.SSS", nTime) ;
//log.info("string: " + string);
log.info("date: " + nTime);

//change Date
Date date1 = sdf.parse(changeDate.replaceAll("Z", "+0000"));
log.info("date1: " + date1);

String nTime1 = output.format(date1);
myDate1 = Date.parse("yyyy-MM-dd'T'HH:mm:ss.SSS", nTime1) ;
log.info("myDate1: " + myDate1);
log.info("date1: " + nTime1);

getTimeDiff(date,date1)

def getTimeDiff(Date dateOne, Date dateTwo) {
            String diff = "";
            long timeDiff = Math.abs(dateOne.getTime() - dateTwo.getTime());
            log.info ("TimeDiff : " + timeDiff);
            testRunner.testCase.setPropertyValue( "TimeDiffMilliesFromDate", timeDiff.toString())
              return timeDiff;
    }

</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script 51" id="fc42d46d-d7f7-4154-a70e-bae90e2b6a55" disabled="true"><con:settings/><con:config><script><![CDATA[import java.text.SimpleDateFormat;
import java.util.Date;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.text.DateFormat;
import java.util.TimeZone;
import java.util.concurrent.TimeUnit;

def timeDiffMilliesFromDate = context.expand( '${#TestCase#TimeDiffMilliesFromDate}' )

Long timeDiffMilliesFromDate1 = Long.valueOf(timeDiffMilliesFromDate);

getDurationBreakdown(timeDiffMilliesFromDate1)


def String getDurationBreakdown(long millies)
    {
        if(millies < 0)
        {
            throw new IllegalArgumentException("Duration must be greater than zero!");
        }

        long days = TimeUnit.MILLISECONDS.toDays(millies);
        millies -= TimeUnit.DAYS.toMillis(days);
        long hours = TimeUnit.MILLISECONDS.toHours(millies);
        millies -= TimeUnit.HOURS.toMillis(hours);
        long minutes = TimeUnit.MILLISECONDS.toMinutes(millies);
        millies -= TimeUnit.MINUTES.toMillis(minutes);
        long seconds = TimeUnit.MILLISECONDS.toSeconds(millies);

        StringBuilder sb = new StringBuilder(64);

      
        sb.append(hours);
        sb.append(" Hours ");
       if (minutes==0 && seconds>0){
        	 minutes=minutes+1
        	 sb.append(minutes);
        	 sb.append(" Minutes ");
        	 seconds=0
        	 sb.append(seconds);
           sb.append(" Seconds");
        }
       else if (minutes>0 && seconds>0 && seconds<=30){
       	minutes=minutes
	      sb.append(minutes);
        	 sb.append(" Minutes ");
        	 seconds=0
        	 sb.append(seconds);
           sb.append(" Seconds");
        }
        else if (minutes>0 && seconds>30){
        	minutes=minutes+1
        	 sb.append(minutes);
        	 sb.append(" Minutes ");
        	 seconds=0
        	 sb.append(seconds);
           sb.append(" Seconds");
        	}
            
log.info(sb.toString())
       testRunner.testCase.setPropertyValue( "MilliesFromDate", sb.toString());
    }]]></script></con:config></con:testStep><con:testStep type="groovy" name="BusinessDay Calculation" id="ef7650a6-5eb1-4eb7-97fd-753c465cb238" disabled="true"><con:settings/><con:config><script>import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.text.DateFormat;
import java.util.Date;
import java.util.TimeZone;
import java.util.*
import org.joda.time.DateTime;

def changeDate = context.expand( '${#TestCase#ChangeDate}' )
def formatedRequestedDate = context.expand( '${#TestCase#FormatedRequestedDate}' )
def formatedChangeDate = context.expand( '${#TestCase#FormatedChangeDate}' )

SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd");
String dateInString = formatedRequestedDate
log.info dateInString
Date date = formatter.parse(dateInString);
log.info(date);
log.info(formatter.format(date));
def projectContext = context.testCase.testSuite.project.context
projectContext.date = date


String dateInString1 = formatedChangeDate		
		
Date date1 = formatter.parse(dateInString1);
log.info(date1);
log.info(formatter.format(date1));

projectContext.date1 = date1

def date3 = projectContext.date1
def date2 = projectContext.date


days(date2,date3)




//Business Days Calculation

 long days(Date start, Date end){
    //Ignore argument check

    Calendar c1 = Calendar.getInstance();
    c1.setTime(start);
    int w1 = c1.get(Calendar.DAY_OF_WEEK);
    c1.add(Calendar.DAY_OF_WEEK, -w1);

    Calendar c2 = Calendar.getInstance();
    c2.setTime(end);
    int w2 = c2.get(Calendar.DAY_OF_WEEK);
    c2.add(Calendar.DAY_OF_WEEK, -w2);

    //end Saturday to start Saturday 
    long days = (c2.getTimeInMillis()-c1.getTimeInMillis())/(1000*60*60*24);
    long daysWithoutWeekendDays = days-(days*2/7);

    // Adjust days to add on (w2) and days to subtract (w1) so that Saturday
    // and Sunday are not included
    if (w1 == Calendar.SUNDAY &amp;&amp; w2 != Calendar.SATURDAY) {
        w1 = Calendar.MONDAY;
    } else if (w1 == Calendar.SATURDAY &amp;&amp; w2 != Calendar.SUNDAY) {
        w1 = Calendar.FRIDAY;
    } 

    if (w2 == Calendar.SUNDAY) {
        w2 = Calendar.MONDAY;
    } else if (w2 == Calendar.SATURDAY) {
        w2 = Calendar.FRIDAY;
    }
    testRunner.testCase.setPropertyValue( "BusinessDays", (daysWithoutWeekendDays-w1+w2-1).toString());
    return daysWithoutWeekendDays-w1+w2-1;
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script-TAT Calculations" id="cf3d1fa5-300f-4923-ac03-139f205281c4" disabled="true"><con:settings/><con:config><script><![CDATA[import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.TimeZone;
import java.util.concurrent.TimeUnit;
def quoteID = context.expand( '${#TestCase#QuoteID}' )
def timeZone = context.expand( '${#TestCase#TimeZone}' )
def requestedTime = context.expand( '${#TestCase#requestedTime}' )
def changeDate = context.expand( '${#TestCase#ChangeDate}' )
def timeGap = context.expand( '${#TestCase#TimeGap}' )
//def long millies =timeGap.toLong()
def turnaroundTime = context.expand( '${#TestCase#TurnaroundTime}' )
def tatNet = context.expand( '${#TestCase#TatNet}' )
def tatTotal = context.expand( '${#TestCase#TatTotal}' )
def long minutes1 = tatTotal.toLong()
def long tatTotalmillies = minutes1 * 60 * 1000;
def long tatNetmillies = minutes1 * 60 * 1000;
def businessDays = context.expand( '${#TestCase#BusinessDays}' )
def dateDiffAfterCal = context.expand( '${#TestCase#DateDiffAfterCal}' )
def milliesFromDate = context.expand( '${#TestCase#MilliesFromDate}' )


def FinalTATCal = businessDays + " Days " + milliesFromDate
log.info (" FinalTATCal: " + FinalTATCal)
testRunner.testCase.setPropertyValue( "FinalTATCal", FinalTATCal.toString());

//getWorkingDaysBetweenTwoDates( requestedTime,endDate)

//getDurationBreakdown(millies)

getDurationBreakdownMinutes(tatTotalmillies)
getDurationBreakdownMinutes1(tatNetmillies)


def String getDurationBreakdown(long millies)
    {
        if(millies < 0)
        {
            throw new IllegalArgumentException("Duration must be greater than zero!");
        }

        long days = TimeUnit.MILLISECONDS.toDays(millies);
        millies -= TimeUnit.DAYS.toMillis(days);
        long hours = TimeUnit.MILLISECONDS.toHours(millies);
        millies -= TimeUnit.HOURS.toMillis(hours);
        long minutes = TimeUnit.MILLISECONDS.toMinutes(millies);
        millies -= TimeUnit.MINUTES.toMillis(minutes);
        long seconds = TimeUnit.MILLISECONDS.toSeconds(millies);

        StringBuilder sb = new StringBuilder(64);
   	   sb.append(days);
        sb.append(" Days ");
        sb.append(hours);
        sb.append(" Hours ");
      

        if (minutes==0 && seconds>0){
        	 minutes=minutes+1
        	 sb.append(minutes);
        	 sb.append(" Minutes ");
        	 seconds=0
        	 sb.append(seconds);
           sb.append(" Seconds");
        }
       else if (minutes>0 && seconds>0 && seconds<=30){
	      sb.append(minutes);
        	 sb.append(" Minutes ");
        	 seconds=0
        	 sb.append(seconds);
           sb.append(" Seconds");
        }
        else if (minutes>0 && seconds>30){
        	minutes=minutes+1
        	 sb.append(minutes);
        	 sb.append(" Minutes ");
        	 seconds=0
        	 sb.append(seconds);
           sb.append(" Seconds");
        	}
              
log.info(sb.toString())
       testRunner.testCase.setPropertyValue( "TatfromRestTimegap", sb.toString());
    }

def String getDurationBreakdownMinutes(long tatTotalmillies)
    {
        if(tatTotalmillies < 0)
        {
            throw new IllegalArgumentException("Duration must be greater than zero!");
        }

        long days = TimeUnit.MILLISECONDS.toDays(tatTotalmillies);
        tatTotalmillies -= TimeUnit.DAYS.toMillis(days);
        long hours = TimeUnit.MILLISECONDS.toHours(tatTotalmillies);
        tatTotalmillies -= TimeUnit.HOURS.toMillis(hours);
        long minutes = TimeUnit.MILLISECONDS.toMinutes(tatTotalmillies);
        tatTotalmillies -= TimeUnit.MINUTES.toMillis(minutes);
        long seconds = TimeUnit.MILLISECONDS.toSeconds(tatTotalmillies);

        StringBuilder sb = new StringBuilder(64);
        sb.append(days);
        sb.append(" Days ");
        sb.append(hours);
        sb.append(" Hours ");
        sb.append(minutes);
        sb.append(" Minutes "); 
        sb.append(seconds);
        sb.append(" Seconds");
        
        log.info(sb.toString())
        testRunner.testCase.setPropertyValue( "TatfromTatTotal", sb.toString());
    }

def String getDurationBreakdownMinutes1(long tatNetmillies)
    {
        if(tatNetmillies < 0)
        {
            throw new IllegalArgumentException("Duration must be greater than zero!");
        }

        long days = TimeUnit.MILLISECONDS.toDays(tatNetmillies);
        tatNetmillies -= TimeUnit.DAYS.toMillis(days);
        long hours = TimeUnit.MILLISECONDS.toHours(tatNetmillies);
        tatNetmillies -= TimeUnit.HOURS.toMillis(hours);
        long minutes = TimeUnit.MILLISECONDS.toMinutes(tatNetmillies);
        tatNetmillies -= TimeUnit.MINUTES.toMillis(minutes);
        long seconds = TimeUnit.MILLISECONDS.toSeconds(tatNetmillies);

        StringBuilder sb = new StringBuilder(64);
        sb.append(days);
        sb.append(" Days ");
        sb.append(hours);
        sb.append(" Hours ");
        sb.append(minutes);
        sb.append(" Minutes "); 
        sb.append(seconds);
        sb.append(" Seconds");
        
        log.info(sb.toString())
        testRunner.testCase.setPropertyValue( "tatNetmillies", sb.toString());
    }


    ]]></script></con:config></con:testStep><con:testStep type="groovy" name="Assertion For TatTotal and TatNet" id="ca3de95d-7c77-4a23-b513-1eb72bfafc0d" disabled="true"><con:settings/><con:config><script>def tatfromTatTotal = context.expand( '${#TestCase#TatfromTatTotal}' )
def tatNetmillies = context.expand( '${#TestCase#tatNetmillies}' )
def finalTATCal = context.expand( '${#TestCase#FinalTATCal}' )




assert tatfromTatTotal==finalTATCal
assert tatNetmillies==finalTATCal</script></con:config></con:testStep><con:testStep type="delay" name="Delay 3" id="c15767fa-eeea-4b2a-8a9f-410b8ef926fe"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:properties><con:property><con:name>amount</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>amount2</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>ChangeDate</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2016-06-02T12:51:33.379Z</con:value></con:property><con:property><con:name>completedDate</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>coreLookUpKey</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>coreLookUpKEY2</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>CreatedOnDate</con:name><con:value>2016-05-30T00:00:00.000Z</con:value></con:property><con:property><con:name>currency</con:name><con:value>GBP</con:value></con:property><con:property><con:name>currencyDisplayName1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>currencyDisplayName2</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>currencyName1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>currencyName2</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>FormatedChangeDate</con:name><con:value>2016-06-02</con:value></con:property><con:property><con:name>FormatedRequestedDate</con:name><con:value>2016-02-17</con:value></con:property><con:property><con:name>FormatedTime</con:name><con:value/></con:property><con:property><con:name>QuoteID</con:name><con:value>null</con:value></con:property><con:property><con:name>QuoteName</con:name><con:value>Q-APOS-ADT FIRE &amp; SECURITY PLC_GB7595878-ENTERPRISE-FY17Q2-1-V1</con:value></con:property><con:property><con:name>quoteNumber</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rate</con:name><con:value>1</con:value></con:property><con:property><con:name>requestedTime</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2016-02-17T07:59:15.327Z</con:value></con:property><con:property><con:name>TatfromRestTimegap</con:name><con:value>3 Days 7 Hours 56 Minutes 0 Seconds</con:value></con:property><con:property><con:name>TatfromTatTotal</con:name><con:value>3 Days 7 Hours 56 Minutes 0 Seconds</con:value></con:property><con:property><con:name>TatNet</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">4796</con:value></con:property><con:property><con:name>tatNetmillies</con:name><con:value>3 Days 7 Hours 56 Minutes 0 Seconds</con:value></con:property><con:property><con:name>TatTotal</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">4796</con:value></con:property><con:property><con:name>TimeGap</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">287736205</con:value></con:property><con:property><con:name>TimeZone</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>TimeZoneKey</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>TurnaroundTime</con:name><con:value>1597</con:value></con:property><con:property><con:name>QuoteCount</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>QuoteIDs</con:name><con:value>[574c11d0e4b06dde98288646, 574c11d0e4b06dde98288646, 574c11d0e4b06dde98288646, 574c11d0e4b06dde98288646, 574c11d0e4b06dde98288646, 574c11d0e4b06dde98288646, 574c11d0e4b06dde98288646, 574c11d0e4b06dde98288646, 574c11d0e4b06dde98288646, 574c11d0e4b06dde98288646, 574c11d0e4b06dde98288646, 574c11d0e4b06dde98288646, 574c11d0e4b06dde98288646]</con:value></con:property><con:property><con:name>i</con:name><con:value>14</con:value></con:property><con:property><con:name>flag</con:name><con:value>false</con:value></con:property><con:property><con:name>TimeDiffMilliesFromDate</con:name><con:value>9175637791</con:value></con:property><con:property><con:name>MilliesFromDate</con:name><con:value>4 Hours 47 Minutes 0 Seconds</con:value></con:property><con:property><con:name>BusinessDays</con:name><con:value>75</con:value></con:property><con:property><con:name>FinalTATCal</con:name><con:value>75 Days 4 Hours 47 Minutes 0 Seconds</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>565b2dc4-7449-4b6f-81e5-769876332c1d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f7082c85-4cad-4583-8916-c4ddebc80bdf</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a9cb2192-c985-42b1-aa03-c50fb66513c5</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>4ac99e45-c8c2-4ccc-a51b-76cb2e646806</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c7fdb326-e063-4c74-9aad-0acf499d4dd7</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>75db7e36-b76d-4d6b-bebb-a7f8597414ac</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>75a66777-ac12-46da-b588-95f8e4a2fbe1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b3c9e5f4-2c4c-4317-8690-671eb1d10547</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>36de390e-18b9-4a86-8bd5-ed217f0f77e6</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b39da542-5b76-4092-a9e3-218fd95a7312</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>45a71677-842e-4025-96f3-f8b1d61d32e2</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e6af9544-c8ae-40d3-a064-77deeb7a0673</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>064218e9-140f-4057-8c20-770e7de29981</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>bf79a040-59cc-48d2-9cc2-96c9b65264af</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>7ab39cc2-1e19-4bf0-88c1-52c000d2d1d7</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e1cd82b5-faff-45d6-9cee-ef77c68f20b6</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>33e4b9ee-1baa-45ea-8c48-d69fca3824cd</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f727a50a-c5f3-49b2-8602-016e3a319cca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a8248af0-95b9-4e45-b34e-86a2369cc46d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f729b63a-e97a-40fc-b0fd-14c6ef737629</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>7c4f6054-342f-4270-bca8-475e54a2f29d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d72f04bf-183c-4e28-b6c7-8041c7beecca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>df9f9fd2-b2e4-4f10-842b-eac8f4b1d2cf</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c15767fa-eeea-4b2a-8a9f-410b8ef926fe</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>4108387f-54ba-40f8-ad5c-9876841b75cf</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>49933284-71a6-4711-8f30-cbe8404b0200</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase id="1500b89c-c3c7-43d0-ad17-4368d5ae202b" discardOkResults="true" failOnError="true" failTestCaseOnErrors="true" keepSession="false" name="Tasks_OnHold-Completed_Requested during weekday, Completed during weekday of the same week" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="Find Cookie" id="4e865e2a-5a4f-4e9c-9d8f-734c6fdfe3f9"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>c0ce29f2-7cb0-4efc-a1f0-d98a032504a6</con:targetTestCase><con:properties><con:property><con:name>qaDevCookies</con:name><con:value>[avalon.sid=s%3A54cb1cf0e4b004ec636c4d71.OKyf7Hynz6NWePZzjLl5L9azOOkbtfD5ExcpJE%2FUL48</con:value></con:property></con:properties><con:returnProperties><con:entry>qaDevCookies</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script -CreatedOnDate" id="e5408811-7009-4f9a-962c-55e2ca1385c6"><con:settings/><con:config><script>import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.text.DateFormat;
import java.util.Date;
import java.util.TimeZone;
import java.util.*
import org.joda.time.DateTime;

DateTime dateTime = new DateTime();
long firstDayOfWeekTimestamp = dateTime.withDayOfWeek(1).getMillis();
log.info firstDayOfWeekTimestamp
// Get calendar set to current date and time
Calendar c = Calendar.getInstance();
 	    c.set(Calendar.HOUR_OF_DAY, 0);
         c.set(Calendar.MINUTE, 0);
         c.set(Calendar.SECOND, 0);
         c.set(Calendar.MILLISECOND, 0);
        
       
// Set the calendar to SUNDAY of the current week
c.set(Calendar.DAY_OF_WEEK, Calendar.MONDAY);

// Print dates of the current week starting on SUNDAY
DateFormat df = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ");
for (int i = 0; i &lt; 1; i++) {
    log.info(df.format(c.getTime()));
 DateFormat df1 = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS");
 log.info(df1.format(c.getTime()));
    //c.add(Calendar.DATE, 1);
    testRunner.testCase.setPropertyValue( "CreatedOnDate", (df1.format(c.getTime()).toString()+"Z"));
}</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script-FIndQuotesRequest" id="022d55fa-992e-414d-b548-61ea335655d6" disabled="true"><con:settings/><con:config><script>import groovy.json.*
def serverName = context.expand( '${#TestSuite#serverName}' )
def tenant = context.expand( '${#TestSuite#tenant}' )
def createdOnDate = context.expand( '${#TestCase#CreatedOnDate}' )

if (tenant=="dell" &amp;&amp; serverName =="pe-internal.dev")
{

                def jsonText='''{"filter":{"flows.quoteStages.state.name":"requested","flows.quoteStages.transitions":{"$elemMatch":{"changeDate":{"$gte":"${#TestCase#CreatedOnDate}"},"toState":"requested"}},"isBase":false,"isDraft":false},"params":{"sort":{"systemProperties.createdOn":1},"start":0,"limit":50,"columns":["_id","type","systemProperties","displayName","requestReason","flows.quoteStages.state","flows.quoteStages.target","relationships.requestedBy","relationships.assignee","expirationDate","flows.quoteStages.transitions","dueDate","amount.normalizedAmount","relationships.customer","tags","flows.quoteStages.transitions","flows.quoteStages.transitions"]},"origin":{"component":"AvalonGridDuplo","url":"#tab/app.quotes/vq=STATUS%3A%20%22Requested%22%20REQUEST-DATE%${#TestCase#CreatedOnDate}%"},"inversesummary":false}'''
}
else
{
                def jsonText='''{"filter":{"flows.quoteStages.state.name":"requested","systemProperties.createdOn":{"$gt":"${#TestCase#CreatedOnDate}"},"isBase":false,"isDraft":false},"params":{"sort":{"dueDate":1},"start":0,"limit":50,"columns":["_id","type","systemProperties","displayName","requestReason","flows.quoteStages.state","flows.quoteStages.target","relationships.requestedBy","relationships.assignee","expirationDate","flows.quoteStages.transitions","dueDate","amount.normalizedAmount","relationships.customer","tags","flows.quoteStages.transitions","flows.quoteStages.transitions"]},"origin":{"component":"AvalonGridDuplo","url":"#tab/app.quotes/vq=STATUS%3A%20%22Requested%7CStaged%7COn%20Hold%22%20CREATED-ON%3A%20%22%3E04-24-2016%22"},"inversesummary":false}'''
}




//{"filter":{"flows.quoteStages.state.name":"requested","systemProperties.createdOn":{"$gt":"${#TestCase#CreatedOnDate}"},"isBase":false,"isDraft":false},"params":{"sort":{"systemProperties.createdOn":1},"start":0,"limit":50,"columns":["_id","type","systemProperties","displayName","requestReason","flows.quoteStages.state","flows.quoteStages.target","relationships.requestedBy","relationships.assignee","expirationDate","flows.quoteStages.transitions","dueDate","amount.normalizedAmount","relationships.customer","tags","flows.quoteStages.transitions","flows.quoteStages.transitions"]},"origin":{"component":"AvalonGridDuplo","url":"#tab/app.quotes/vq=STATUS%3A%20%22Requested%22%20CREATED-ON%3A%20%22%3E04-14-2016%22"},"inversesummary":false}</script></con:config></con:testStep><con:testStep type="restrequest" name="FindTask" id="d6d604af-4369-4867-aea9-efa3eb079c51"><con:settings/><con:config service="FindTask" resourcePath="/rest/api/${#TestSuite#tenant}/app.tasks::find" methodName="App.tasks::find" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="FindTask" id="72d7ffb4-c9d1-4bee-8c95-65eb37ae1f09" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Cookie" value="${#TestSuite#Cookie}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://${#TestSuite#serverName}.ssi-cloud.com</con:endpoint><con:request>{"filter":{"tags":{"$nin":[{"$regex":"^TAT_TEST"},{"$regex":"^Functional_QA"}]},"flows.taskStatus.state.name":"open","systemProperties.createdOn":{"$gte":"${#TestCase#CreatedOnDate}"}},"params":{"sort":{"systemProperties.createdOn":1},"start":0,"limit":50,"columns":["_id","type","systemProperties","displayName","taskType","dueDate","flows.taskStatus.state","flows.taskStatus.target","priority","relationships.assignee","relationships.requestedBy","systemProperties.createdOn"]},"origin":{"component":"AvalonGridDuplo"},"inversesummary":false}</con:request><con:originalUri>https://pe-internal.dev.ssi-cloud.com/rest/api/dell/app.tasks::find</con:originalUri><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="Property Transfer-TaskID" id="0310d6cb-16ac-4566-96af-171f72a1d5bf"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false" disabled="true"><con:name>TaskID</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>FindTask</con:sourceStep><con:sourcePath>declare namespace ns1='https://pe-internal.dev.ssi-cloud.com/rest/api/dell/app.tasks::find';
//ns1:Response[1]/ns1:data[1]/ns1:app.task[1]/ns1:e[1]/ns1:_id[1]</con:sourcePath><con:targetType>TaskID</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:targetPath/><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false" disabled="true"><con:name>TaskDisplayName</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>FindTask</con:sourceStep><con:sourcePath>declare namespace ns1='https://pe-internal.dev.ssi-cloud.com/rest/api/dell/app.tasks::find';
//ns1:Response[1]/ns1:data[1]/ns1:app.task[1]/ns1:e[1]/ns1:displayName[1]</con:sourcePath><con:targetType>TaskDisplayName</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TaskCount</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>FindTask</con:sourceStep><con:sourcePath>declare namespace ns1='https://pe-internal.dev.ssi-cloud.com/rest/api/dell/app.tasks::find';
//ns1:Response[1]/ns1:recordCount[1]/ns1:app.task[1]</con:sourcePath><con:targetType>TaskCount</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="TaskID" id="6311ae5d-b344-4304-ba88-10a6677de7a6"><con:settings/><con:config><script>import groovy.json.JsonSlurper
import com.eviware.soapui.support.XmlHolder
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
def holder = groovyUtils.getXmlHolder(testRunner.testCase.testSteps["FindTask"].testRequest.response.getContentAsXml());
def taskCount = context.expand( '${#TestCase#TaskCount}' )


log.info taskCount


def TaskIDs=[]

                def i=1
                def j=1
                for(node in holder["//ns1:Response[1]/ns1:data[1]/ns1:app.task[1]/ns1:e[${i}]"])
                {              
             	
                                id = holder.getNodeValue("ns1:Response[1]/ns1:data[1]/ns1:app.task[1]/ns1:e[1]/ns1:_id[1]" )
                                TaskIDs.add(id)                              
                                i=i+1
                                log.info i
                                if(i==taskCount.toInteger())
                                break;
                }
     

testRunner.testCase.setPropertyValue( "TaskIDs", TaskIDs.toString())
testRunner.testCase.setPropertyValue( "taskCount", i.toString())
log.info TaskIDs.toString()
def count=0
testRunner.testCase.setPropertyValue( "i", count.toString() )
def flag=false
testRunner.testCase.setPropertyValue( "flag",flag.toString())

</script></con:config></con:testStep><con:testStep type="groovy" name="Counter" id="d58caf77-d80f-4ec6-89af-7d31ebfeb9d1"><con:settings/><con:config><script>def i = context.expand( '${#TestCase#i}' )
log.info i
def taskID = context.expand( '${#TestCase#TaskIDs#$[${#TestCase#i}]}' )

log.info taskID
testRunner.testCase.setPropertyValue( "taskID", taskID.toString() )
</script></con:config></con:testStep><con:testStep type="restrequest" name="TaskDetails" id="5084574f-d7a8-48e7-8be3-1039178f71ca"><con:settings/><con:config service="TaskDetails" resourcePath="/rest/api/${#TestSuite#tenant}/app.tasks::find" methodName="App.tasks::find" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="TaskDetails" id="a283c0b1-fe82-48ae-a333-6e53781e3cc8" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Cookie" value="${#TestSuite#Cookie}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://${#TestSuite#serverName}.ssi-cloud.com</con:endpoint><con:request>{"inversesummary":true,"filter":{"_id":"${#TestCase#TaskID}"},"params":{"start":0,"limit":1},"origin":{"component":"AvalonCollection"}}</con:request><con:originalUri>https://pe-internal.dev.ssi-cloud.com/rest/api/dell/app.tasks::find</con:originalUri><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters><entry key="inversesummary" value="true" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>inversesummary</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="Property Transfer-TimeZone" id="a7a4514c-8022-43f4-bddb-7eb7e9e57eb4"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="true" transferChildNodes="false"><con:name>TimeZone</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>TaskDetails</con:sourceStep><con:sourcePath>declare namespace ns1='https://pe-internal.dev.ssi-cloud.com/rest/api/dell/app.tasks::find';
//ns1:Response[1]/ns1:data[1]/ns1:app.task[1]/ns1:e[1]/ns1:extensions[1]/ns1:master[1]/ns1:requestedTimeZone[1]/ns1:value[1]/ns1:displayName[1]</con:sourcePath><con:targetType>TimeZone</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:targetPath/><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="Counter++" id="2eb660cf-68b4-4f57-b674-598d617e4de3"><con:settings/><con:config><script>import groovy.json.JsonSlurper
import com.eviware.soapui.support.XmlHolder
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
def holder = groovyUtils.getXmlHolder(testRunner.testCase.testSteps["TaskDetails"].testRequest.response.getContentAsXml());
def flag = context.expand( '${#TestCase#flag}' )                                
//def timeZone = context.expand( '${#TestCase#TimeZone}' )




                          timeZone=holder.getNodeValue("//ns1:Response[1]/ns1:data[1]/ns1:app.task[1]/ns1:e[1]/ns1:extensions[1]/ns1:master[1]/ns1:requestedTimeZone[1]/ns1:value[1]/ns1:displayName[1]")
                                             
                                
                                log.info ("Timezone: " + timeZone)
                          
                        
                                if(timeZone != null )
                                {
                            
                                flag==true
                                testRunner.testCase.setPropertyValue( "flag","true")                   
                                }
                                else
                                {
                                	testRunner.testCase.setPropertyValue( "flag","false")   
                                }
                                log.info flag
               
def i = context.expand( '${#TestCase#i}' )
log.info i
def c = i.toInteger()+1
testRunner.testCase.setPropertyValue( "i", c.toString() )
</script></con:config></con:testStep><con:testStep type="groovy" name="Counter Check" id="3c2d1072-812b-46ab-99d9-29b11a0ea0f3"><con:settings/><con:config><script>def i = context.expand( '${#TestCase#i}' )

def taskCount = context.expand( '${#TestCase#TaskCount}' )

def flag = context.expand( '${#TestCase#flag}' )
log.info i
log.info taskCount
log.info flag
if((i.toInteger()&lt;taskCount.toInteger())&amp;&amp; (flag=="false"))
{
   testRunner.gotoStepByName( "Counter" )
}
else if ((i.toInteger()==taskCount.toInteger())&amp;&amp; (flag=="false"))
{
	testRunner.gotoStepByName( "Delay 3" );
	log.info ("Test Case Fail : DATA NOT FOUND")
	def DATA_NOT_FOUND="DATA NOT FOUND"
	return DATA_NOT_FOUND
	
    
}
else 
{
    testRunner.gotoStepByName( "Delay" )
}</script></con:config></con:testStep><con:testStep type="delay" name="Delay" id="80622710-9114-431b-9247-12e01285f06a"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:testStep type="restrequest" name="Task-PlaceOnHold" id="e8f28702-0bc9-4036-9269-40cb7b269127"><con:settings/><con:config service="Task-PlaceOnHold" resourcePath="/rest/api/${#TestSuite#tenant}/app.tasks/${#TestCase#TaskID}::holdTask" methodName="5491793ee4b002d9d76bb516::holdTask" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Task-PlaceOnHold" id="8c9da7f6-f8da-4a6f-b154-6070a2bcc949" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Cookie" value="${#TestSuite#Cookie}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://${#TestSuite#serverName}.ssi-cloud.com</con:endpoint><con:request>{"notes":[],"_id":"","type":"app.task.hold.input","holdReason":{"displayName":"Review","name":"review","type":"app.lookup","key":"51a67a6316a8afd0f000c6d1"},"inversesummary":true,"extinversesummary":true,"origin":{"url":"#detail/app.tasks/${#TestCase#TaskID}"}}</con:request><con:originalUri>https://sqa-internal.dev.ssi-cloud.com/rest/api/dell/app.tasks/57551c34e4b0d26080d90337::holdTask</con:originalUri><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters>
  <con:entry key="inversesummary" value="true"/>
  <con:entry key="extinversesummary" value="true"/>
</con:parameters><con:parameterOrder><con:entry>inversesummary</con:entry><con:entry>extinversesummary</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="Delay 1" id="abb9589a-6acc-43c5-be4a-6d0706076783"><con:settings/><con:config><delay>600000</delay></con:config></con:testStep><con:testStep type="restrequest" name="Task-ReleaseHold" id="b0781b13-9069-4920-b8e0-da5056f60acc"><con:settings/><con:config service="Task-ReleaseHold" resourcePath="/rest/api/${#TestSuite#tenant}/app.tasks/${#TestCase#TaskID}::taskReleaseHold" methodName="5491793ee4b002d9d76bb516::taskReleaseHold" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Task-ReleaseHold" id="0faf58a4-cc34-4d4a-8d0b-94c43ae8f405" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Cookie" value="${#TestSuite#Cookie}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://${#TestSuite#serverName}.ssi-cloud.com</con:endpoint><con:request>{"detail":{"_id":"${#TestCase#TaskID}","type":"app.task","displayName":"${#TestCase#TaskDisplayName}"},"selections":[],"inversesummary":true,"extinversesummary":true,"origin":{"url":"#detail/app.tasks/${#TestCase#TaskID}"}}</con:request><con:originalUri>https://sqa-internal.dev.ssi-cloud.com/rest/api/dell/app.tasks/57551c34e4b0d26080d90337::taskReleaseHold</con:originalUri><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters>
  <con:entry key="inversesummary" value="true"/>
  <con:entry key="extinversesummary" value="true"/>
</con:parameters><con:parameterOrder><con:entry>inversesummary</con:entry><con:entry>extinversesummary</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="Delay 2" id="38d5323c-6b32-4a56-8651-cdc8bb662d04"><con:settings/><con:config><delay>2000</delay></con:config></con:testStep><con:testStep type="restrequest" name="TaskDetails-afterReleaseHold" id="4c2d4d8f-dc57-4fb2-81af-883615f468e3"><con:settings/><con:config service="TaskDetails" resourcePath="/rest/api/${#TestSuite#tenant}/app.tasks::find" methodName="App.tasks::find" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="TaskDetails-afterReleaseHold" id="a283c0b1-fe82-48ae-a333-6e53781e3cc8" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Cookie" value="${#TestSuite#Cookie}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://${#TestSuite#serverName}.ssi-cloud.com</con:endpoint><con:request>{"inversesummary":true,"filter":{"_id":"${#TestCase#TaskID}"},"params":{"start":0,"limit":1},"origin":{"component":"AvalonCollection"}}</con:request><con:originalUri>https://pe-internal.dev.ssi-cloud.com/rest/api/dell/app.tasks::find</con:originalUri><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters><entry key="inversesummary" value="true" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>inversesummary</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="FindActivities" id="771256ad-a86d-4de0-a248-d94c2aec022a" disabled="true"><con:settings/><con:config service="FindActivities" resourcePath="/rest/api/dell/core.activities::getrhpactivities" methodName="Core.activities::getrhpactivities" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="FindActivities" id="ec32ed71-dac8-4f9f-8863-509201de0075" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Cookie" value="${#TestSuite#Cookie}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://${#TestSuite#serverName}.ssi-cloud.com</con:endpoint><con:request>{"params":{"sort":{"systemProperties.createdOn":-1},"start":0,"limit":50,"columns":["relatedObjects"]},"origin":{"component":"Duplo_TimelineStream","url":"#tab/core.activities"},"inversesummary":false,"type":"app.task","key":"${#TestCase#TaskID}","filter":{"crudBased":false},"configParams":{"includeNotes":true}}</con:request><con:originalUri>https://qa-internal.dev.ssi-cloud.com/rest/api/dell/core.activities::getrhpactivities</con:originalUri><con:credentials><con:username>maria.gomez@dell.com</con:username><con:password>passwordone</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="Property Transfer-CreatedOnDate" id="fba00aa2-cd2b-4bc0-b1af-dbead43829d4"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>CreatedOnDate</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>TaskDetails</con:sourceStep><con:sourcePath>declare namespace ns1='https://pe-internal.dev.ssi-cloud.com/rest/api/dell/app.tasks::find';
//ns1:Response[1]/ns1:data[1]/ns1:app.task[1]/ns1:e[1]/ns1:flows[1]/ns1:taskStatus[1]/ns1:transitions[1]/ns1:e[1]/ns1:changeDate[1]</con:sourcePath><con:targetType>CreatedOnDate</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:targetPath/><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>OnHoldTime</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>TaskDetails-afterReleaseHold</con:sourceStep><con:sourcePath>declare namespace ns1='https://pe-internal.dev.ssi-cloud.com/rest/api/dell/app.tasks::find';
//ns1:Response[1]/ns1:data[1]/ns1:app.task[1]/ns1:e[1]/ns1:flows[1]/ns1:taskStatus[1]/ns1:transitions[1]/ns1:e[2]/ns1:changeDate[1]</con:sourcePath><con:targetType>OnHoldTime</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>ReleaseHoldTime</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>TaskDetails-afterReleaseHold</con:sourceStep><con:sourcePath>declare namespace ns1='https://pe-internal.dev.ssi-cloud.com/rest/api/dell/app.tasks::find';
//ns1:Response[1]/ns1:data[1]/ns1:app.task[1]/ns1:e[1]/ns1:flows[1]/ns1:taskStatus[1]/ns1:transitions[1]/ns1:e[3]/ns1:changeDate[1]</con:sourcePath><con:targetType>ReleaseHoldTime</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="restrequest" name="CompleteTask" id="b0a8a51b-b278-49aa-b387-3e9377368c39"><con:settings/><con:config service="CompleteTask" resourcePath="/rest/api/${#TestSuite#tenant}/app.tasks/${#TestCase#TaskID}::completeTask" methodName="511a69f263165f8e0f05266e::completeTask" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CompleteTask" id="b101cbcc-5363-41ee-bc9f-5eb57ab80861" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Cookie" value="${#TestSuite#Cookie}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://${#TestSuite#serverName}.ssi-cloud.com</con:endpoint><con:request>{"detail":{"_id":"${#TestCase#TaskID}","type":"app.task","displayName":"${#TestCase#TaskDisplayName}"},"selections":[],"inversesummary":true,"extinversesummary":true,"origin":{}}</con:request><con:originalUri>https://pe-internal.dev.ssi-cloud.com/rest/api/dell/app.tasks/::completeTask</con:originalUri><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters>
  <con:entry key="inversesummary" value="true"/>
  <con:entry key="extinversesummary" value="true"/>
</con:parameters><con:parameterOrder><con:entry>inversesummary</con:entry><con:entry>extinversesummary</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="TaskDetails-Completed" id="2fbf109e-87d6-4fcb-8e45-c505578872cd"><con:settings/><con:config service="TaskDetails" resourcePath="/rest/api/${#TestSuite#tenant}/app.tasks::find" methodName="App.tasks::find" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="TaskDetails-Completed" id="a283c0b1-fe82-48ae-a333-6e53781e3cc8" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Cookie" value="${#TestSuite#Cookie}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://${#TestSuite#serverName}.ssi-cloud.com</con:endpoint><con:request>{"inversesummary":true,"filter":{"_id":"${#TestCase#TaskID}"},"params":{"start":0,"limit":1},"origin":{"component":"AvalonCollection","url":"#tab/app.tasks"}}</con:request><con:originalUri>https://qa-internal.dev.ssi-cloud.com/rest/api/dell/app.tasks::find</con:originalUri><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters><entry key="inversesummary" value="true" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>inversesummary</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="Property Transfer-CompletedDate" id="8bc884a8-d3d5-4abe-83e4-a389a215d196"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>CompletedDate</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>TaskDetails-Completed</con:sourceStep><con:sourcePath>declare namespace ns1='https://qa-internal.dev.ssi-cloud.com/rest/api/dell/app.tasks::find';
//ns1:Response[1]/ns1:data[1]/ns1:app.task[1]/ns1:e[1]/ns1:flows[1]/ns1:taskStatus[1]/ns1:transitions[1]/ns1:e[4]/ns1:changeDate[1]</con:sourcePath><con:targetType>CompletedDate</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:targetPath/><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TatTotal</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>TaskDetails-Completed</con:sourceStep><con:sourcePath>declare namespace ns1='https://qa-internal.dev.ssi-cloud.com/rest/api/dell/app.tasks::find';
//ns1:Response[1]/ns1:data[1]/ns1:app.task[1]/ns1:e[1]/ns1:extensions[1]/ns1:master[1]/ns1:tatTotal[1]/ns1:value[1]</con:sourcePath><con:targetType>TatTotal</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TatNet</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>TaskDetails-Completed</con:sourceStep><con:sourcePath>declare namespace ns1='https://qa-internal.dev.ssi-cloud.com/rest/api/dell/app.tasks::find';
//ns1:Response[1]/ns1:data[1]/ns1:app.task[1]/ns1:e[1]/ns1:extensions[1]/ns1:master[1]/ns1:tatNet[1]/ns1:value[1]</con:sourcePath><con:targetType>TatNet</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script-OnHold_Release_Calculation" id="a669b610-7fe8-4b11-a48b-1be8f355162d"><con:settings/><con:config><script><![CDATA[import java.text.SimpleDateFormat;
import java.util.Date;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.text.DateFormat;
import java.util.TimeZone;
import java.util.concurrent.TimeUnit;
import java.lang.Long
def onHoldTime = context.expand( '${#TestCase#OnHoldTime}' )
def releaseHoldTime = context.expand( '${#TestCase#ReleaseHoldTime}' )
def timeZone = context.expand( '${#TestCase#TimeZone}' )

SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ");
TimeZone tzFromrecord = TimeZone.getTimeZone(timeZone);

//requested Date
Date Hdate = sdf.parse(onHoldTime.replaceAll("Z", "+0000"));
log.info("Holddate: " + Hdate);

//change Date
Date Rdate = sdf.parse(releaseHoldTime.replaceAll("Z", "+0000"));
log.info("Releasedate: " + Rdate);


use(groovy.time.TimeCategory) {
    def duration = Rdate - Hdate
    log.info ("HoldTimediff::" + duration )
    log.info "Days: ${duration.days}, Hours: ${duration.hours},Minutes: ${duration.minutes},Seconds: ${duration.seconds}"
     
    testRunner.testCase.setPropertyValue( "HoldTimediff", duration.toString());
     def minutes=0
     def seconds=0

 StringBuilder sb = new StringBuilder(64);
        sb.append(duration.days);
        sb.append(" Days ");
        sb.append(duration.hours);
        sb.append(" Hours ");
      

        if (duration.minutes==0 && duration.seconds>0){
           minutes=duration.minutes+1
        	 sb.append(minutes);
        	 //  sb.append(" : ");
        	sb.append(" Minutes ");
        	 seconds=0
        	 sb.append(seconds);
          sb.append(" Seconds");
        }
      else if (duration.minutes>0 && duration.seconds>0 && duration.seconds<=30){
	      sb.append(duration.minutes);
	      //  sb.append(" : ");
        	 sb.append(" Minutes ");
        	 seconds=0
        	 sb.append(seconds);
          sb.append(" Seconds");
        }
     else if (duration.minutes>0 && duration.seconds>30){
        	minutes=duration.minutes+1
        	 sb.append(minutes);
        	//  sb.append(" : ");
        	sb.append(" Minutes ");
        	seconds=0
        	 sb.append(seconds);
        	  
           sb.append(" Seconds");
        	}
              
log.info("sbTime::" + sb.toString())
 testRunner.testCase.setPropertyValue( "HoldTimediffAfterCal", sb.toString());



  a= TimeUnit.DAYS.toMillis(duration.days);     
  b= TimeUnit.HOURS.toMillis(duration.hours); 
  c= TimeUnit.MINUTES.toMillis(duration.minutes);    
  d= TimeUnit.SECONDS.toMillis(duration.seconds);

  if (duration.minutes==0 && duration.seconds>0 && duration.seconds<=30){
    minutes = duration.minutes + 1
    seconds = 0
    
       c= TimeUnit.MINUTES.toMillis(minutes);    
       d= TimeUnit.SECONDS.toMillis(seconds);
  }

   else if (duration.minutes>0 && duration.seconds>0 && duration.seconds<=30){
   	      seconds = 0
	 
           c= TimeUnit.MINUTES.toMillis(duration.minutes);    
           d= TimeUnit.SECONDS.toMillis(seconds);
        }
 else if (duration.minutes>0 && seconds>30){
           minutes=duration.minutes+1
           seconds = 0
	
           c= TimeUnit.MINUTES.toMillis(minutes);    
           d= TimeUnit.SECONDS.toMillis(seconds);
 	
 }
  
  
  e = a+b+c+d
  log.info e    
  log.info a
  log.info b
  log.info c
  log.info d

  
  
testRunner.testCase.setPropertyValue( "HoldTimediffAfterCalmilies", e.toString());
    
}










]]></script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script-TatCalculations(DateDiff)-TimediffAfterCal" id="aa486a13-51f2-475b-9466-5de2d965771f"><con:settings/><con:config><script><![CDATA[import java.text.SimpleDateFormat;
import java.util.Date;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.text.DateFormat;
import java.util.TimeZone;
import java.util.concurrent.TimeUnit;
import java.lang.Long

def createdOnDate = context.expand( '${#TestCase#CreatedOnDate}' )
def completedDate = context.expand( '${#TestCase#CompletedDate}' )
def timeZone = context.expand( '${#TestCase#TimeZone}' )

SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ");
TimeZone tzFromrecord = TimeZone.getTimeZone(timeZone);

//requested Date
Date date = sdf.parse(createdOnDate.replaceAll("Z", "+0000"));
log.info("date : " + date);

//change Date
Date date1 = sdf.parse(completedDate.replaceAll("Z", "+0000"));
log.info("date1: " + date1);


use(groovy.time.TimeCategory) {
    def duration = date1 - date
    log.info ("Timediff::" + duration)
    log.info "Days: ${duration.days}, Hours: ${duration.hours},Minutes: ${duration.minutes},Seconds: ${duration.seconds}"
    testRunner.testCase.setPropertyValue( "Timediff", duration.toString());
     def minutes=0
     def seconds=0

   StringBuilder sb = new StringBuilder(64);
        sb.append(duration.days);
        sb.append(" Days ");
        sb.append(duration.hours);
        sb.append(" Hours ");
      

        if (duration.minutes==0 && duration.seconds>0){
           minutes=duration.minutes+1
        	 sb.append(minutes);
        	 sb.append(" Minutes ");
        	 seconds=0
        	 sb.append(seconds);
           sb.append(" Seconds");
        }
       else if (duration.minutes>0 && duration.seconds>0 && duration.seconds<=30){
	      sb.append(duration.minutes);
        	 sb.append(" Minutes ");
        	 seconds=0
        	 sb.append(seconds);
           sb.append(" Seconds");
        }
        else if (duration.minutes>0 && duration.seconds>30){
        	minutes=duration.minutes+1
        	 sb.append(minutes);
        	 sb.append(" Minutes ");
        	seconds=0
        	 sb.append(seconds);
           sb.append(" Seconds");
        	}
              
log.info("sbTime::" + sb.toString())
 testRunner.testCase.setPropertyValue( "TimediffAfterCal", sb.toString());



  a= TimeUnit.DAYS.toMillis(duration.days);     
  b= TimeUnit.HOURS.toMillis(duration.hours); 
  c= TimeUnit.MINUTES.toMillis(duration.minutes);    
  d= TimeUnit.SECONDS.toMillis(duration.seconds);

  if (duration.minutes==0 && duration.seconds>0 && duration.seconds<=30){
    minutes = duration.minutes + 1
    seconds = 0
    
       c= TimeUnit.MINUTES.toMillis(minutes);    
       d= TimeUnit.SECONDS.toMillis(seconds);
  }

   else if (duration.minutes>0 && duration.seconds>0 && duration.seconds<=30){
   	      seconds = 0
	 
           c= TimeUnit.MINUTES.toMillis(duration.minutes);    
           d= TimeUnit.SECONDS.toMillis(seconds);
        }
 else if (duration.minutes>0 && seconds>30){
           minutes=duration.minutes+1
           seconds = 0
	
           c= TimeUnit.MINUTES.toMillis(minutes);    
           d= TimeUnit.SECONDS.toMillis(seconds);
 	
 }
  
  
  e = a+b+c+d
  log.info e    
  log.info a
  log.info b
  log.info c
  log.info d

  
  
testRunner.testCase.setPropertyValue( "TimediffAfterCalmilies", e.toString());
    
}




]]></script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script-TAT Calculations(TATNET + TATTOTAL)" id="b15a6b5d-470e-4fb6-ac2a-7354aeff1117"><con:settings/><con:config><script><![CDATA[import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.TimeZone;
import java.util.concurrent.TimeUnit;
def quoteID = context.expand( '${#TestCase#QuoteID}' )
def timeZone = context.expand( '${#TestCase#TimeZone}' )
def requestedTime = context.expand( '${#TestCase#requestedTime}' )
def changeDate = context.expand( '${#TestCase#ChangeDate}' )
def holdTimediffAfterCal = context.expand( '${#TestCase#HoldTimediffAfterCal}' )

def turnaroundTime = context.expand( '${#TestCase#TurnaroundTime}' )
def tatNet = context.expand( '${#TestCase#TatNet}' )
def tatTotal = context.expand( '${#TestCase#TatTotal}' )
def long minutes1 = tatTotal.toLong()
def long minutes2 = tatNet.toLong()
def long tatTotalmillies = minutes1 * 60 * 1000;
def long tatNetmillies = minutes2 * 60 * 1000;
testRunner.testCase.setPropertyValue( "tatTotalmillies", tatTotalmillies.toString());
testRunner.testCase.setPropertyValue( "tatNetmillies1", tatNetmillies.toString());

def holdTimediffAfterCalmilies = context.expand( '${#TestCase#HoldTimediffAfterCalmilies}' )
def long holdTimediffAfterCalmilies1 = holdTimediffAfterCalmilies.toLong()

getDurationBreakdownMinutes(tatTotalmillies)
getDurationBreakdownMinutes1(tatNetmillies)

getDurationBreakdownMinutes11(holdTimediffAfterCalmilies1)


def String getDurationBreakdownMinutes(long tatTotalmillies)
    {
        if(tatTotalmillies < 0)
        {
            throw new IllegalArgumentException("Duration must be greater than zero!");
        }

        long days = TimeUnit.MILLISECONDS.toDays(tatTotalmillies);
        tatTotalmillies -= TimeUnit.DAYS.toMillis(days);
        long hours = TimeUnit.MILLISECONDS.toHours(tatTotalmillies);
        tatTotalmillies -= TimeUnit.HOURS.toMillis(hours);
        long minutes = TimeUnit.MILLISECONDS.toMinutes(tatTotalmillies);
        tatTotalmillies -= TimeUnit.MINUTES.toMillis(minutes);
        long seconds = TimeUnit.MILLISECONDS.toSeconds(tatTotalmillies);

        StringBuilder sb = new StringBuilder(64);
        sb.append(days);
        sb.append(" Days ");
        sb.append(hours);
        sb.append(" Hours ");
        sb.append(minutes);
        sb.append(" Minutes "); 
        sb.append(seconds);
        sb.append(" Seconds");
        
        log.info("TAT_TOTAL : " + sb.toString())
        testRunner.testCase.setPropertyValue( "TatfromTatTotal", sb.toString());
    }

def String getDurationBreakdownMinutes1(long tatNetmillies)
    {
        if(tatNetmillies < 0)
        {
            throw new IllegalArgumentException("Duration must be greater than zero!");
        }

        long days = TimeUnit.MILLISECONDS.toDays(tatNetmillies);
        tatNetmillies -= TimeUnit.DAYS.toMillis(days);
        long hours = TimeUnit.MILLISECONDS.toHours(tatNetmillies);
        tatNetmillies -= TimeUnit.HOURS.toMillis(hours);
        long minutes = TimeUnit.MILLISECONDS.toMinutes(tatNetmillies);
        tatNetmillies -= TimeUnit.MINUTES.toMillis(minutes);
        long seconds = TimeUnit.MILLISECONDS.toSeconds(tatNetmillies);

        StringBuilder sb = new StringBuilder(64);
        sb.append(days);
        sb.append(" Days ");
        sb.append(hours);
        sb.append(" Hours ");
        sb.append(minutes);
        sb.append(" Minutes "); 
        sb.append(seconds);
        sb.append(" Seconds");
        
        log.info("TAT_NET : " +sb.toString())
        testRunner.testCase.setPropertyValue( "TatfromTatNet", sb.toString());
    }

def String getDurationBreakdownMinutes11(long holdTimediffAfterCalmilies1)
    {
        if(holdTimediffAfterCalmilies1 < 0)
        {
            throw new IllegalArgumentException("Duration must be greater than zero!");
        }

        long days = TimeUnit.MILLISECONDS.toDays(holdTimediffAfterCalmilies1);
        holdTimediffAfterCalmilies1 -= TimeUnit.DAYS.toMillis(days);
        long hours = TimeUnit.MILLISECONDS.toHours(holdTimediffAfterCalmilies1);
        holdTimediffAfterCalmilies1 -= TimeUnit.HOURS.toMillis(hours);
        long minutes = TimeUnit.MILLISECONDS.toMinutes(holdTimediffAfterCalmilies1);
        holdTimediffAfterCalmilies1 -= TimeUnit.MINUTES.toMillis(minutes);
        long seconds = TimeUnit.MILLISECONDS.toSeconds(holdTimediffAfterCalmilies1);

        StringBuilder sb = new StringBuilder(64);
        sb.append(days);
        sb.append(" Days ");
        sb.append(hours);
        sb.append(" Hours ");
      
        if (minutes==0 && seconds>0){
           minutes=minutes+1
        	 sb.append(minutes);
        	 sb.append(" Minutes ");
        	 seconds=0
        	 sb.append(seconds);
           sb.append(" Seconds");
        }
       else if (minutes>0 && seconds>0 && seconds<=30){
	      sb.append(minutes);
        	 sb.append(" Minutes ");
        	 seconds=0
        	 sb.append(seconds);
           sb.append(" Seconds");
        }
        else if (minutes>0 && seconds>30){
        	minutes=minutes+1
        	 sb.append(minutes);
        	 sb.append(" Minutes ");
        	seconds=0
        	 sb.append(seconds);
           sb.append(" Seconds");
        	}

        
        log.info("TAT_HOLD_TIME : " +sb.toString())
        testRunner.testCase.setPropertyValue( "holdTimediffAfterCalmilies111", sb.toString());
    }



    ]]></script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script 6" id="025207ce-1af5-4a8e-89ac-a51bfcf77da3"><con:settings/><con:config><script><![CDATA[import java.text.SimpleDateFormat;
import java.util.Date;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.text.DateFormat;
import java.util.TimeZone;
import java.util.concurrent.TimeUnit;
import java.lang.Long


def tatTotalmillies = context.expand( '${#TestCase#tatTotalmillies}' )
def tatNetmillies1 = context.expand( '${#TestCase#tatNetmillies1}' )
def holdTimediffAfterCalmilies = context.expand( '${#TestCase#HoldTimediffAfterCalmilies}' )
def long tatTotalmillies1 = tatTotalmillies.toLong()
def long tatNetmillies11 = tatNetmillies1.toLong()
def long holdTimediffAfterCalmilies1 = holdTimediffAfterCalmilies.toLong()
def tatfromTatTotal = context.expand( '${#TestCase#TatfromTatTotal}' )
def tatfromTatNet = context.expand( '${#TestCase#TatfromTatNet}' )
def timediffAfterCal = context.expand( '${#TestCase#TimediffAfterCal}' )
def holdTimediffAfterCal = context.expand( '${#TestCase#HoldTimediffAfterCal}' )
def timediffAfterCalmilies = context.expand( '${#TestCase#TimediffAfterCalmilies}' )
def long timediffAfterCalmilies1 = timediffAfterCalmilies.toLong()

log.info tatTotalmillies
log.info tatNetmillies1
log.info holdTimediffAfterCalmilies1
log.info tatfromTatTotal
log.info tatfromTatNet
log.info timediffAfterCalmilies1

long afterCalcTimediff = (timediffAfterCalmilies1 -  holdTimediffAfterCalmilies1)
log.info afterCalcTimediff
ReleaseHoldtimemilies = (tatNetmillies11 + holdTimediffAfterCalmilies1)
testRunner.testCase.setPropertyValue( "Release_Holdtime", ReleaseHoldtimemilies.toString());



getDurationBreakdownMinutes1(afterCalcTimediff)



assert tatTotalmillies1 == ReleaseHoldtimemilies

assert tatfromTatTotal == timediffAfterCal


def String getDurationBreakdownMinutes1(long tatNetmillies)
    {
        if(tatNetmillies < 0)
        {
            throw new IllegalArgumentException("Duration must be greater than zero!");
        }

        long days = TimeUnit.MILLISECONDS.toDays(tatNetmillies);
        tatNetmillies -= TimeUnit.DAYS.toMillis(days);
        long hours = TimeUnit.MILLISECONDS.toHours(tatNetmillies);
        tatNetmillies -= TimeUnit.HOURS.toMillis(hours);
        long minutes = TimeUnit.MILLISECONDS.toMinutes(tatNetmillies);
        tatNetmillies -= TimeUnit.MINUTES.toMillis(minutes);
        long seconds = TimeUnit.MILLISECONDS.toSeconds(tatNetmillies);

     

   StringBuilder sb = new StringBuilder(64);
        sb.append(days);
        sb.append(" Days ");
        sb.append(hours);
        sb.append(" Hours ");
      

        if (minutes==0 && seconds>0){
           minutes=minutes+1
        	 sb.append(minutes);
        	 sb.append(" Minutes ");
        	 seconds=0
        	 sb.append(seconds);
           sb.append(" Seconds");
        }
       else if (minutes>0 && seconds>0 && seconds<=30){
	      sb.append(minutes);
        	 sb.append(" Minutes ");
        	 seconds=0
        	 sb.append(seconds);
           sb.append(" Seconds");
        }
        else if (minutes>0 && seconds>30){
        	minutes=minutes+1
        	 sb.append(minutes);
        	 sb.append(" Minutes ");
        	seconds=0
        	 sb.append(seconds);
           sb.append(" Seconds");
        	}
        
        log.info("TAT_TatfromtimediffAfterCalmilies : " +sb.toString())
        testRunner.testCase.setPropertyValue( "TatfromtimediffAfterCalmilies", sb.toString());
    }




















]]></script></con:config></con:testStep><con:testStep type="groovy" name="Assertion For TatTotal and TatNet" id="ce9be259-b6d6-4356-bb6a-cf3777b33851"><con:settings/><con:config><script>def tatfromTatTotal = context.expand( '${#TestCase#TatfromTatTotal}' )
def tatNetmillies = context.expand( '${#TestCase#tatNetmillies}' )
def timediffAfterCal = context.expand( '${#TestCase#TimediffAfterCal}' )
def holdTimediffAfterCal = context.expand( '${#TestCase#HoldTimediffAfterCal}' )
//def long tatTotalmillies1 = tatTotalmillies.toLong()
def tatfromTatNet = context.expand( '${#TestCase#TatfromTatNet}' )

def tatfromtimediffAfterCalmilies = context.expand( '${#TestCase#TatfromtimediffAfterCalmilies}' )


log.info ("tatfromTatTotal " + tatfromTatTotal)
log.info ("tatNetmillies " + tatNetmillies)
log.info ("timediffAfterCal " + timediffAfterCal)
log.info ("holdTimediffAfterCal " + holdTimediffAfterCal)

def tatNetmillies1 =(tatfromTatTotal - holdTimediffAfterCal)
log.info ("tatNetmillies1 " + tatNetmillies1)

//assert tatNetmillies==timediffAfterCal


assert tatfromTatNet ==tatfromtimediffAfterCalmilies

</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script 5" id="572880a2-37cb-40a9-8c36-f0cf894e8e60" disabled="true"><con:settings/><con:config><script>import java.text.SimpleDateFormat;
import java.util.Date;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.text.DateFormat;
import java.util.TimeZone;
import java.util.concurrent.TimeUnit;
import java.lang.Long
def createdOnDate = context.expand( '${#TestCase#CreatedOnDate}' )
def completedDate = context.expand( '${#TestCase#CompletedDate}' )

//log.info createdOnDate
//log.info completedDate

//String string = createdOnDate;
//String string1 = completedDate;

SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ");
SimpleDateFormat output = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS");

//createdOnDate
Date date = sdf.parse(createdOnDate.replaceAll("Z", "+0000"));
String nTime = output.format(date);
myDate = Date.parse("yyyy-MM-dd'T'HH:mm:ss.SSS", nTime) ;
//log.info("string: " + string);
log.info("date: " + nTime);

//completedDate
Date date1 = sdf.parse(completedDate.replaceAll("Z", "+0000"));
log.info("date1: " + date1);

String nTime1 = output.format(date1);
myDate1 = Date.parse("yyyy-MM-dd'T'HH:mm:ss.SSS", nTime1) ;
log.info("myDate1: " + myDate1);
log.info("date: " + nTime1);

DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS");
//get current date time with Date()
Date date2 = new Date();
log.info(dateFormat.format(date2));
//log.info firstDayOfWeekTimestamp
// Get calendar set to current date and time
Calendar c = Calendar.getInstance();
 	    c.set(Calendar.HOUR_OF_DAY, 0);
         c.set(Calendar.MINUTE, 0);
         c.set(Calendar.SECOND, 0);
         c.set(Calendar.MILLISECOND, 0);
         
         log.info c.getTime();


    
t2=(dateFormat.format(c.getTime()))
t3=(dateFormat.parse(t2))
Timeinhours=(myDate1 - t3);
log.info ("Time: " + Timeinhours);


DateDifferentExample(nTime1,t2)





Long DateDifferentExample(String dateStart,String dateStop) {

		//HH converts hour in 24 hours format (0-23), day calculation
		SimpleDateFormat format = new SimpleDateFormat("MM/dd/yyyy HH:mm:ss");

		Date d1 = null;
		Date d2 = null;

		try {
			d1 = format.parse(dateStart);
			d2 = format.parse(dateStop);

			//in milliseconds
			long diff = d2.getTime() - d1.getTime();

			long diffSeconds = diff / 1000 % 60;
			long diffMinutes = diff / (60 * 1000) % 60;
			long diffHours = diff / (60 * 60 * 1000) % 24;
			long diffDays = diff / (24 * 60 * 60 * 1000);

			log.info(diffDays + " days, ");
			log.info(diffHours + " hours, ");
			log.info(diffMinutes + " minutes, ");
			log.info(diffSeconds + " seconds.");

		} catch (Exception e) {
			e.printStackTrace();
		}

	}

</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script" id="a05e6433-604f-4d2d-bf21-a7418966210b" disabled="true"><con:settings/><con:config><script>import java.text.SimpleDateFormat;
import java.util.Date;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.text.DateFormat;
import java.util.TimeZone;
import java.util.concurrent.TimeUnit;
import java.lang.Long

def createdOnDate = context.expand( '${#TestCase#CreatedOnDate}' )
def completedDate = context.expand( '${#TestCase#CompletedDate}' )


SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ");
SimpleDateFormat output = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS");

//createdOnDate
Date date = sdf.parse(createdOnDate.replaceAll("Z", "+0000"));

//completedDate
Date date1 = sdf.parse(completedDate.replaceAll("Z", "+0000"));


days(date,date1)


 Long days(Date start, Date end){
    //Ignore argument check

    Calendar c1 = Calendar.getInstance();
    c1.setTime(start);
    int w1 = c1.get(Calendar.DAY_OF_WEEK);
    c1.add(Calendar.DAY_OF_WEEK, -w1);

    Calendar c2 = Calendar.getInstance();
    c2.setTime(end);
    int w2 = c2.get(Calendar.DAY_OF_WEEK);
    c2.add(Calendar.DAY_OF_WEEK, -w2);

    //end Saturday to start Saturday 
    long days = (c2.getTimeInMillis()-c1.getTimeInMillis())/(1000*60*60*24);
    long daysWithoutWeekendDays = days-(days*2/7);

    // Adjust days to add on (w2) and days to subtract (w1) so that Saturday
    // and Sunday are not included
    if (w1 == Calendar.SUNDAY &amp;&amp; w2 != Calendar.SATURDAY) {
        w1 = Calendar.MONDAY;
    } else if (w1 == Calendar.SATURDAY &amp;&amp; w2 != Calendar.SUNDAY) {
        w1 = Calendar.FRIDAY;
    } 

    if (w2 == Calendar.SUNDAY) {
        w2 = Calendar.MONDAY;
    } else if (w2 == Calendar.SATURDAY) {
        w2 = Calendar.FRIDAY;
    }
   log.info("days: " + (daysWithoutWeekendDays-w1+w2));
    //return daysWithoutWeekendDays-w1+w2;
}</script></con:config></con:testStep><con:testStep type="delay" name="Delay 3" id="477bf491-e842-407a-ab88-a8f9e1eb1dc0"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:properties><con:property><con:name>CompletedDate</con:name><con:value>2016-06-09T13:44:55.476Z</con:value></con:property><con:property><con:name>CreatedOnDate</con:name><con:value>2016-06-06T10:04:56.047Z</con:value></con:property><con:property><con:name>TaskDisplayName</con:name><con:value>y7</con:value></con:property><con:property><con:name>TaskID</con:name><con:value>57554ac8e4b0d26080dc9cef</con:value></con:property><con:property><con:name>TatfromTatTotal</con:name><con:value>3 Days 3 Hours 40 Minutes 0 Seconds</con:value></con:property><con:property><con:name>TatNet</con:name><con:value>4530</con:value></con:property><con:property><con:name>TatTotal</con:name><con:value>4540</con:value></con:property><con:property><con:name>Timediff</con:name><con:value>3 days, 3 hours, 39 minutes, 59.429 seconds</con:value></con:property><con:property><con:name>TimediffAfterCal</con:name><con:value>3 Days 3 Hours 40 Minutes 0 Seconds</con:value></con:property><con:property><con:name>TimeZone</con:name><con:value>UTC+5:30</con:value></con:property><con:property><con:name>OnHoldTime</con:name><con:value>2016-06-09T13:34:47.222Z</con:value></con:property><con:property><con:name>ReleaseHoldTime</con:name><con:value>2016-06-09T13:44:50.174Z</con:value></con:property><con:property><con:name>HoldTimediffAfterCal</con:name><con:value>0 Days 0 Hours 10 Minutes 0 Seconds</con:value></con:property><con:property><con:name>HoldTimediff</con:name><con:value>10 minutes, 2.952 seconds</con:value></con:property><con:property><con:name>tatTotalmillies</con:name><con:value>272400000</con:value></con:property><con:property><con:name>tatNetmillies1</con:name><con:value>271800000</con:value></con:property><con:property><con:name>HoldTimediffAfterCalmilies</con:name><con:value>600000</con:value></con:property><con:property><con:name>holdTimediffAfterCalmilies111</con:name><con:value>0 Days 0 Hours </con:value></con:property><con:property><con:name>Release_Holdtime</con:name><con:value>272400000</con:value></con:property><con:property><con:name>TatfromTatNet</con:name><con:value>3 Days 3 Hours 30 Minutes 0 Seconds</con:value></con:property><con:property><con:name>TimediffAfterCalmilies</con:name><con:value>272399000</con:value></con:property><con:property><con:name>TatfromtimediffAfterCalmilies</con:name><con:value>3 Days 3 Hours 30 Minutes 0 Seconds</con:value></con:property><con:property><con:name>TaskCount</con:name><con:value>14</con:value></con:property><con:property><con:name>TaskIDs</con:name><con:value>[57554ac8e4b0d26080dc9cef, 57554ac8e4b0d26080dc9cef, 57554ac8e4b0d26080dc9cef, 57554ac8e4b0d26080dc9cef, 57554ac8e4b0d26080dc9cef, 57554ac8e4b0d26080dc9cef, 57554ac8e4b0d26080dc9cef, 57554ac8e4b0d26080dc9cef, 57554ac8e4b0d26080dc9cef, 57554ac8e4b0d26080dc9cef, 57554ac8e4b0d26080dc9cef, 57554ac8e4b0d26080dc9cef, 57554ac8e4b0d26080dc9cef]</con:value></con:property><con:property><con:name>i</con:name><con:value>1</con:value></con:property><con:property><con:name>flag</con:name><con:value>true</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>6bda5a34-450f-427a-af64-6c06a948395d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c7cd9b4b-e847-484c-aef7-6b7380700d73</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f24e4578-6c82-46aa-963a-5be8c0cac063</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>ef6b8989-f85b-439f-b50a-064ecf6480d4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>08492c3e-1c05-4fb7-ac4f-4644aa99fe2d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>cd7dda61-054f-4b73-8ef1-a81f73dcfb35</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>34f3dc72-65dc-4452-98c0-80d30fcc8a99</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e8f28702-0bc9-4036-9269-40cb7b269127</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a7a4514c-8022-43f4-bddb-7eb7e9e57eb4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b0781b13-9069-4920-b8e0-da5056f60acc</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>abb9589a-6acc-43c5-be4a-6d0706076783</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>38d5323c-6b32-4a56-8651-cdc8bb662d04</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a669b610-7fe8-4b11-a48b-1be8f355162d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>025207ce-1af5-4a8e-89ac-a51bfcf77da3</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>4c2d4d8f-dc57-4fb2-81af-883615f468e3</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>6311ae5d-b344-4304-ba88-10a6677de7a6</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d58caf77-d80f-4ec6-89af-7d31ebfeb9d1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>2eb660cf-68b4-4f57-b674-598d617e4de3</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>3c2d1072-812b-46ab-99d9-29b11a0ea0f3</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>80622710-9114-431b-9247-12e01285f06a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase id="af65bb37-be2e-4463-9eaf-6b8fd36d5996" discardOkResults="true" failOnError="true" failTestCaseOnErrors="true" keepSession="false" name="1Tasks_OnHold_Completed_Requested during weekday, Completed during weekday of the same week" searchProperties="true" disabled="true"><con:settings/><con:testStep type="calltestcase" name="Find Cookie" id="592db5be-8213-4a1a-b045-6aa9636ba07a"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>c0ce29f2-7cb0-4efc-a1f0-d98a032504a6</con:targetTestCase><con:properties><con:property><con:name>qaDevCookies</con:name><con:value>[avalon.sid=s%3A54cb1cf0e4b004ec636c4d71.OKyf7Hynz6NWePZzjLl5L9azOOkbtfD5ExcpJE%2FUL48</con:value></con:property></con:properties><con:returnProperties><con:entry>qaDevCookies</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script -CreatedOnDate" id="cdc67b0b-724b-4e24-b2d9-98288b504fd0"><con:settings/><con:config><script>import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.text.DateFormat;
import java.util.Date;
import java.util.TimeZone;
import java.util.*
import org.joda.time.DateTime;

DateTime dateTime = new DateTime();
long firstDayOfWeekTimestamp = dateTime.withDayOfWeek(1).getMillis();
log.info firstDayOfWeekTimestamp
// Get calendar set to current date and time
Calendar c = Calendar.getInstance();
 	    c.set(Calendar.HOUR_OF_DAY, 0);
         c.set(Calendar.MINUTE, 0);
         c.set(Calendar.SECOND, 0);
         c.set(Calendar.MILLISECOND, 0);
        
       
// Set the calendar to SUNDAY of the current week
c.set(Calendar.DAY_OF_WEEK, Calendar.MONDAY);

// Print dates of the current week starting on SUNDAY
DateFormat df = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ");
for (int i = 0; i &lt; 1; i++) {
    log.info(df.format(c.getTime()));
 DateFormat df1 = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS");
 log.info(df1.format(c.getTime()));
    //c.add(Calendar.DATE, 1);
    testRunner.testCase.setPropertyValue( "CreatedOnDate", (df1.format(c.getTime()).toString()+"Z"));
}</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script-FIndQuotesRequest" id="813a5dbc-8cee-4c29-9958-640a13e144b2" disabled="true"><con:settings/><con:config><script>import groovy.json.*
def serverName = context.expand( '${#TestSuite#serverName}' )
def tenant = context.expand( '${#TestSuite#tenant}' )
def createdOnDate = context.expand( '${#TestCase#CreatedOnDate}' )

if (tenant=="dell" &amp;&amp; serverName =="pe-internal.dev")
{

                def jsonText='''{"filter":{"flows.quoteStages.state.name":"requested","flows.quoteStages.transitions":{"$elemMatch":{"changeDate":{"$gte":"${#TestCase#CreatedOnDate}"},"toState":"requested"}},"isBase":false,"isDraft":false},"params":{"sort":{"systemProperties.createdOn":1},"start":0,"limit":50,"columns":["_id","type","systemProperties","displayName","requestReason","flows.quoteStages.state","flows.quoteStages.target","relationships.requestedBy","relationships.assignee","expirationDate","flows.quoteStages.transitions","dueDate","amount.normalizedAmount","relationships.customer","tags","flows.quoteStages.transitions","flows.quoteStages.transitions"]},"origin":{"component":"AvalonGridDuplo","url":"#tab/app.quotes/vq=STATUS%3A%20%22Requested%22%20REQUEST-DATE%${#TestCase#CreatedOnDate}%"},"inversesummary":false}'''
}
else
{
                def jsonText='''{"filter":{"flows.quoteStages.state.name":"requested","systemProperties.createdOn":{"$gt":"${#TestCase#CreatedOnDate}"},"isBase":false,"isDraft":false},"params":{"sort":{"dueDate":1},"start":0,"limit":50,"columns":["_id","type","systemProperties","displayName","requestReason","flows.quoteStages.state","flows.quoteStages.target","relationships.requestedBy","relationships.assignee","expirationDate","flows.quoteStages.transitions","dueDate","amount.normalizedAmount","relationships.customer","tags","flows.quoteStages.transitions","flows.quoteStages.transitions"]},"origin":{"component":"AvalonGridDuplo","url":"#tab/app.quotes/vq=STATUS%3A%20%22Requested%7CStaged%7COn%20Hold%22%20CREATED-ON%3A%20%22%3E04-24-2016%22"},"inversesummary":false}'''
}




//{"filter":{"flows.quoteStages.state.name":"requested","systemProperties.createdOn":{"$gt":"${#TestCase#CreatedOnDate}"},"isBase":false,"isDraft":false},"params":{"sort":{"systemProperties.createdOn":1},"start":0,"limit":50,"columns":["_id","type","systemProperties","displayName","requestReason","flows.quoteStages.state","flows.quoteStages.target","relationships.requestedBy","relationships.assignee","expirationDate","flows.quoteStages.transitions","dueDate","amount.normalizedAmount","relationships.customer","tags","flows.quoteStages.transitions","flows.quoteStages.transitions"]},"origin":{"component":"AvalonGridDuplo","url":"#tab/app.quotes/vq=STATUS%3A%20%22Requested%22%20CREATED-ON%3A%20%22%3E04-14-2016%22"},"inversesummary":false}</script></con:config></con:testStep><con:testStep type="restrequest" name="FindTask" id="b58d8c2a-f57b-4bfa-8d52-64a2e49377ed"><con:settings/><con:config service="FindTask" resourcePath="/rest/api/${#TestSuite#tenant}/app.tasks::find" methodName="App.tasks::find" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="FindTask" id="72d7ffb4-c9d1-4bee-8c95-65eb37ae1f09" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Cookie" value="${#TestSuite#Cookie}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://${#TestSuite#serverName}.ssi-cloud.com</con:endpoint><con:request>{"filter":{"tags":{"$nin":[{"$regex":"^TAT_TEST"},{"$regex":"^Functional_QA"}]},"flows.taskStatus.state.name":"open","systemProperties.createdOn":{"$gte":"${#TestCase#CreatedOnDate}"}},"params":{"sort":{"systemProperties.createdOn":1},"start":0,"limit":50,"columns":["_id","type","systemProperties","displayName","taskType","dueDate","flows.taskStatus.state","flows.taskStatus.target","priority","relationships.assignee","relationships.requestedBy","systemProperties.createdOn"]},"origin":{"component":"AvalonGridDuplo"},"inversesummary":false}</con:request><con:originalUri>https://pe-internal.dev.ssi-cloud.com/rest/api/dell/app.tasks::find</con:originalUri><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="Property Transfer-TaskID" id="26b0b378-8fc4-46ae-8fa8-0b61310b22ac"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TaskID</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>FindTask</con:sourceStep><con:sourcePath>declare namespace ns1='https://pe-internal.dev.ssi-cloud.com/rest/api/dell/app.tasks::find';
//ns1:Response[1]/ns1:data[1]/ns1:app.task[1]/ns1:e[1]/ns1:_id[1]</con:sourcePath><con:targetType>TaskID</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:targetPath/><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TaskDisplayName</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>FindTask</con:sourceStep><con:sourcePath>declare namespace ns1='https://pe-internal.dev.ssi-cloud.com/rest/api/dell/app.tasks::find';
//ns1:Response[1]/ns1:data[1]/ns1:app.task[1]/ns1:e[1]/ns1:displayName[1]</con:sourcePath><con:targetType>TaskDisplayName</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="restrequest" name="TaskDetails" id="fdd44f38-b52e-449a-8c06-c2ee88c25f4c"><con:settings/><con:config service="TaskDetails" resourcePath="/rest/api/${#TestSuite#tenant}/app.tasks::find" methodName="App.tasks::find" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="TaskDetails" id="a283c0b1-fe82-48ae-a333-6e53781e3cc8" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Cookie" value="${#TestSuite#Cookie}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://${#TestSuite#serverName}.ssi-cloud.com</con:endpoint><con:request>{"inversesummary":true,"filter":{"_id":"${#TestCase#TaskID}"},"params":{"start":0,"limit":1},"origin":{"component":"AvalonCollection"}}</con:request><con:originalUri>https://pe-internal.dev.ssi-cloud.com/rest/api/dell/app.tasks::find</con:originalUri><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters><entry key="inversesummary" value="true" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>inversesummary</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="Property Transfer-TimeZone/CreatedDate" id="f46fa2c4-ae32-42b6-9315-69dc54f5cb13"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="true" transferChildNodes="false"><con:name>TimeZone</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>TaskDetails</con:sourceStep><con:sourcePath>declare namespace ns1='https://pe-internal.dev.ssi-cloud.com/rest/api/dell/app.tasks::find';
//ns1:Response[1]/ns1:data[1]/ns1:app.task[1]/ns1:e[1]/ns1:extensions[1]/ns1:master[1]/ns1:requestedTimeZone[1]/ns1:value[1]/ns1:displayName[1]</con:sourcePath><con:targetType>TimeZone</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:targetPath/><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" entitize="false" ignoreEmpty="false" transferToAll="false" transferChildNodes="false"><con:name>CreatedOnDate</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>TaskDetails</con:sourceStep><con:sourcePath>declare namespace ns1='https://pe-internal.dev.ssi-cloud.com/rest/api/dell/app.tasks::find';
//ns1:Response[1]/ns1:data[1]/ns1:app.task[1]/ns1:e[1]/ns1:flows[1]/ns1:taskStatus[1]/ns1:transitions[1]/ns1:e[1]/ns1:changeDate[1]</con:sourcePath><con:targetType>CreatedOnDate</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="restrequest" name="Task-PlaceOnHold" id="ddeb8315-ecb4-4a0b-979b-a1634ffc003e"><con:settings/><con:config service="Task-PlaceOnHold" resourcePath="/rest/api/${#TestSuite#tenant}/app.tasks/${#TestCase#TaskID}::holdTask" methodName="5491793ee4b002d9d76bb516::holdTask" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Task-PlaceOnHold" id="8c9da7f6-f8da-4a6f-b154-6070a2bcc949" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Cookie" value="${#TestSuite#Cookie}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://${#TestSuite#serverName}.ssi-cloud.com</con:endpoint><con:request>{"notes":[],"_id":"","type":"app.task.hold.input","holdReason":{"displayName":"Review","name":"review","type":"app.lookup","key":"51a67a6316a8afd0f000c6d1"},"inversesummary":true,"extinversesummary":true,"origin":{"url":"#detail/app.tasks/${#TestCase#TaskID}"}}</con:request><con:originalUri>https://sqa-internal.dev.ssi-cloud.com/rest/api/dell/app.tasks/57551c34e4b0d26080d90337::holdTask</con:originalUri><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters>
  <con:entry key="inversesummary" value="true"/>
  <con:entry key="extinversesummary" value="true"/>
</con:parameters><con:parameterOrder><con:entry>inversesummary</con:entry><con:entry>extinversesummary</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="Delay" id="703bec58-8a72-4606-9586-e6c72af307b7"><con:settings/><con:config><delay>540000</delay></con:config></con:testStep><con:testStep type="restrequest" name="Task-ReleaseHold" id="a329d950-a646-4474-9e28-759453c4831e"><con:settings/><con:config service="Task-ReleaseHold" resourcePath="/rest/api/${#TestSuite#tenant}/app.tasks/${#TestCase#TaskID}::taskReleaseHold" methodName="5491793ee4b002d9d76bb516::taskReleaseHold" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Task-ReleaseHold" id="0faf58a4-cc34-4d4a-8d0b-94c43ae8f405" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Cookie" value="${#TestSuite#Cookie}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://${#TestSuite#serverName}.ssi-cloud.com</con:endpoint><con:request>{"detail":{"_id":"${#TestCase#TaskID}","type":"app.task","displayName":"${#TestCase#TaskDisplayName}"},"selections":[],"inversesummary":true,"extinversesummary":true,"origin":{"url":"#detail/app.tasks/${#TestCase#TaskID}"}}</con:request><con:originalUri>https://sqa-internal.dev.ssi-cloud.com/rest/api/dell/app.tasks/57551c34e4b0d26080d90337::taskReleaseHold</con:originalUri><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters>
  <con:entry key="inversesummary" value="true"/>
  <con:entry key="extinversesummary" value="true"/>
</con:parameters><con:parameterOrder><con:entry>inversesummary</con:entry><con:entry>extinversesummary</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="Delay 2" id="88c24044-00fb-4042-9c23-a77958f48827"><con:settings/><con:config><delay>2000</delay></con:config></con:testStep><con:testStep type="restrequest" name="TaskDetails-afterReleaseHold" id="fdb85fa3-cb2d-45b3-ac65-79bcbde9c187"><con:settings/><con:config service="TaskDetails" resourcePath="/rest/api/${#TestSuite#tenant}/app.tasks::find" methodName="App.tasks::find" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="TaskDetails-afterReleaseHold" id="a283c0b1-fe82-48ae-a333-6e53781e3cc8" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Cookie" value="${#TestSuite#Cookie}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://${#TestSuite#serverName}.ssi-cloud.com</con:endpoint><con:request>{"inversesummary":true,"filter":{"_id":"${#TestCase#TaskID}"},"params":{"start":0,"limit":1},"origin":{"component":"AvalonCollection"}}</con:request><con:originalUri>https://pe-internal.dev.ssi-cloud.com/rest/api/dell/app.tasks::find</con:originalUri><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters><entry key="inversesummary" value="true" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>inversesummary</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="Property Transfer-OnHold/ReleaseTime" id="c51ee335-6872-427b-b2c5-6084641bb8be"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>OnHoldTime</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>TaskDetails-afterReleaseHold</con:sourceStep><con:sourcePath>declare namespace ns1='https://pe-internal.dev.ssi-cloud.com/rest/api/dell/app.tasks::find';
//ns1:Response[1]/ns1:data[1]/ns1:app.task[1]/ns1:e[1]/ns1:flows[1]/ns1:taskStatus[1]/ns1:transitions[1]/ns1:e[2]/ns1:changeDate[1]</con:sourcePath><con:targetType>OnHoldTime</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>ReleaseHoldTime</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>TaskDetails-afterReleaseHold</con:sourceStep><con:sourcePath>declare namespace ns1='https://pe-internal.dev.ssi-cloud.com/rest/api/dell/app.tasks::find';
//ns1:Response[1]/ns1:data[1]/ns1:app.task[1]/ns1:e[1]/ns1:flows[1]/ns1:taskStatus[1]/ns1:transitions[1]/ns1:e[3]/ns1:changeDate[1]</con:sourcePath><con:targetType>ReleaseHoldTime</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="restrequest" name="CompleteTask" id="9ee3c68f-4a09-46ae-bb17-bf724578ca01"><con:settings/><con:config service="CompleteTask" resourcePath="/rest/api/${#TestSuite#tenant}/app.tasks/${#TestCase#TaskID}::completeTask" methodName="511a69f263165f8e0f05266e::completeTask" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CompleteTask" id="b101cbcc-5363-41ee-bc9f-5eb57ab80861" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Cookie" value="${#TestSuite#Cookie}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://${#TestSuite#serverName}.ssi-cloud.com</con:endpoint><con:request>{"detail":{"_id":"${#TestCase#TaskID}","type":"app.task","displayName":"${#TestCase#TaskDisplayName}"},"selections":[],"inversesummary":true,"extinversesummary":true,"origin":{}}</con:request><con:originalUri>https://pe-internal.dev.ssi-cloud.com/rest/api/dell/app.tasks/::completeTask</con:originalUri><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters>
  <con:entry key="inversesummary" value="true"/>
  <con:entry key="extinversesummary" value="true"/>
</con:parameters><con:parameterOrder><con:entry>inversesummary</con:entry><con:entry>extinversesummary</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="TaskDetails-Completed" id="27b04f8f-e074-4d35-acbd-1e4acd47638e"><con:settings/><con:config service="TaskDetails" resourcePath="/rest/api/${#TestSuite#tenant}/app.tasks::find" methodName="App.tasks::find" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="TaskDetails-Completed" id="a283c0b1-fe82-48ae-a333-6e53781e3cc8" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Cookie" value="${#TestSuite#Cookie}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://${#TestSuite#serverName}.ssi-cloud.com</con:endpoint><con:request>{"inversesummary":true,"filter":{"_id":"${#TestCase#TaskID}"},"params":{"start":0,"limit":1},"origin":{"component":"AvalonCollection","url":"#tab/app.tasks"}}</con:request><con:originalUri>https://qa-internal.dev.ssi-cloud.com/rest/api/dell/app.tasks::find</con:originalUri><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters><entry key="inversesummary" value="true" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>inversesummary</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="Property Transfer-CompletedDate" id="8aacbf32-6bab-40d7-b793-101fc34bb11f"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>CompletedDate</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>TaskDetails-Completed</con:sourceStep><con:sourcePath>declare namespace ns1='https://qa-internal.dev.ssi-cloud.com/rest/api/dell/app.tasks::find';
//ns1:Response[1]/ns1:data[1]/ns1:app.task[1]/ns1:e[1]/ns1:flows[1]/ns1:taskStatus[1]/ns1:transitions[1]/ns1:e[2]/ns1:changeDate[1]</con:sourcePath><con:targetType>CompletedDate</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:targetPath/><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TatTotal</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>TaskDetails-Completed</con:sourceStep><con:sourcePath>declare namespace ns1='https://qa-internal.dev.ssi-cloud.com/rest/api/dell/app.tasks::find';
//ns1:Response[1]/ns1:data[1]/ns1:app.task[1]/ns1:e[1]/ns1:extensions[1]/ns1:master[1]/ns1:tatTotal[1]/ns1:value[1]</con:sourcePath><con:targetType>TatTotal</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TatNet</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>TaskDetails-Completed</con:sourceStep><con:sourcePath>declare namespace ns1='https://qa-internal.dev.ssi-cloud.com/rest/api/dell/app.tasks::find';
//ns1:Response[1]/ns1:data[1]/ns1:app.task[1]/ns1:e[1]/ns1:extensions[1]/ns1:master[1]/ns1:tatNet[1]/ns1:value[1]</con:sourcePath><con:targetType>TatNet</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script-OnHold-Requested_Calculation" id="c877bc8b-9069-48d3-b5a8-d2c39026a199"><con:settings/><con:config><script><![CDATA[import java.text.SimpleDateFormat;
import java.util.Date;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.text.DateFormat;
import java.util.TimeZone;
import java.util.concurrent.TimeUnit;
import java.lang.Long
def onHoldTime = context.expand( '${#TestCase#OnHoldTime}' )

def timeZone = context.expand( '${#TestCase#TimeZone}' )
log.info("onHoldTime: " + onHoldTime);


def createdOnDate = context.expand( '${#TestCase#CreatedOnDate}' )

SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ");
TimeZone tzFromrecord = TimeZone.getTimeZone(timeZone);

//OnHold Date
Date Hdate = sdf.parse(onHoldTime.replaceAll("Z", "+0000"));
log.info("Hdate: " + Hdate);

//requested Date
Date Requestdate = sdf.parse(createdOnDate.replaceAll("Z", "+0000"));
log.info("date: " + Requestdate);

use(groovy.time.TimeCategory) {
    def duration = Hdate - Requestdate
    log.info ("HoldTimediff::" + duration )
    log.info "Days: ${duration.days}, Hours: ${duration.hours},Minutes: ${duration.minutes},Seconds: ${duration.seconds}"
     
    testRunner.testCase.setPropertyValue( "HoldTimediff", duration.toString());
     def minutes=0
     def seconds=0

 StringBuilder sb = new StringBuilder(64);
        sb.append(duration.days);
        sb.append(" Days ");
        sb.append(duration.hours);
        sb.append(" Hours ");
      

        if (duration.minutes==0 && duration.seconds>0){
           minutes=duration.minutes+1
        	 sb.append(minutes);
           sb.append(" Minutes ");
        	 seconds=0
        	 sb.append(seconds);
           sb.append(" Seconds");
        }
      else if (duration.minutes>0 && duration.seconds>0 && duration.seconds<=30){
	      sb.append(duration.minutes);
	      sb.append(" Minutes ");
        	 seconds=0
        	 sb.append(seconds);
           sb.append(" Seconds");
        }
     else if (duration.minutes>0 && duration.seconds>30){
        	minutes=duration.minutes+1
        	 sb.append(minutes);
        	 sb.append(" Minutes ");
        	 seconds=0
        	 sb.append(seconds);
        	 sb.append(" Seconds");
        	}
              
log.info("sbTime::" + sb.toString())
 testRunner.testCase.setPropertyValue( "TimediffAfterCal-request-hold", sb.toString());



  a= TimeUnit.DAYS.toMillis(duration.days);     
  b= TimeUnit.HOURS.toMillis(duration.hours); 
  c= TimeUnit.MINUTES.toMillis(duration.minutes);    
  d= TimeUnit.SECONDS.toMillis(duration.seconds);

  if (duration.minutes==0 && duration.seconds>0 && duration.seconds<=30){
    minutes = duration.minutes + 1
    seconds = 0
    
       c= TimeUnit.MINUTES.toMillis(minutes);    
       d= TimeUnit.SECONDS.toMillis(seconds);
  }

   else if (duration.minutes>0 && duration.seconds>0 && duration.seconds<=30){
   	      seconds = 0
	 
           c= TimeUnit.MINUTES.toMillis(duration.minutes);    
           d= TimeUnit.SECONDS.toMillis(seconds);
        }
 else if (duration.minutes>0 && seconds>30){
           minutes=duration.minutes+1
           seconds = 0
	
           c= TimeUnit.MINUTES.toMillis(minutes);    
           d= TimeUnit.SECONDS.toMillis(seconds);
 	
 }
  
  
  e = a+b+c+d
  log.info e    
  log.info a
  log.info b
  log.info c
  log.info d

  
  
testRunner.testCase.setPropertyValue( "TimediffAfterCal-request-holdmilies", e.toString());
    
}










]]></script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script-TatCalculations(DateDiff)-TimediffAfterCal" id="07a5a325-2729-4651-b5b8-03c133aaee76"><con:settings/><con:config><script><![CDATA[import java.text.SimpleDateFormat;
import java.util.Date;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.text.DateFormat;
import java.util.TimeZone;
import java.util.concurrent.TimeUnit;
import java.lang.Long

def releaseHoldTime = context.expand( '${#TestCase#ReleaseHoldTime}' )
def completedDate = context.expand( '${#TestCase#CompletedDate}' )
def timeZone = context.expand( '${#TestCase#TimeZone}' )


log.info("completedDate: " + completedDate);
log.info("timeZone: " + timeZone);



SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ");
TimeZone tzFromrecord = TimeZone.getTimeZone(timeZone);

//releaseHold Date
Date Rdate = sdf.parse(releaseHoldTime.replaceAll("Z", "+0000"));
log.info("Rdate: " + Rdate);

//change Date
Date Completedate = sdf.parse(completedDate.replaceAll("Z", "+0000"));
log.info("Completedate: " + Completedate);


use(groovy.time.TimeCategory) {
    def duration = Rdate - Completedate
    log.info ("Timediff::" + duration)
    log.info "Days: ${duration.days}, Hours: ${duration.hours},Minutes: ${duration.minutes},Seconds: ${duration.seconds}"
    testRunner.testCase.setPropertyValue( "Timediff-release-complete", duration.toString());
     def minutes=0
     def seconds=0

   StringBuilder sb = new StringBuilder(64);
        sb.append(duration.days);
        sb.append(" Days ");
        sb.append(duration.hours);
        sb.append(" Hours ");
      

        if (duration.minutes==0 && duration.seconds>0){
           minutes=duration.minutes+1
        	 sb.append(minutes);
        	 sb.append(" Minutes ");
        	 seconds=0
        	 sb.append(seconds);
           sb.append(" Seconds");
        }
       else if (duration.minutes>0 && duration.seconds>0 && duration.seconds<=30){
	      sb.append(duration.minutes);
        	 sb.append(" Minutes ");
        	 seconds=0
        	 sb.append(seconds);
           sb.append(" Seconds");
        }
        else if (duration.minutes>0 && duration.seconds>30){
        	minutes=duration.minutes+1
        	 sb.append(minutes);
        	 sb.append(" Minutes ");
        	seconds=0
        	 sb.append(seconds);
           sb.append(" Seconds");
        	}
              
log.info("sbTime::" + sb.toString())
testRunner.testCase.setPropertyValue( "TimediffAfterCal-release-complete", sb.toString());

    
}




]]></script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script-TAT Calculations(TATNET + TATTOTAL)" id="d4bafc23-ae76-4b5f-9263-675ef94dc41d"><con:settings/><con:config><script><![CDATA[import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.TimeZone;
import java.util.concurrent.TimeUnit;
def quoteID = context.expand( '${#TestCase#QuoteID}' )
def timeZone = context.expand( '${#TestCase#TimeZone}' )
def requestedTime = context.expand( '${#TestCase#requestedTime}' )
def changeDate = context.expand( '${#TestCase#ChangeDate}' )
def holdTimediffAfterCal = context.expand( '${#TestCase#HoldTimediffAfterCal}' )

def turnaroundTime = context.expand( '${#TestCase#TurnaroundTime}' )
def tatNet = context.expand( '${#TestCase#TatNet}' )
def tatTotal = context.expand( '${#TestCase#TatTotal}' )
def long minutes1 = tatTotal.toLong()
def long minutes2 = tatNet.toLong()
def long tatTotalmillies = minutes1 * 60 * 1000;
def long tatNetmillies = minutes2 * 60 * 1000;
testRunner.testCase.setPropertyValue( "tatTotalmillies", tatTotalmillies.toString());
testRunner.testCase.setPropertyValue( "tatNetmillies1", tatNetmillies.toString());

def holdTimediffAfterCalmilies = context.expand( '${#TestCase#HoldTimediffAfterCalmilies}' )
def long holdTimediffAfterCalmilies1 = holdTimediffAfterCalmilies.toLong()

getDurationBreakdownMinutes(tatTotalmillies)
getDurationBreakdownMinutes1(tatNetmillies)

getDurationBreakdownMinutes11(holdTimediffAfterCalmilies1)


def String getDurationBreakdownMinutes(long tatTotalmillies)
    {
        if(tatTotalmillies < 0)
        {
            throw new IllegalArgumentException("Duration must be greater than zero!");
        }

        long days = TimeUnit.MILLISECONDS.toDays(tatTotalmillies);
        tatTotalmillies -= TimeUnit.DAYS.toMillis(days);
        long hours = TimeUnit.MILLISECONDS.toHours(tatTotalmillies);
        tatTotalmillies -= TimeUnit.HOURS.toMillis(hours);
        long minutes = TimeUnit.MILLISECONDS.toMinutes(tatTotalmillies);
        tatTotalmillies -= TimeUnit.MINUTES.toMillis(minutes);
        long seconds = TimeUnit.MILLISECONDS.toSeconds(tatTotalmillies);

        StringBuilder sb = new StringBuilder(64);
        sb.append(days);
        sb.append(" Days ");
        sb.append(hours);
        sb.append(" Hours ");
        sb.append(minutes);
        sb.append(" Minutes "); 
        sb.append(seconds);
        sb.append(" Seconds");
        
        log.info("TAT_TOTAL : " + sb.toString())
        testRunner.testCase.setPropertyValue( "TatfromTatTotal", sb.toString());
    }

def String getDurationBreakdownMinutes1(long tatNetmillies)
    {
        if(tatNetmillies < 0)
        {
            throw new IllegalArgumentException("Duration must be greater than zero!");
        }

        long days = TimeUnit.MILLISECONDS.toDays(tatNetmillies);
        tatNetmillies -= TimeUnit.DAYS.toMillis(days);
        long hours = TimeUnit.MILLISECONDS.toHours(tatNetmillies);
        tatNetmillies -= TimeUnit.HOURS.toMillis(hours);
        long minutes = TimeUnit.MILLISECONDS.toMinutes(tatNetmillies);
        tatNetmillies -= TimeUnit.MINUTES.toMillis(minutes);
        long seconds = TimeUnit.MILLISECONDS.toSeconds(tatNetmillies);

        StringBuilder sb = new StringBuilder(64);
        sb.append(days);
        sb.append(" Days ");
        sb.append(hours);
        sb.append(" Hours ");
        sb.append(minutes);
        sb.append(" Minutes "); 
        sb.append(seconds);
        sb.append(" Seconds");
        
        log.info("TAT_NET : " +sb.toString())
        testRunner.testCase.setPropertyValue( "tatNetmillies", sb.toString());
    }

def String getDurationBreakdownMinutes11(long holdTimediffAfterCalmilies1)
    {

    	 
        if(holdTimediffAfterCalmilies1 < 0)
        {
            throw new IllegalArgumentException("Duration must be greater than zero!");
        }

        long days = TimeUnit.MILLISECONDS.toDays(holdTimediffAfterCalmilies1);
        holdTimediffAfterCalmilies1 -= TimeUnit.DAYS.toMillis(days);
        long hours = TimeUnit.MILLISECONDS.toHours(holdTimediffAfterCalmilies1);
        holdTimediffAfterCalmilies1 -= TimeUnit.HOURS.toMillis(hours);
        long minutes = TimeUnit.MILLISECONDS.toMinutes(holdTimediffAfterCalmilies1);
        holdTimediffAfterCalmilies1 -= TimeUnit.MINUTES.toMillis(minutes);
        long seconds = TimeUnit.MILLISECONDS.toSeconds(holdTimediffAfterCalmilies1);

        StringBuilder sb = new StringBuilder(64);
        sb.append(days);
        sb.append(" Days ");
        sb.append(hours);
        sb.append(" Hours ");
     if (minutes==0 && seconds>0){
           minutes=minutes+1
        	 sb.append(minutes);
        	 sb.append(" Minutes ");
        	 seconds=0
        	 sb.append(seconds);
           sb.append(" Seconds");
        }
       else if (minutes>0 && seconds>0 && seconds<=30){
	      sb.append(minutes);
        	 sb.append(" Minutes ");
        	 seconds=0
        	 sb.append(seconds);
           sb.append(" Seconds");
        }
        else if (minutes>0 && seconds>30){
        	minutes=minutes+1
        	 sb.append(minutes);
        	 sb.append(" Minutes ");
        	seconds=0
        	 sb.append(seconds);
           sb.append(" Seconds");
        	}

        
        log.info("TAT_HOLD_TIME : " +sb.toString())
        testRunner.testCase.setPropertyValue( "holdTimediffAfterCalmilies111", sb.toString());
    }



    ]]></script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script 6" id="f46d1a74-49a8-40d8-af44-d1efc133071d"><con:settings/><con:config><script>def tatTotalmillies = context.expand( '${#TestCase#tatTotalmillies}' )
def tatNetmillies1 = context.expand( '${#TestCase#tatNetmillies1}' )
def holdTimediffAfterCalmilies = context.expand( '${#TestCase#HoldTimediffAfterCalmilies}' )
def long tatTotalmillies1 = tatTotalmillies.toLong()
def long tatNetmillies11 = tatNetmillies1.toLong()
def long holdTimediffAfterCalmilies1 = holdTimediffAfterCalmilies.toLong()

log.info tatTotalmillies
log.info tatNetmillies1
log.info holdTimediffAfterCalmilies

ReleaseHoldtime = (tatNetmillies11 + holdTimediffAfterCalmilies1)

testRunner.testCase.setPropertyValue( "Release_Holdtime", ReleaseHoldtime.toString());

//assert tatTotalmillies1 == ReleaseHoldtime


def timediffAfterCalrequesthold = context.expand( '${#TestCase#TimediffAfterCal-request-hold}' )
def timediffAfterCalreleasecomplete = context.expand( '${#TestCase#TimediffAfterCal-release-complete}' )
def timediffAfterCalrequesthold1 = context.expand( '${#TestCase#TimediffAfterCal-request-hold}' )
def timediffreleasecomplete = context.expand( '${#TestCase#Timediff-release-complete}' )

log.info timediffAfterCalrequesthold
log.info timediffAfterCalreleasecomplete

log.info timediffAfterCalrequesthold1
log.info timediffreleasecomplete



</script></con:config></con:testStep><con:testStep type="groovy" name="Assertion For TatTotal and TatNet" id="f85c29ed-fee6-4a2b-8cff-82cf24d2babf"><con:settings/><con:config><script>def tatfromTatTotal = context.expand( '${#TestCase#TatfromTatTotal}' )
def tatNetmillies = context.expand( '${#TestCase#tatNetmillies}' )
def timediffAfterCal = context.expand( '${#TestCase#TimediffAfterCal}' )
def holdTimediffAfterCal = context.expand( '${#TestCase#HoldTimediffAfterCal}' )
def long tatTotalmillies1 = tatTotalmillies.toLong()



log.info ("tatfromTatTotal " + tatfromTatTotal)
log.info ("tatNetmillies " + tatNetmillies)
log.info ("timediffAfterCal " + timediffAfterCal)
log.info ("holdTimediffAfterCal " + holdTimediffAfterCal)

def tatNetmillies1 =(tatfromTatTotal - holdTimediffAfterCal)
log.info ("tatNetmillies1 " + tatNetmillies1)

assert tatNetmillies==timediffAfterCal

//assert tatNetmillies==tatNetmillies1

</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script 5" id="f747ff42-2d67-4252-9463-c466073e03ad" disabled="true"><con:settings/><con:config><script>import java.text.SimpleDateFormat;
import java.util.Date;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.text.DateFormat;
import java.util.TimeZone;
import java.util.concurrent.TimeUnit;
import java.lang.Long
def createdOnDate = context.expand( '${#TestCase#CreatedOnDate}' )
def completedDate = context.expand( '${#TestCase#CompletedDate}' )

//log.info createdOnDate
//log.info completedDate

//String string = createdOnDate;
//String string1 = completedDate;

SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ");
SimpleDateFormat output = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS");

//createdOnDate
Date date = sdf.parse(createdOnDate.replaceAll("Z", "+0000"));
String nTime = output.format(date);
myDate = Date.parse("yyyy-MM-dd'T'HH:mm:ss.SSS", nTime) ;
//log.info("string: " + string);
log.info("date: " + nTime);

//completedDate
Date date1 = sdf.parse(completedDate.replaceAll("Z", "+0000"));
log.info("date1: " + date1);

String nTime1 = output.format(date1);
myDate1 = Date.parse("yyyy-MM-dd'T'HH:mm:ss.SSS", nTime1) ;
log.info("myDate1: " + myDate1);
log.info("date: " + nTime1);

DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS");
//get current date time with Date()
Date date2 = new Date();
log.info(dateFormat.format(date2));
//log.info firstDayOfWeekTimestamp
// Get calendar set to current date and time
Calendar c = Calendar.getInstance();
 	    c.set(Calendar.HOUR_OF_DAY, 0);
         c.set(Calendar.MINUTE, 0);
         c.set(Calendar.SECOND, 0);
         c.set(Calendar.MILLISECOND, 0);
         
         log.info c.getTime();


    
t2=(dateFormat.format(c.getTime()))
t3=(dateFormat.parse(t2))
Timeinhours=(myDate1 - t3);
log.info ("Time: " + Timeinhours);


DateDifferentExample(nTime1,t2)





Long DateDifferentExample(String dateStart,String dateStop) {

		//HH converts hour in 24 hours format (0-23), day calculation
		SimpleDateFormat format = new SimpleDateFormat("MM/dd/yyyy HH:mm:ss");

		Date d1 = null;
		Date d2 = null;

		try {
			d1 = format.parse(dateStart);
			d2 = format.parse(dateStop);

			//in milliseconds
			long diff = d2.getTime() - d1.getTime();

			long diffSeconds = diff / 1000 % 60;
			long diffMinutes = diff / (60 * 1000) % 60;
			long diffHours = diff / (60 * 60 * 1000) % 24;
			long diffDays = diff / (24 * 60 * 60 * 1000);

			log.info(diffDays + " days, ");
			log.info(diffHours + " hours, ");
			log.info(diffMinutes + " minutes, ");
			log.info(diffSeconds + " seconds.");

		} catch (Exception e) {
			e.printStackTrace();
		}

	}

</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script" id="e2bd4956-9c45-4ec6-8838-49547e0e0bcc" disabled="true"><con:settings/><con:config><script>import java.text.SimpleDateFormat;
import java.util.Date;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.text.DateFormat;
import java.util.TimeZone;
import java.util.concurrent.TimeUnit;
import java.lang.Long

def createdOnDate = context.expand( '${#TestCase#CreatedOnDate}' )
def completedDate = context.expand( '${#TestCase#CompletedDate}' )


SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ");
SimpleDateFormat output = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS");

//createdOnDate
Date date = sdf.parse(createdOnDate.replaceAll("Z", "+0000"));

//completedDate
Date date1 = sdf.parse(completedDate.replaceAll("Z", "+0000"));


days(date,date1)


 Long days(Date start, Date end){
    //Ignore argument check

    Calendar c1 = Calendar.getInstance();
    c1.setTime(start);
    int w1 = c1.get(Calendar.DAY_OF_WEEK);
    c1.add(Calendar.DAY_OF_WEEK, -w1);

    Calendar c2 = Calendar.getInstance();
    c2.setTime(end);
    int w2 = c2.get(Calendar.DAY_OF_WEEK);
    c2.add(Calendar.DAY_OF_WEEK, -w2);

    //end Saturday to start Saturday 
    long days = (c2.getTimeInMillis()-c1.getTimeInMillis())/(1000*60*60*24);
    long daysWithoutWeekendDays = days-(days*2/7);

    // Adjust days to add on (w2) and days to subtract (w1) so that Saturday
    // and Sunday are not included
    if (w1 == Calendar.SUNDAY &amp;&amp; w2 != Calendar.SATURDAY) {
        w1 = Calendar.MONDAY;
    } else if (w1 == Calendar.SATURDAY &amp;&amp; w2 != Calendar.SUNDAY) {
        w1 = Calendar.FRIDAY;
    } 

    if (w2 == Calendar.SUNDAY) {
        w2 = Calendar.MONDAY;
    } else if (w2 == Calendar.SATURDAY) {
        w2 = Calendar.FRIDAY;
    }
   log.info("days: " + (daysWithoutWeekendDays-w1+w2));
    //return daysWithoutWeekendDays-w1+w2;
}</script></con:config></con:testStep><con:properties><con:property><con:name>CompletedDate</con:name><con:value>2016-06-06T11:36:18.532Z</con:value></con:property><con:property><con:name>CreatedOnDate</con:name><con:value>2016-06-06T07:11:59.957Z</con:value></con:property><con:property><con:name>TaskDisplayName</con:name><con:value>Task588</con:value></con:property><con:property><con:name>TaskID</con:name><con:value>57552240e4b0d26080d95960</con:value></con:property><con:property><con:name>TatfromTatTotal</con:name><con:value>0 Days 4 Hours 33 Minutes 0 Seconds</con:value></con:property><con:property><con:name>TatNet</con:name><con:value>264</con:value></con:property><con:property><con:name>tatNetmillies</con:name><con:value>0 Days 4 Hours 24 Minutes 0 Seconds</con:value></con:property><con:property><con:name>TatTotal</con:name><con:value>273</con:value></con:property><con:property><con:name>Timediff</con:name><con:value>9 minutes, 2.556 seconds</con:value></con:property><con:property><con:name>TimediffAfterCal</con:name><con:value>0 Days 0 Hours 9 Minutes 0 Seconds</con:value></con:property><con:property><con:name>TimeZone</con:name><con:value>UTC+5:30</con:value></con:property><con:property><con:name>OnHoldTime</con:name><con:value>2016-06-06T11:36:18.532Z</con:value></con:property><con:property><con:name>ReleaseHoldTime</con:name><con:value>2016-06-06T11:45:21.088Z</con:value></con:property><con:property><con:name>HoldTimediffAfterCal</con:name><con:value>0 Days 4 Hours 24 Minutes 0 Seconds</con:value></con:property><con:property><con:name>HoldTimediff</con:name><con:value>4 hours, 24 minutes, 18.575 seconds</con:value></con:property><con:property><con:name>tatTotalmillies</con:name><con:value>16380000</con:value></con:property><con:property><con:name>tatNetmillies1</con:name><con:value>15840000</con:value></con:property><con:property><con:name>HoldTimediffAfterCalmilies</con:name><con:value>15840000</con:value></con:property><con:property><con:name>holdTimediffAfterCalmilies111</con:name><con:value>0 Days 4 Hours </con:value></con:property><con:property><con:name>Release_Holdtime</con:name><con:value>31680000</con:value></con:property><con:property><con:name>TimediffAfterCal-request-hold</con:name><con:value>0 Days 4 Hours 24 Minutes 0 Seconds</con:value></con:property><con:property><con:name>TimediffAfterCal-request-holdmilies</con:name><con:value>15840000</con:value></con:property><con:property><con:name>TimediffAfterCal-release-complete</con:name><con:value>0 Days 0 Hours 9 Minutes 0 Seconds</con:value></con:property><con:property><con:name>Timediff-release-complete</con:name><con:value>9 minutes, 2.556 seconds</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>6bda5a34-450f-427a-af64-6c06a948395d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c7cd9b4b-e847-484c-aef7-6b7380700d73</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f24e4578-6c82-46aa-963a-5be8c0cac063</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>ef6b8989-f85b-439f-b50a-064ecf6480d4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>08492c3e-1c05-4fb7-ac4f-4644aa99fe2d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>cd7dda61-054f-4b73-8ef1-a81f73dcfb35</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>34f3dc72-65dc-4452-98c0-80d30fcc8a99</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e8f28702-0bc9-4036-9269-40cb7b269127</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a7a4514c-8022-43f4-bddb-7eb7e9e57eb4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b0781b13-9069-4920-b8e0-da5056f60acc</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>abb9589a-6acc-43c5-be4a-6d0706076783</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>38d5323c-6b32-4a56-8651-cdc8bb662d04</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a669b610-7fe8-4b11-a48b-1be8f355162d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>025207ce-1af5-4a8e-89ac-a51bfcf77da3</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>4c2d4d8f-dc57-4fb2-81af-883615f468e3</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase id="0d985c3b-724a-422c-92c3-7edba76ea9a9" discardOkResults="true" failOnError="true" failTestCaseOnErrors="true" keepSession="false" name="Quotes_OnHold-Completed-Requested during weekday, Completed during weekday of the same week" searchProperties="true" disabled="true"><con:settings/><con:testStep type="calltestcase" name="Find Cookie" id="a2bfe6a0-e008-46de-bf90-f39236ce95be"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>c0ce29f2-7cb0-4efc-a1f0-d98a032504a6</con:targetTestCase><con:properties><con:property><con:name>qaDevCookies</con:name><con:value>[avalon.sid=s%3A54cb1cf0e4b004ec636c4d71.OKyf7Hynz6NWePZzjLl5L9azOOkbtfD5ExcpJE%2FUL48</con:value></con:property></con:properties><con:returnProperties><con:entry>qaDevCookies</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script -CreatedOnDate" id="e7e8098b-e984-43f0-abf1-43a618e9971e"><con:settings/><con:config><script>import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.text.DateFormat;
import java.util.Date;
import java.util.TimeZone;
import java.util.*
import org.joda.time.DateTime;

DateTime dateTime = new DateTime();
long firstDayOfWeekTimestamp = dateTime.withDayOfWeek(1).getMillis();
log.info firstDayOfWeekTimestamp
// Get calendar set to current date and time
Calendar c = Calendar.getInstance();
 	    c.set(Calendar.HOUR_OF_DAY, 0);
         c.set(Calendar.MINUTE, 0);
         c.set(Calendar.SECOND, 0);
         c.set(Calendar.MILLISECOND, 0);
        
       
// Set the calendar to SUNDAY of the current week
c.set(Calendar.DAY_OF_WEEK, Calendar.SUNDAY);

// Print dates of the current week starting on SUNDAY
DateFormat df = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ");
for (int i = 0; i &lt; 1; i++) {
    log.info(df.format(c.getTime()));
 DateFormat df1 = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS");
 log.info(df1.format(c.getTime()));
    //c.add(Calendar.DATE, 1);
    testRunner.testCase.setPropertyValue( "CreatedOnDate", (df1.format(c.getTime()).toString()+"Z"));
}</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script-FIndQuotesRequest" id="c4a58caf-3843-4c51-a81f-73f3411848e8"><con:settings/><con:config><script>import groovy.json.*
def serverName = context.expand( '${#TestSuite#serverName}' )
def tenant = context.expand( '${#TestSuite#tenant}' )
def createdOnDate = context.expand( '${#TestCase#CreatedOnDate}' )

if (tenant=="dell" &amp;&amp; serverName =="pe-internal.dev")
{

                def jsonText='''{"filter":{"flows.quoteStages.state.name":"requested","flows.quoteStages.transitions":{"$elemMatch":{"changeDate":{"$gte":"${#TestCase#CreatedOnDate}"},"toState":"requested"}},"isBase":false,"isDraft":false},"params":{"sort":{"systemProperties.createdOn":1},"start":0,"limit":50,"columns":["_id","type","systemProperties","displayName","requestReason","flows.quoteStages.state","flows.quoteStages.target","relationships.requestedBy","relationships.assignee","expirationDate","flows.quoteStages.transitions","dueDate","amount.normalizedAmount","relationships.customer","tags","flows.quoteStages.transitions","flows.quoteStages.transitions"]},"origin":{"component":"AvalonGridDuplo"},"inversesummary":false}'''
}
else
{
                def jsonText='''{"filter":{"flows.quoteStages.state.name":"requested","systemProperties.createdOn":{"$gt":"${#TestCase#CreatedOnDate}"},"isBase":false,"isDraft":false},"params":{"sort":{"dueDate":1},"start":0,"limit":50,"columns":["_id","type","systemProperties","displayName","requestReason","flows.quoteStages.state","flows.quoteStages.target","relationships.requestedBy","relationships.assignee","expirationDate","flows.quoteStages.transitions","dueDate","amount.normalizedAmount","relationships.customer","tags","flows.quoteStages.transitions","flows.quoteStages.transitions"]},"origin":{"component":"AvalonGridDuplo","url":"#tab/app.quotes/vq=STATUS%3A%20%22Requested%7CStaged%7COn%20Hold%22%20CREATED-ON%3A%20%22%3E04-24-2016%22"},"inversesummary":false}'''
}




//{"filter":{"flows.quoteStages.state.name":"requested","systemProperties.createdOn":{"$gt":"${#TestCase#CreatedOnDate}"},"isBase":false,"isDraft":false},"params":{"sort":{"systemProperties.createdOn":1},"start":0,"limit":50,"columns":["_id","type","systemProperties","displayName","requestReason","flows.quoteStages.state","flows.quoteStages.target","relationships.requestedBy","relationships.assignee","expirationDate","flows.quoteStages.transitions","dueDate","amount.normalizedAmount","relationships.customer","tags","flows.quoteStages.transitions","flows.quoteStages.transitions"]},"origin":{"component":"AvalonGridDuplo","url":"#tab/app.quotes/vq=STATUS%3A%20%22Requested%22%20CREATED-ON%3A%20%22%3E04-14-2016%22"},"inversesummary":false}</script></con:config></con:testStep><con:testStep type="restrequest" name="FindQuotes" id="a5e6344b-7111-4e08-aaf2-7baf250cb7ac"><con:settings/><con:config service="FindQuotes" resourcePath="/rest/api/dell/app.quotes::find" methodName="App.quotes::find" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="FindQuotes" id="0303b810-05fa-4e34-9420-745dad712ec3" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Cookie" value="${#TestSuite#Cookie}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://${#TestSuite#serverName}.ssi-cloud.com</con:endpoint><con:request>{"filter":{"tags":{"$nin":[{"$regex":"^TAT_TEST"},{"$regex":"^Functional_QA"}]},"flows.quoteStages.state.name":"requested","systemProperties.createdOn":{"$gte":"${#TestCase#CreatedOnDate}"},"isBase":false,"isDraft":false},"params":{"sort":{"systemProperties.createdOn":1},"start":0,"limit":50,"columns":["_id","type","systemProperties","displayName","requestReason","flows.quoteStages.state","flows.quoteStages.target","relationships.requestedBy","relationships.assignee","expirationDate","flows.quoteStages.transitions","dueDate","amount.normalizedAmount","relationships.customer","tags","flows.quoteStages.transitions","flows.quoteStages.transitions"]},"origin":{"component":"AvalonGridDuplo"},"inversesummary":false}</con:request><con:originalUri>https://qa-internal.dev.ssi-cloud.com/rest/api/dell/app.quotes::find</con:originalUri><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="Property Transfer-quoteCount" id="c32b8ba8-1489-4fa6-a63b-c9f3d1f7ef8e"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>quoteCount</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>FindQuotes</con:sourceStep><con:sourcePath>declare namespace ns1='https://qa-internal.dev.ssi-cloud.com/rest/api/dell/app.quotes::find';
//ns1:Response[1]/ns1:recordCount[1]/ns1:app.quote[1]</con:sourcePath><con:targetType>quoteCount</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:targetPath/><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="QuoteID" id="d6aff545-18b9-4b13-83fc-fa5fde4d55f5"><con:settings/><con:config><script>import groovy.json.JsonSlurper
import com.eviware.soapui.support.XmlHolder
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
def holder = groovyUtils.getXmlHolder(testRunner.testCase.testSteps["FindQuotes"].testRequest.response.getContentAsXml());
def quoteCount = context.expand( '${#TestCase#QuoteCount}' )

log.info quoteCount


def QuoteIDs=[]

                def i=1
                def j=1
                for(node in holder["//ns1:Response[1]/ns1:data[1]/ns1:app.quote[1]/ns1:e[${i}]"])
                {              

               rate = holder.getNodeValue("ns1:Response[1]/ns1:data[1]/ns1:app.quote[1]/ns1:e[${i}]/ns1:amount[1]/ns1:normalizedAmount[1]/ns1:rate[1]")   
               affinityOrg= holder.getNodeValue("ns1:Response[1]/ns1:data[1]/ns1:app.quote[1]/ns1:e[${i}]/ns1:relationships[1]/ns1:e[2]/ns1:target[1]/ns1:relationships[1]/ns1:affinityOrganization[1]/ns1:targets[1]/ns1:e[1]/ns1:extensions[1]/ns1:tenant[1]/ns1:l0AffinityId[1]/ns1:value[1]")
          
              log.info rate
              log.info affinityOrg
              if(rate != null){
             // if(rate != null&amp;&amp; affinityOrg != null){
              	
          
                                id = holder.getNodeValue("ns1:Response[1]/ns1:data[1]/ns1:app.quote[1]/ns1:e[1]/ns1:_id[1]" )
                                QuoteIDs.add(id)                              
                                i=i+1
                                log.info i
                                if(i==quoteCount.toInteger())
                                break;
                }}
testRunner.testCase.setPropertyValue( "rate", rate.toString() ) 
testRunner.testCase.setPropertyValue( "QuoteIDs", QuoteIDs.toString())
testRunner.testCase.setPropertyValue( "quoteCount1", i.toString())
log.info QuoteIDs.toString()
def count=0
testRunner.testCase.setPropertyValue( "i", count.toString() )
def flag=false
testRunner.testCase.setPropertyValue( "flag",flag.toString())

</script></con:config></con:testStep><con:testStep type="groovy" name="Counter" id="33b630f0-44f5-4db9-b58c-bc950aacffde"><con:settings/><con:config><script>def i = context.expand( '${#TestCase#i}' )
log.info i

def quoteID = context.expand( '${#TestCase#QuoteIDs#$[${#TestCase#i}]}' )
log.info quoteID
testRunner.testCase.setPropertyValue( "quoteID", quoteID.toString() )
</script></con:config></con:testStep><con:testStep type="restrequest" name="QuoteDetails" id="22bcbd87-6223-4c87-a188-7e57948bf865"><con:settings/><con:config service="QuoteDetails" resourcePath="/rest/api/dell/app.quotes::find" methodName="App.quotes::find" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="QuoteDetails" id="73cce1c1-ad05-4f68-83e5-e387a9e63e66" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Cookie" value="${#TestSuite#Cookie}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://${#TestSuite#serverName}.ssi-cloud.com</con:endpoint><con:request>{"inversesummary":true,"extinversesummary":true,"filter":{"_id":"${#TestCase#QuoteID}"},"params":{"start":0,"limit":1},"origin":{"component":"AvalonCollection"}}</con:request><con:originalUri>https://qa-internal.dev.ssi-cloud.com/rest/api/dell/app.quotes::find</con:originalUri><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters>
  <con:entry key="inversesummary" value="true"/>
  <con:entry key="extinversesummary" value="true"/>
</con:parameters><con:parameterOrder><con:entry>inversesummary</con:entry><con:entry>extinversesummary</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="Property Transfer-TimeZone" id="93655874-7643-4436-b16f-9f1b7cd2f236"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TimeZone</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>QuoteDetails</con:sourceStep><con:sourcePath>declare namespace ns1='https://qa-internal.dev.ssi-cloud.com/rest/api/dell/app.quotes::find';
//ns1:Response[1]/ns1:data[1]/ns1:app.quote[1]/ns1:e[1]/ns1:extensions[1]/ns1:master[1]/ns1:requestedTimeZone[1]/ns1:value[1]/ns1:displayName[1]</con:sourcePath><con:targetType>TimeZone</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:targetPath/><con:type>XPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TimeZoneKey</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>QuoteDetails</con:sourceStep><con:sourcePath>declare namespace ns1='https://qa-internal.dev.ssi-cloud.com/rest/api/dell/app.quotes::find';
//ns1:Response[1]/ns1:data[1]/ns1:app.quote[1]/ns1:e[1]/ns1:extensions[1]/ns1:master[1]/ns1:requestedTimeZone[1]/ns1:value[1]/ns1:key[1]</con:sourcePath><con:targetType>TimeZoneKey</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>amount1</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>QuoteDetails</con:sourceStep><con:sourcePath>declare namespace ns1='https://qa-internal.dev.ssi-cloud.com/rest/api/dell/app.quotes::find';
//ns1:Response[1]/ns1:data[1]/ns1:app.quote[1]/ns1:e[1]/ns1:amount[1]/ns1:amount[1]</con:sourcePath><con:targetType>amount</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>corelookupKey</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>QuoteDetails</con:sourceStep><con:sourcePath>declare namespace ns1='https://qa-internal.dev.ssi-cloud.com/rest/api/dell/app.quotes::find';
//ns1:Response[1]/ns1:data[1]/ns1:app.quote[1]/ns1:e[1]/ns1:amount[1]/ns1:code[1]/ns1:key[1]</con:sourcePath><con:targetType>coreLookUpKey</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>coreLookUpKEY2</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>QuoteDetails</con:sourceStep><con:sourcePath>declare namespace ns1='https://qa-internal.dev.ssi-cloud.com/rest/api/dell/app.quotes::find';
//ns1:Response[1]/ns1:data[1]/ns1:app.quote[1]/ns1:e[1]/ns1:amount[1]/ns1:normalizedAmount[1]/ns1:code[1]/ns1:key[1]</con:sourcePath><con:targetType>coreLookUpKEY2</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>currencyName1</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>QuoteDetails</con:sourceStep><con:sourcePath>declare namespace ns1='https://qa-internal.dev.ssi-cloud.com/rest/api/dell/app.quotes::find';
//ns1:Response[1]/ns1:data[1]/ns1:app.quote[1]/ns1:e[1]/ns1:amount[1]/ns1:code[1]/ns1:name[1]</con:sourcePath><con:targetType>currencyName1</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false"><con:name>currencyDisplayName1</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>QuoteDetails</con:sourceStep><con:sourcePath>declare namespace ns1='https://qa-internal.dev.ssi-cloud.com/rest/api/dell/app.quotes::find';
//ns1:Response[1]/ns1:data[1]/ns1:app.quote[1]/ns1:e[1]/ns1:amount[1]/ns1:code[1]/ns1:displayName[1]</con:sourcePath><con:targetType>currencyDisplayName1</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:targetPath xsi:nil="true"/><con:type>XPATH</con:type><con:targetTransferType>XPATH</con:targetTransferType><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false"><con:name>currencyDisplayName2</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>QuoteDetails</con:sourceStep><con:sourcePath>declare namespace ns1='https://qa-internal.dev.ssi-cloud.com/rest/api/dell/app.quotes::find';
//ns1:Response[1]/ns1:data[1]/ns1:app.quote[1]/ns1:e[1]/ns1:amount[1]/ns1:normalizedAmount[1]/ns1:code[1]/ns1:displayName[1]</con:sourcePath><con:targetType>currencyDisplayName2</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:targetPath xsi:nil="true"/><con:type>XPATH</con:type><con:targetTransferType>XPATH</con:targetTransferType><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>CurrencyName2</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>QuoteDetails</con:sourceStep><con:sourcePath>declare namespace ns1='https://qa-internal.dev.ssi-cloud.com/rest/api/dell/app.quotes::find';
//ns1:Response[1]/ns1:data[1]/ns1:app.quote[1]/ns1:e[1]/ns1:amount[1]/ns1:normalizedAmount[1]/ns1:code[1]/ns1:name[1]</con:sourcePath><con:targetType>currencyName2</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>amount2</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>QuoteDetails</con:sourceStep><con:sourcePath>declare namespace ns1='https://qa-internal.dev.ssi-cloud.com/rest/api/dell/app.quotes::find';
//ns1:Response[1]/ns1:data[1]/ns1:app.quote[1]/ns1:e[1]/ns1:amount[1]/ns1:normalizedAmount[1]/ns1:amount[1]</con:sourcePath><con:targetType>amount2</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>QuoteName</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>QuoteDetails</con:sourceStep><con:sourcePath>declare namespace ns1='https://qa-internal.dev.ssi-cloud.com/rest/api/dell/app.quotes::find';
//ns1:Response[1]/ns1:data[1]/ns1:app.quote[1]/ns1:e[1]/ns1:displayName[1]</con:sourcePath><con:targetType>QuoteName</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="Counter++" id="fc135bc3-6cee-47d4-a662-f2b4efe6b55d"><con:settings/><con:config><script>import groovy.json.JsonSlurper
import com.eviware.soapui.support.XmlHolder
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
def holder = groovyUtils.getXmlHolder(testRunner.testCase.testSteps["QuoteDetails"].testRequest.response.getContentAsXml());
def flag = context.expand( '${#TestCase#flag}' )                                





                          timeZone=holder.getNodeValue("//ns1:Response[1]/ns1:data[1]/ns1:app.quote[1]/ns1:e[1]/ns1:extensions[1]/ns1:master[1]/ns1:requestedTimeZone[1]/ns1:value[1]/ns1:displayName[1]")
                          isrevised=holder.getNodeValue("//ns1:Response[1]/ns1:data[1]/ns1:app.quote[1]/ns1:e[1]/ns1:isRevised[1]")
                          
                                
                                log.info ("Timezone: " + timeZone)
                                log.info isrevised
                        
                                if(isrevised==null &amp;&amp; timeZone != null )
                                {
                            
                                flag==true
                                testRunner.testCase.setPropertyValue( "flag","true")                   
                                }
                                else
                                {
                                	testRunner.testCase.setPropertyValue( "flag","false")   
                                }
                                log.info flag
               
def i = context.expand( '${#TestCase#i}' )
log.info i
def c = i.toInteger()+1
testRunner.testCase.setPropertyValue( "i", c.toString() )
</script></con:config></con:testStep><con:testStep type="groovy" name="Counter Check" id="83c99a1f-9f45-4f5e-a0a4-75fec86cd9bb"><con:settings/><con:config><script>def i = context.expand( '${#TestCase#i}' )
def quoteCount = context.expand( '${#TestCase#QuoteCount}' )
def flag = context.expand( '${#TestCase#flag}' )
log.info i
log.info quoteCount
log.info flag
if((i.toInteger()&lt;quoteCount.toInteger())&amp;&amp; (flag=="false"))
{
   testRunner.gotoStepByName( "Counter" )
}
else if ((i.toInteger()==quoteCount.toInteger())&amp;&amp; (flag=="false"))
{
	testRunner.gotoStepByName( "Delay 3" );
	log.info ("Test Case Fail : DATA NOT FOUND")
	def DATA_NOT_FOUND="DATA NOT FOUND"
	return DATA_NOT_FOUND
	
    
}
else 
{
    testRunner.gotoStepByName( "Delay 2" )
}</script></con:config></con:testStep><con:testStep type="delay" name="Delay 2" id="9a8b34f7-12f3-47d0-9db2-e8f78055d1ad"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:testStep type="restrequest" name="PlaceQuoteOnHold" id="f8f57b1d-5c01-47ec-990d-09c7d65e0552"><con:settings/><con:config service="PlaceHold-Quote" resourcePath="/rest/api/${#TestSuite#tenant}/app.quotes/${#TestCase#QuoteID}::holdQuote" methodName="57356d5ce4b0a82849be0916::holdQuote" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PlaceQuoteOnHold" id="a96d1060-d6c4-433f-a96a-d85c9cc55cfb" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Cookie" value="${#TestSuite#Cookie}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://sqa-internal.dev.ssi-cloud.com</con:endpoint><con:request/><con:originalUri>https://sqa-internal.dev.ssi-cloud.com/rest/api/dell/app.quotes/575512f0e4b0d26080d8bc01::holdQuote</con:originalUri><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters>
  <con:entry key="inversesummary" value="true"/>
  <con:entry key="extinversesummary" value="true"/>
</con:parameters><con:parameterOrder><con:entry>inversesummary</con:entry><con:entry>extinversesummary</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="Delay 4" id="820b2836-dc0c-4f83-bb1e-2f66d706c588"><con:settings/><con:config><delay>600000</delay></con:config></con:testStep><con:testStep type="restrequest" name="QuoteReleaseHold" id="0164446a-270e-4c4e-aab1-919335110277"><con:settings/><con:config service="ReleaseQuoteHold" resourcePath="/rest/api/${#TestSuite#tenant}/app.quotes/${#TestCase#QuoteID}::quoteReleaseHold" methodName="57356d5ce4b0a82849be0916::quoteReleaseHold" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="QuoteReleaseHold" id="ed24a2e4-e278-4c3a-8d7f-253d28b5a780" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Cookie" value="${#TestSuite#Cookie}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://sqa-internal.dev.ssi-cloud.com</con:endpoint><con:request/><con:originalUri>https://sqa-internal.dev.ssi-cloud.com/rest/api/dell/app.quotes/575512f0e4b0d26080d8bc01::quoteReleaseHold</con:originalUri><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters>
  <con:entry key="inversesummary" value="true"/>
  <con:entry key="extinversesummary" value="true"/>
</con:parameters><con:parameterOrder><con:entry>inversesummary</con:entry><con:entry>extinversesummary</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="Delay" id="5753cc45-dc2d-4460-a7fe-72b7e2f18a77"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:testStep type="restrequest" name="QuoteDetails-afterReleaseHold" id="d293395a-30fa-4bbd-bf2d-c5bab22dac96"><con:settings/><con:config service="QuoteDetails" resourcePath="/rest/api/dell/app.quotes::find" methodName="App.quotes::find" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="QuoteDetails-afterReleaseHold" id="73cce1c1-ad05-4f68-83e5-e387a9e63e66" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Cookie" value="${#TestSuite#Cookie}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://qa-internal.dev.ssi-cloud.com</con:endpoint><con:request>{"detail":{"_id":"${#TestCase#QuoteID}","type":"app.quote","displayName":"${#TestCase#QuoteName},"selections":[],"inversesummary":true,"extinversesummary":true,"origin":{"url":"#detail/app.quotes/57356d5ce4b0a82849be0916"}}</con:request><con:originalUri>https://qa-internal.dev.ssi-cloud.com/rest/api/dell/app.quotes::find</con:originalUri><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters>
  <con:entry key="inversesummary" value="true"/>
  <con:entry key="extinversesummary" value="true"/>
</con:parameters><con:parameterOrder><con:entry>inversesummary</con:entry><con:entry>extinversesummary</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="Property Transfer-requestedTime" id="da4ec4d9-acd3-4430-bfcc-c0d2ca395f36"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>requestedTime</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>QuoteDetails</con:sourceStep><con:sourcePath>declare namespace ns1='https://qa-internal.dev.ssi-cloud.com/rest/api/dell/app.quotes::find';
//ns1:Response[1]/ns1:data[1]/ns1:app.quote[1]/ns1:e[1]/ns1:flows[1]/ns1:quoteStages[1]/ns1:transitions[1]/ns1:e[2]/ns1:changeDate[1]</con:sourcePath><con:targetType>requestedTime</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:targetPath/><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>OnHoldTime</con:name><con:sourceStep>QuoteDetails-afterReleaseHold</con:sourceStep><con:targetStep>Complete Quote</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>ReleaseHoldTime</con:name><con:sourceStep>QuoteDetails-afterReleaseHold</con:sourceStep><con:targetStep>Complete Quote</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="restrequest" name="Complete Quote" id="28d708ed-4db0-49d6-9217-d36af91e7c69"><con:settings/><con:config service="Complete Quote" resourcePath="/rest/api/${#TestSuite#tenant}/app.quotes/${#TestCase#QuoteID}::createQuote" methodName="Complete Quote" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Complete Quote" mediaType="application/json" postQueryString="false" id="9b044755-d0bc-491c-bc19-a4996549688b"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Cookie" value="${#TestSuite#Cookie}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://${#TestSuite#serverName}.ssi-cloud.com</con:endpoint><con:request>{"amount":{"code":{"displayName":"${#TestCase#currencyDisplayName1}","name":"${#TestCase#currencyName1}","type":"core.lookup","key":"${#TestCase#coreLookUpKey}"},"amount":"${#TestCase#amount}","type":"core.currency","normalizedAmount":{"amount":"${#TestCase#amount2}","rate":"${#TestCase#rate}","code":{"key":"50ac018e1f9c0c00000001c7","displayName":"USD","type":"core.lookup","name":"usd"},"convertedOn":"2016-05-02T08:45:56.610Z"}},"notes":[],"isAutoCompleted":false,"documents":[],"resellerQuotes":[],"_id":"","type":"app.create.quote.input","priority":{"displayName":"Medium","name":"medium","type":"app.lookup","key":"50ac01a41f9c0c0000000a61"},"creationDate":"2016-05-04T12:16:59.662Z","expirationDate":"2016-06-03T00:00:00.000Z","quote":"${#TestCase#QuoteID}","displayName":"${#TestCase#QuoteName}","quoteNumber":"q1234324","inversesummary":true,"extinversesummary":true,"origin":{}}</con:request><con:originalUri>https://pe-internal.dev.ssi-cloud.com/rest/api//app.quotes/::createQuote</con:originalUri><con:credentials><con:username>${#TestSuite#loginId}</con:username><con:password>passwordone</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="QuoteDetails-Completed" id="8eb89b37-2d82-4f06-ab84-afe84a5b2b60"><con:settings/><con:config service="QuoteDetails" resourcePath="/rest/api/dell/app.quotes::find" methodName="App.quotes::find" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="QuoteDetails-Completed" id="73cce1c1-ad05-4f68-83e5-e387a9e63e66" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Cookie" value="${#TestSuite#Cookie}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://${#TestSuite#serverName}.ssi-cloud.com</con:endpoint><con:request>{"inversesummary":true,"extinversesummary":true,"filter":{"_id":"${#TestCase#QuoteID}"},"params":{"start":0,"limit":1},"origin":{"component":"AvalonCollection","url":"#tab/app.quotes/vq=STATUS%3A%20%22Completed%22%20CREATED-ON%3A%20%22%3E04-24-2016%22"}}</con:request><con:originalUri>https://qa-internal.dev.ssi-cloud.com/rest/api/dell/app.quotes::find</con:originalUri><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters>
  <con:entry key="inversesummary" value="true"/>
  <con:entry key="extinversesummary" value="true"/>
</con:parameters><con:parameterOrder><con:entry>inversesummary</con:entry><con:entry>extinversesummary</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="Property Transfer-TurnaroundTime" id="65d1f456-e23a-4899-adcf-0a2293993109"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>ChangeDate</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>QuoteDetails-Completed</con:sourceStep><con:sourcePath>declare namespace ns1='https://qa-internal.dev.ssi-cloud.com/rest/api/dell/app.quotes::find';
//ns1:Response[1]/ns1:data[1]/ns1:app.quote[1]/ns1:e[1]/ns1:flows[1]/ns1:quoteStages[1]/ns1:transitions[1]/ns1:e[3]/ns1:changeDate[1]</con:sourcePath><con:targetType>ChangeDate</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TimeGap</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>QuoteDetails-Completed</con:sourceStep><con:sourcePath>declare namespace ns1='https://qa-internal.dev.ssi-cloud.com/rest/api/dell/app.quotes::find';
//ns1:Response[1]/ns1:data[1]/ns1:app.quote[1]/ns1:e[1]/ns1:flows[1]/ns1:quoteStages[1]/ns1:transitions[1]/ns1:e[3]/ns1:timeGap[1]</con:sourcePath><con:targetType>TimeGap</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false"><con:name>TatTotal</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>QuoteDetails-Completed</con:sourceStep><con:sourcePath>declare namespace ns1='https://qa-internal.dev.ssi-cloud.com/rest/api/dell/app.quotes::find';
//ns1:Response[1]/ns1:data[1]/ns1:app.quote[1]/ns1:e[1]/ns1:extensions[1]/ns1:master[1]/ns1:tatTotal[1]/ns1:value[1]</con:sourcePath><con:targetType>TatTotal</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:targetPath/><con:type>XPATH</con:type><con:targetTransferType>XPATH</con:targetTransferType><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TatNet</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>QuoteDetails-Completed</con:sourceStep><con:sourcePath>declare namespace ns1='https://qa-internal.dev.ssi-cloud.com/rest/api/dell/app.quotes::find';
//ns1:Response[1]/ns1:data[1]/ns1:app.quote[1]/ns1:e[1]/ns1:extensions[1]/ns1:master[1]/ns1:tatNet[1]/ns1:value[1]</con:sourcePath><con:targetType>TatNet</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script-TAT Calculations111111" id="89e00c05-4e60-45dd-afa6-5282181fa626" disabled="true"><con:settings/><con:config><script><![CDATA[import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.TimeZone;
import java.util.concurrent.TimeUnit;
def quoteID = context.expand( '${#TestCase#QuoteID}' )
def timeZone = context.expand( '${#TestCase#TimeZone}' )
def requestedTime = context.expand( '${#TestCase#requestedTime}' )
def changeDate = context.expand( '${#TestCase#ChangeDate}' )
def timeGap = context.expand( '${#TestCase#TimeGap}' )
def long millies =timeGap.toLong()
def turnaroundTime = context.expand( '${#TestCase#TurnaroundTime}' )
def tatNet = context.expand( '${#TestCase#TatNet}' )
def tatTotal = context.expand( '${#TestCase#TatTotal}' )
def long minutes1 = tatTotal.toLong()
def long tatTotalmillies = minutes1 * 60 * 1000;
def long tatNetmillies = minutes1 * 60 * 1000;

//getWorkingDaysBetweenTwoDates( requestedTime,endDate)

getDurationBreakdown(millies)

getDurationBreakdownMinutes(tatTotalmillies)
getDurationBreakdownMinutes1(tatNetmillies)


def String getDurationBreakdown(long millies)
    {
        if(millies < 0)
        {
            throw new IllegalArgumentException("Duration must be greater than zero!");
        }

        long days = TimeUnit.MILLISECONDS.toDays(millies);
        millies -= TimeUnit.DAYS.toMillis(days);
        long hours = TimeUnit.MILLISECONDS.toHours(millies);
        millies -= TimeUnit.HOURS.toMillis(hours);
        long minutes = TimeUnit.MILLISECONDS.toMinutes(millies);
        millies -= TimeUnit.MINUTES.toMillis(minutes);
        long seconds = TimeUnit.MILLISECONDS.toSeconds(millies);

        StringBuilder sb = new StringBuilder(64);
        sb.append(days);
        sb.append(" Days ");
        sb.append(hours);
        sb.append(" Hours ");
      

        if (minutes==0 && seconds>0){
        	 minutes=minutes+1
        	 sb.append(minutes);
        	 sb.append(" Minutes ");
        	 seconds=0
        	 sb.append(seconds);
           sb.append(" Seconds");
        }
       else if (minutes>0 && seconds>0 && seconds<=30){
	      sb.append(minutes);
        	 sb.append(" Minutes ");
        	 seconds=0
        	 sb.append(seconds);
           sb.append(" Seconds");
        }
        else if (minutes>0 && seconds>30){
        	minutes=minutes+1
        	 sb.append(minutes);
        	 sb.append(" Minutes ");
        	 seconds=0
        	 sb.append(seconds);
           sb.append(" Seconds");
        	}
              
log.info(sb.toString())
       testRunner.testCase.setPropertyValue( "TatfromRestTimegap", sb.toString());
    }

def String getDurationBreakdownMinutes(long tatTotalmillies)
    {
        if(tatTotalmillies < 0)
        {
            throw new IllegalArgumentException("Duration must be greater than zero!");
        }

        long days = TimeUnit.MILLISECONDS.toDays(tatTotalmillies);
        tatTotalmillies -= TimeUnit.DAYS.toMillis(days);
        long hours = TimeUnit.MILLISECONDS.toHours(tatTotalmillies);
        tatTotalmillies -= TimeUnit.HOURS.toMillis(hours);
        long minutes = TimeUnit.MILLISECONDS.toMinutes(tatTotalmillies);
        tatTotalmillies -= TimeUnit.MINUTES.toMillis(minutes);
        long seconds = TimeUnit.MILLISECONDS.toSeconds(tatTotalmillies);

        StringBuilder sb = new StringBuilder(64);
        sb.append(days);
        sb.append(" Days ");
        sb.append(hours);
        sb.append(" Hours ");
        sb.append(minutes);
        sb.append(" Minutes "); 
        sb.append(seconds);
        sb.append(" Seconds");
        
        log.info(sb.toString())
        testRunner.testCase.setPropertyValue( "TatfromTatTotal", sb.toString());
    }

def String getDurationBreakdownMinutes1(long tatNetmillies)
    {
        if(tatNetmillies < 0)
        {
            throw new IllegalArgumentException("Duration must be greater than zero!");
        }

        long days = TimeUnit.MILLISECONDS.toDays(tatNetmillies);
        tatNetmillies -= TimeUnit.DAYS.toMillis(days);
        long hours = TimeUnit.MILLISECONDS.toHours(tatNetmillies);
        tatNetmillies -= TimeUnit.HOURS.toMillis(hours);
        long minutes = TimeUnit.MILLISECONDS.toMinutes(tatNetmillies);
        tatNetmillies -= TimeUnit.MINUTES.toMillis(minutes);
        long seconds = TimeUnit.MILLISECONDS.toSeconds(tatNetmillies);

        StringBuilder sb = new StringBuilder(64);
        sb.append(days);
        sb.append(" Days ");
        sb.append(hours);
        sb.append(" Hours ");
        sb.append(minutes);
        sb.append(" Minutes "); 
        sb.append(seconds);
        sb.append(" Seconds");
        
        log.info(sb.toString())
        testRunner.testCase.setPropertyValue( "tatNetmillies", sb.toString());
    }


    ]]></script></con:config></con:testStep><con:testStep type="groovy" name="Assertion For TatTotal and TatNet11111111" id="9a8adb18-7c4e-4d92-bccf-82fbb5ed3a99" disabled="true"><con:settings/><con:config><script>def tatfromTatTotal = context.expand( '${#TestCase#TatfromTatTotal}' )
def tatfromRestTimegap = context.expand( '${#TestCase#TatfromRestTimegap}' )
def tatNetmillies = context.expand( '${#TestCase#tatNetmillies}' )




assert tatfromTatTotal==tatfromRestTimegap
assert tatNetmillies==tatfromRestTimegap</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script-OnHold_Release_Calculation" id="e5b6a069-e37d-44a2-b9d9-10af73249d9e"><con:settings/><con:config><script><![CDATA[import java.text.SimpleDateFormat;
import java.util.Date;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.text.DateFormat;
import java.util.TimeZone;
import java.util.concurrent.TimeUnit;
import java.lang.Long
def onHoldTime = context.expand( '${#TestCase#OnHoldTime}' )
def releaseHoldTime = context.expand( '${#TestCase#ReleaseHoldTime}' )
def timeZone = context.expand( '${#TestCase#TimeZone}' )

SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ");
TimeZone tzFromrecord = TimeZone.getTimeZone(timeZone);

//requested Date
Date Hdate = sdf.parse(onHoldTime.replaceAll("Z", "+0000"));
log.info("Holddate: " + Hdate);

//change Date
Date Rdate = sdf.parse(releaseHoldTime.replaceAll("Z", "+0000"));
log.info("Releasedate: " + Rdate);


use(groovy.time.TimeCategory) {
    def duration = Rdate - Hdate
    log.info ("HoldTimediff::" + duration )
    log.info "Days: ${duration.days}, Hours: ${duration.hours},Minutes: ${duration.minutes},Seconds: ${duration.seconds}"
     
    testRunner.testCase.setPropertyValue( "HoldTimediff", duration.toString());
     def minutes=0
     def seconds=0

 StringBuilder sb = new StringBuilder(64);
        sb.append(duration.days);
        sb.append(" Days ");
        sb.append(duration.hours);
        sb.append(" Hours ");
      

        if (duration.minutes==0 && duration.seconds>0){
           minutes=duration.minutes+1
        	 sb.append(minutes);
        	 //  sb.append(" : ");
        	sb.append(" Minutes ");
        	 seconds=0
        	 sb.append(seconds);
          sb.append(" Seconds");
        }
      else if (duration.minutes>0 && duration.seconds>0 && duration.seconds<=30){
	      sb.append(duration.minutes);
	      //  sb.append(" : ");
        	 sb.append(" Minutes ");
        	 seconds=0
        	 sb.append(seconds);
          sb.append(" Seconds");
        }
     else if (duration.minutes>0 && duration.seconds>30){
        	minutes=duration.minutes+1
        	 sb.append(minutes);
        	//  sb.append(" : ");
        	sb.append(" Minutes ");
        	seconds=0
        	 sb.append(seconds);
        	  
           sb.append(" Seconds");
        	}
              
log.info("sbTime::" + sb.toString())
 testRunner.testCase.setPropertyValue( "HoldTimediffAfterCal", sb.toString());



  a= TimeUnit.DAYS.toMillis(duration.days);     
  b= TimeUnit.HOURS.toMillis(duration.hours); 
  c= TimeUnit.MINUTES.toMillis(duration.minutes);    
  d= TimeUnit.SECONDS.toMillis(duration.seconds);

  if (duration.minutes==0 && duration.seconds>0 && duration.seconds<=30){
    minutes = duration.minutes + 1
    seconds = 0
    
       c= TimeUnit.MINUTES.toMillis(minutes);    
       d= TimeUnit.SECONDS.toMillis(seconds);
  }

   else if (duration.minutes>0 && duration.seconds>0 && duration.seconds<=30){
   	      seconds = 0
	 
           c= TimeUnit.MINUTES.toMillis(duration.minutes);    
           d= TimeUnit.SECONDS.toMillis(seconds);
        }
 else if (duration.minutes>0 && seconds>30){
           minutes=duration.minutes+1
           seconds = 0
	
           c= TimeUnit.MINUTES.toMillis(minutes);    
           d= TimeUnit.SECONDS.toMillis(seconds);
 	
 }
  
  
  e = a+b+c+d
  log.info e    
  log.info a
  log.info b
  log.info c
  log.info d

  
  
testRunner.testCase.setPropertyValue( "HoldTimediffAfterCalmilies", e.toString());
    
}










]]></script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script-TatCalculations(DateDiff)-TimediffAfterCal" id="cc16ca66-bf99-48bb-9b50-a5b1575590d3"><con:settings/><con:config><script><![CDATA[import java.text.SimpleDateFormat;
import java.util.Date;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.text.DateFormat;
import java.util.TimeZone;
import java.util.concurrent.TimeUnit;
import java.lang.Long

def createdOnDate = context.expand( '${#TestCase#CreatedOnDate}' )
def completedDate = context.expand( '${#TestCase#CompletedDate}' )
def timeZone = context.expand( '${#TestCase#TimeZone}' )

SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ");
TimeZone tzFromrecord = TimeZone.getTimeZone(timeZone);

//requested Date
Date date = sdf.parse(createdOnDate.replaceAll("Z", "+0000"));
log.info("date : " + date);

//change Date
Date date1 = sdf.parse(completedDate.replaceAll("Z", "+0000"));
log.info("date1: " + date1);


use(groovy.time.TimeCategory) {
    def duration = date1 - date
    log.info ("Timediff::" + duration)
    log.info "Days: ${duration.days}, Hours: ${duration.hours},Minutes: ${duration.minutes},Seconds: ${duration.seconds}"
    testRunner.testCase.setPropertyValue( "Timediff", duration.toString());
     def minutes=0
     def seconds=0

   StringBuilder sb = new StringBuilder(64);
        sb.append(duration.days);
        sb.append(" Days ");
        sb.append(duration.hours);
        sb.append(" Hours ");
      

        if (duration.minutes==0 && duration.seconds>0){
           minutes=duration.minutes+1
        	 sb.append(minutes);
        	 sb.append(" Minutes ");
        	 seconds=0
        	 sb.append(seconds);
           sb.append(" Seconds");
        }
       else if (duration.minutes>0 && duration.seconds>0 && duration.seconds<=30){
	      sb.append(duration.minutes);
        	 sb.append(" Minutes ");
        	 seconds=0
        	 sb.append(seconds);
           sb.append(" Seconds");
        }
        else if (duration.minutes>0 && duration.seconds>30){
        	minutes=duration.minutes+1
        	 sb.append(minutes);
        	 sb.append(" Minutes ");
        	seconds=0
        	 sb.append(seconds);
           sb.append(" Seconds");
        	}
              
log.info("sbTime::" + sb.toString())
 testRunner.testCase.setPropertyValue( "TimediffAfterCal", sb.toString());



  a= TimeUnit.DAYS.toMillis(duration.days);     
  b= TimeUnit.HOURS.toMillis(duration.hours); 
  c= TimeUnit.MINUTES.toMillis(duration.minutes);    
  d= TimeUnit.SECONDS.toMillis(duration.seconds);

  if (duration.minutes==0 && duration.seconds>0 && duration.seconds<=30){
    minutes = duration.minutes + 1
    seconds = 0
    
       c= TimeUnit.MINUTES.toMillis(minutes);    
       d= TimeUnit.SECONDS.toMillis(seconds);
  }

   else if (duration.minutes>0 && duration.seconds>0 && duration.seconds<=30){
   	      seconds = 0
	 
           c= TimeUnit.MINUTES.toMillis(duration.minutes);    
           d= TimeUnit.SECONDS.toMillis(seconds);
        }
 else if (duration.minutes>0 && seconds>30){
           minutes=duration.minutes+1
           seconds = 0
	
           c= TimeUnit.MINUTES.toMillis(minutes);    
           d= TimeUnit.SECONDS.toMillis(seconds);
 	
 }
  
  
  e = a+b+c+d
  log.info e    
  log.info a
  log.info b
  log.info c
  log.info d

  
  
testRunner.testCase.setPropertyValue( "TimediffAfterCalmilies", e.toString());
    
}




]]></script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script-TAT Calculations(TATNET + TATTOTAL)" id="bcc1a1b0-5f0d-4a77-93bd-362f2360b7da"><con:settings/><con:config><script><![CDATA[import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.TimeZone;
import java.util.concurrent.TimeUnit;
def quoteID = context.expand( '${#TestCase#QuoteID}' )
def timeZone = context.expand( '${#TestCase#TimeZone}' )
def requestedTime = context.expand( '${#TestCase#requestedTime}' )
def changeDate = context.expand( '${#TestCase#ChangeDate}' )
def holdTimediffAfterCal = context.expand( '${#TestCase#HoldTimediffAfterCal}' )

def turnaroundTime = context.expand( '${#TestCase#TurnaroundTime}' )
def tatNet = context.expand( '${#TestCase#TatNet}' )
def tatTotal = context.expand( '${#TestCase#TatTotal}' )
def long minutes1 = tatTotal.toLong()
def long minutes2 = tatNet.toLong()
def long tatTotalmillies = minutes1 * 60 * 1000;
def long tatNetmillies = minutes2 * 60 * 1000;
testRunner.testCase.setPropertyValue( "tatTotalmillies", tatTotalmillies.toString());
testRunner.testCase.setPropertyValue( "tatNetmillies1", tatNetmillies.toString());

def holdTimediffAfterCalmilies = context.expand( '${#TestCase#HoldTimediffAfterCalmilies}' )
def long holdTimediffAfterCalmilies1 = holdTimediffAfterCalmilies.toLong()

getDurationBreakdownMinutes(tatTotalmillies)
getDurationBreakdownMinutes1(tatNetmillies)

getDurationBreakdownMinutes11(holdTimediffAfterCalmilies1)


def String getDurationBreakdownMinutes(long tatTotalmillies)
    {
        if(tatTotalmillies < 0)
        {
            throw new IllegalArgumentException("Duration must be greater than zero!");
        }

        long days = TimeUnit.MILLISECONDS.toDays(tatTotalmillies);
        tatTotalmillies -= TimeUnit.DAYS.toMillis(days);
        long hours = TimeUnit.MILLISECONDS.toHours(tatTotalmillies);
        tatTotalmillies -= TimeUnit.HOURS.toMillis(hours);
        long minutes = TimeUnit.MILLISECONDS.toMinutes(tatTotalmillies);
        tatTotalmillies -= TimeUnit.MINUTES.toMillis(minutes);
        long seconds = TimeUnit.MILLISECONDS.toSeconds(tatTotalmillies);

        StringBuilder sb = new StringBuilder(64);
        sb.append(days);
        sb.append(" Days ");
        sb.append(hours);
        sb.append(" Hours ");
        sb.append(minutes);
        sb.append(" Minutes "); 
        sb.append(seconds);
        sb.append(" Seconds");
        
        log.info("TAT_TOTAL : " + sb.toString())
        testRunner.testCase.setPropertyValue( "TatfromTatTotal", sb.toString());
    }

def String getDurationBreakdownMinutes1(long tatNetmillies)
    {
        if(tatNetmillies < 0)
        {
            throw new IllegalArgumentException("Duration must be greater than zero!");
        }

        long days = TimeUnit.MILLISECONDS.toDays(tatNetmillies);
        tatNetmillies -= TimeUnit.DAYS.toMillis(days);
        long hours = TimeUnit.MILLISECONDS.toHours(tatNetmillies);
        tatNetmillies -= TimeUnit.HOURS.toMillis(hours);
        long minutes = TimeUnit.MILLISECONDS.toMinutes(tatNetmillies);
        tatNetmillies -= TimeUnit.MINUTES.toMillis(minutes);
        long seconds = TimeUnit.MILLISECONDS.toSeconds(tatNetmillies);

        StringBuilder sb = new StringBuilder(64);
        sb.append(days);
        sb.append(" Days ");
        sb.append(hours);
        sb.append(" Hours ");
        sb.append(minutes);
        sb.append(" Minutes "); 
        sb.append(seconds);
        sb.append(" Seconds");
        
        log.info("TAT_NET : " +sb.toString())
        testRunner.testCase.setPropertyValue( "TatfromTatNet", sb.toString());
    }

def String getDurationBreakdownMinutes11(long holdTimediffAfterCalmilies1)
    {
        if(holdTimediffAfterCalmilies1 < 0)
        {
            throw new IllegalArgumentException("Duration must be greater than zero!");
        }

        long days = TimeUnit.MILLISECONDS.toDays(holdTimediffAfterCalmilies1);
        holdTimediffAfterCalmilies1 -= TimeUnit.DAYS.toMillis(days);
        long hours = TimeUnit.MILLISECONDS.toHours(holdTimediffAfterCalmilies1);
        holdTimediffAfterCalmilies1 -= TimeUnit.HOURS.toMillis(hours);
        long minutes = TimeUnit.MILLISECONDS.toMinutes(holdTimediffAfterCalmilies1);
        holdTimediffAfterCalmilies1 -= TimeUnit.MINUTES.toMillis(minutes);
        long seconds = TimeUnit.MILLISECONDS.toSeconds(holdTimediffAfterCalmilies1);

        StringBuilder sb = new StringBuilder(64);
        sb.append(days);
        sb.append(" Days ");
        sb.append(hours);
        sb.append(" Hours ");
      
        if (minutes==0 && seconds>0){
           minutes=minutes+1
        	 sb.append(minutes);
        	 sb.append(" Minutes ");
        	 seconds=0
        	 sb.append(seconds);
           sb.append(" Seconds");
        }
       else if (minutes>0 && seconds>0 && seconds<=30){
	      sb.append(minutes);
        	 sb.append(" Minutes ");
        	 seconds=0
        	 sb.append(seconds);
           sb.append(" Seconds");
        }
        else if (minutes>0 && seconds>30){
        	minutes=minutes+1
        	 sb.append(minutes);
        	 sb.append(" Minutes ");
        	seconds=0
        	 sb.append(seconds);
           sb.append(" Seconds");
        	}

        
        log.info("TAT_HOLD_TIME : " +sb.toString())
        testRunner.testCase.setPropertyValue( "holdTimediffAfterCalmilies111", sb.toString());
    }



    ]]></script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script 6" id="b07bb103-8f89-410b-bec2-965090586ae8"><con:settings/><con:config><script><![CDATA[import java.text.SimpleDateFormat;
import java.util.Date;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.text.DateFormat;
import java.util.TimeZone;
import java.util.concurrent.TimeUnit;
import java.lang.Long


def tatTotalmillies = context.expand( '${#TestCase#tatTotalmillies}' )
def tatNetmillies1 = context.expand( '${#TestCase#tatNetmillies1}' )
def holdTimediffAfterCalmilies = context.expand( '${#TestCase#HoldTimediffAfterCalmilies}' )
def long tatTotalmillies1 = tatTotalmillies.toLong()
def long tatNetmillies11 = tatNetmillies1.toLong()
def long holdTimediffAfterCalmilies1 = holdTimediffAfterCalmilies.toLong()
def tatfromTatTotal = context.expand( '${#TestCase#TatfromTatTotal}' )
def tatfromTatNet = context.expand( '${#TestCase#TatfromTatNet}' )
def timediffAfterCal = context.expand( '${#TestCase#TimediffAfterCal}' )
def holdTimediffAfterCal = context.expand( '${#TestCase#HoldTimediffAfterCal}' )
def timediffAfterCalmilies = context.expand( '${#TestCase#TimediffAfterCalmilies}' )
def long timediffAfterCalmilies1 = timediffAfterCalmilies.toLong()

log.info tatTotalmillies
log.info tatNetmillies1
log.info holdTimediffAfterCalmilies1
log.info tatfromTatTotal
log.info tatfromTatNet
log.info timediffAfterCalmilies1

long afterCalcTimediff = (timediffAfterCalmilies1 -  holdTimediffAfterCalmilies1)
log.info afterCalcTimediff
ReleaseHoldtimemilies = (tatNetmillies11 + holdTimediffAfterCalmilies1)
testRunner.testCase.setPropertyValue( "Release_Holdtime", ReleaseHoldtimemilies.toString());



getDurationBreakdownMinutes1(afterCalcTimediff)



assert tatTotalmillies1 == ReleaseHoldtimemilies

assert tatfromTatTotal == timediffAfterCal


def String getDurationBreakdownMinutes1(long tatNetmillies)
    {
        if(tatNetmillies < 0)
        {
            throw new IllegalArgumentException("Duration must be greater than zero!");
        }

        long days = TimeUnit.MILLISECONDS.toDays(tatNetmillies);
        tatNetmillies -= TimeUnit.DAYS.toMillis(days);
        long hours = TimeUnit.MILLISECONDS.toHours(tatNetmillies);
        tatNetmillies -= TimeUnit.HOURS.toMillis(hours);
        long minutes = TimeUnit.MILLISECONDS.toMinutes(tatNetmillies);
        tatNetmillies -= TimeUnit.MINUTES.toMillis(minutes);
        long seconds = TimeUnit.MILLISECONDS.toSeconds(tatNetmillies);

     

   StringBuilder sb = new StringBuilder(64);
        sb.append(days);
        sb.append(" Days ");
        sb.append(hours);
        sb.append(" Hours ");
      

        if (minutes==0 && seconds>0){
           minutes=minutes+1
        	 sb.append(minutes);
        	 sb.append(" Minutes ");
        	 seconds=0
        	 sb.append(seconds);
           sb.append(" Seconds");
        }
       else if (minutes>0 && seconds>0 && seconds<=30){
	      sb.append(minutes);
        	 sb.append(" Minutes ");
        	 seconds=0
        	 sb.append(seconds);
           sb.append(" Seconds");
        }
        else if (minutes>0 && seconds>30){
        	minutes=minutes+1
        	 sb.append(minutes);
        	 sb.append(" Minutes ");
        	seconds=0
        	 sb.append(seconds);
           sb.append(" Seconds");
        	}
        
        log.info("TAT_TatfromtimediffAfterCalmilies : " +sb.toString())
        testRunner.testCase.setPropertyValue( "TatfromtimediffAfterCalmilies", sb.toString());
    }




















]]></script></con:config></con:testStep><con:testStep type="groovy" name="Assertion For TatTotal and TatNet" id="67b25c9b-862c-4c59-b30d-80e9bc3ca9b2"><con:settings/><con:config><script>def tatfromTatTotal = context.expand( '${#TestCase#TatfromTatTotal}' )
def tatNetmillies = context.expand( '${#TestCase#tatNetmillies}' )
def timediffAfterCal = context.expand( '${#TestCase#TimediffAfterCal}' )
def holdTimediffAfterCal = context.expand( '${#TestCase#HoldTimediffAfterCal}' )
//def long tatTotalmillies1 = tatTotalmillies.toLong()
def tatfromTatNet = context.expand( '${#TestCase#TatfromTatNet}' )

def tatfromtimediffAfterCalmilies = context.expand( '${#TestCase#TatfromtimediffAfterCalmilies}' )


log.info ("tatfromTatTotal " + tatfromTatTotal)
log.info ("tatNetmillies " + tatNetmillies)
log.info ("timediffAfterCal " + timediffAfterCal)
log.info ("holdTimediffAfterCal " + holdTimediffAfterCal)

def tatNetmillies1 =(tatfromTatTotal - holdTimediffAfterCal)
log.info ("tatNetmillies1 " + tatNetmillies1)

//assert tatNetmillies==timediffAfterCal


assert tatfromTatNet ==tatfromtimediffAfterCalmilies

</script></con:config></con:testStep><con:testStep type="delay" name="Delay 3" id="1db87c1e-4084-4d1a-a1ce-5ee761560904"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:properties><con:property><con:name>amount</con:name><con:value>112</con:value></con:property><con:property><con:name>amount2</con:name><con:value>112</con:value></con:property><con:property><con:name>ChangeDate</con:name><con:value>2016-05-18T11:17:44.410Z</con:value></con:property><con:property><con:name>completedDate</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>coreLookUpKey</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>coreLookUpKEY2</con:name><con:value>51a6796716a8afd0f00001c5</con:value></con:property><con:property><con:name>CreatedOnDate</con:name><con:value>2016-06-05T00:00:00.000Z</con:value></con:property><con:property><con:name>currency</con:name><con:value>GBP</con:value></con:property><con:property><con:name>currencyDisplayName1</con:name><con:value>USD</con:value></con:property><con:property><con:name>currencyDisplayName2</con:name><con:value>USD</con:value></con:property><con:property><con:name>currencyName1</con:name><con:value>usd</con:value></con:property><con:property><con:name>currencyName2</con:name><con:value>usd</con:value></con:property><con:property><con:name>FormatedChangeDate</con:name><con:value>2016-05-05</con:value></con:property><con:property><con:name>FormatedRequestedDate</con:name><con:value>2016-05-02</con:value></con:property><con:property><con:name>FormatedTime</con:name><con:value/></con:property><con:property><con:name>QuoteID</con:name><con:value>575512f0e4b0d26080d8bc01</con:value></con:property><con:property><con:name>QuoteName</con:name><con:value>Q-APOS-FL DCF - ASSCD ADMIN SVCS SUPP_US110789514-CLIENT-FY16Q1-3-V1</con:value></con:property><con:property><con:name>quoteNumber</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rate</con:name><con:value>0.6647</con:value></con:property><con:property><con:name>requestedTime</con:name><con:value>2016-06-06T06:06:41.431Z</con:value></con:property><con:property><con:name>TatfromRestTimegap</con:name><con:value>1 Days 23 Hours 34 Minutes 0 Seconds</con:value></con:property><con:property><con:name>TatfromTatTotal</con:name><con:value>1 Days 23 Hours 34 Minutes 0 Seconds</con:value></con:property><con:property><con:name>TatNet</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>tatNetmillies</con:name><con:value>1 Days 23 Hours 34 Minutes 0 Seconds</con:value></con:property><con:property><con:name>TatTotal</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>TimeGap</con:name><con:value>170531870</con:value></con:property><con:property><con:name>TimeZone</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">UTC+5:30</con:value></con:property><con:property><con:name>TimeZoneKey</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">56e1da90e4b0d50806e89b28</con:value></con:property><con:property><con:name>TurnaroundTime</con:name><con:value>1597</con:value></con:property><con:property><con:name>QuoteIDs</con:name><con:value>[575512f0e4b0d26080d8bc01, 575512f0e4b0d26080d8bc01, 575512f0e4b0d26080d8bc01, 575512f0e4b0d26080d8bc01, 575512f0e4b0d26080d8bc01, 575512f0e4b0d26080d8bc01, 575512f0e4b0d26080d8bc01, 575512f0e4b0d26080d8bc01, 575512f0e4b0d26080d8bc01, 575512f0e4b0d26080d8bc01, 575512f0e4b0d26080d8bc01, 575512f0e4b0d26080d8bc01, 575512f0e4b0d26080d8bc01]</con:value></con:property><con:property><con:name>quoteCount</con:name><con:value>31</con:value></con:property><con:property><con:name>i</con:name><con:value>0</con:value></con:property><con:property><con:name>flag</con:name><con:value>false</con:value></con:property><con:property><con:name>quoteCount1</con:name><con:value>14</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>565b2dc4-7449-4b6f-81e5-769876332c1d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f7082c85-4cad-4583-8916-c4ddebc80bdf</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a9cb2192-c985-42b1-aa03-c50fb66513c5</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>4ac99e45-c8c2-4ccc-a51b-76cb2e646806</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c7fdb326-e063-4c74-9aad-0acf499d4dd7</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>75db7e36-b76d-4d6b-bebb-a7f8597414ac</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>75a66777-ac12-46da-b588-95f8e4a2fbe1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b3c9e5f4-2c4c-4317-8690-671eb1d10547</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>36de390e-18b9-4a86-8bd5-ed217f0f77e6</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b39da542-5b76-4092-a9e3-218fd95a7312</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>45a71677-842e-4025-96f3-f8b1d61d32e2</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e6af9544-c8ae-40d3-a064-77deeb7a0673</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>064218e9-140f-4057-8c20-770e7de29981</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>bf79a040-59cc-48d2-9cc2-96c9b65264af</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d6aff545-18b9-4b13-83fc-fa5fde4d55f5</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>33b630f0-44f5-4db9-b58c-bc950aacffde</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>fc135bc3-6cee-47d4-a662-f2b4efe6b55d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>83c99a1f-9f45-4f5e-a0a4-75fec86cd9bb</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>9a8b34f7-12f3-47d0-9db2-e8f78055d1ad</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>22bcbd87-6223-4c87-a188-7e57948bf865</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>93655874-7643-4436-b16f-9f1b7cd2f236</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>820b2836-dc0c-4f83-bb1e-2f66d706c588</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>1db87c1e-4084-4d1a-a1ce-5ee761560904</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f8f57b1d-5c01-47ec-990d-09c7d65e0552</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0164446a-270e-4c4e-aab1-919335110277</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d293395a-30fa-4bbd-bf2d-c5bab22dac96</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>da4ec4d9-acd3-4430-bfcc-c0d2ca395f36</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>5753cc45-dc2d-4460-a7fe-72b7e2f18a77</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>28d708ed-4db0-49d6-9217-d36af91e7c69</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c32b8ba8-1489-4fa6-a63b-c9f3d1f7ef8e</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:properties><con:property><con:name>serverName</con:name><con:value>sqa-internal.dev</con:value></con:property><con:property><con:name>loginID</con:name><con:value>bill.moor@dell.com</con:value></con:property><con:property><con:name>password</con:name><con:value>passwordone</con:value></con:property><con:property><con:name>tenant</con:name><con:value>dell</con:value></con:property><con:property><con:name>Cookie</con:name><con:value>[avalon.sid=s%3A5759728ce4b0dedeb0118dc2.aY3mChhvVl40HGw8pesVIjMIlMeNtN66%2FJKxLX9pqr4</con:value></con:property><con:property><con:name>server</con:name><con:value>sqa</con:value></con:property><con:property><con:name>SalesRepKey</con:name><con:value>51a6855672338ce8f002a3d0</con:value></con:property><con:property><con:name>SalesRep</con:name><con:value>APOS check</con:value></con:property><con:property><con:name>targetPeriod</con:name><con:value>fy17q2</con:value></con:property><con:property><con:name>targetPeriodDName</con:name><con:value>FY17Q2</con:value></con:property><con:property><con:name>targetPeriodKey</con:name><con:value>565f92e9e4b0445f11dcaf7e</con:value></con:property><con:property><con:name>enddate</con:name><con:value>2016-07-30T12:00:00.000Z</con:value></con:property><con:property><con:name>startDate</con:name><con:value>2016-04-30T12:00:00.000Z</con:value></con:property></con:properties><con:reportParameters/></con:testSuite><con:testSuite id="b700e640-2689-46ee-b5f2-813ce89a08e3" name="Requested during weekday, Completed during weekday; (BUT there is one or more weekends in between Request and Completion)"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Find Cookie v2" searchProperties="true" disabled="true" id="73aca830-7e01-4286-ab3b-cac4c2c3e8ab"><con:settings/><con:testStep type="restrequest" name="Second Cookie Request" id="655bcf59-6f1d-4dc9-9065-40a0e81cc47e"><con:settings/><con:config service="Login - qaDev" methodName="cookiePostMethod" resourcePath="/login.json" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Second Cookie Request" mediaType="application/json" postQueryString="false" id="6d1707e7-bf13-4ac2-a045-809425e1ca83"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Cookie" value="${#TestSuite#Cookie}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://${#TestSuite#serverName}.ssi-cloud.com</con:endpoint><con:request>{"username":"${#TestSuite#loginID}","password":"passwordone","userid":"${#TestSuite#loginID}","platformVersion":"${#Project#version}"}</con:request><con:originalUri>https://pe-internal.dev.ssi-cloud.com/login.json</con:originalUri><con:credentials><con:username>${#TestSuite#loginID}</con:username><con:password>passwordone</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="getCookies2" id="5fcd07a6-a56c-4963-b069-12f888fa86f1"><con:settings/><con:config><script>def responseHeader=testRunner.testCase.testSteps["Second Cookie Request"].testRequest.response
def setCookie= responseHeader.responseHeaders["set-cookie"]
//log.info setCookie
def cookie = setCookie.toString().split(/;/)[0]
log.info "Cookie value for "+context.expand( '${#TestSuite#v2ServerName}')+" >>> "+cookie

testRunner.testCase.testSuite.setPropertyValue( "Cookie", cookie )

//def cookie = context.expand( '${#TestSuite#cookie}' )
</script></con:config></con:testStep><con:testStep type="delay" name="Delay" id="3fa7ce97-c0c5-42f4-963e-cfdea781e043"><con:settings/><con:config><delay>500</delay></con:config></con:testStep><con:properties><con:property><con:name>qaDevCookies</con:name><con:value>[avalon.sid=s%3A54cb1cf0e4b004ec636c4d71.OKyf7Hynz6NWePZzjLl5L9azOOkbtfD5ExcpJE%2FUL48</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>8bd932ca-b859-4164-ac1d-1898dd060c86</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>3953dda5-bbd6-4c76-8c5f-42800dbb12f2</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>5296984b-68e3-4438-9365-6d6e5b887473</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="fetch salesRep-SellingPeriod" searchProperties="true" disabled="true" id="26ebacc5-4fed-4ce3-9eb3-6e4f6e53ecc4"><con:settings/><con:testStep type="groovy" name="Server" id="e8573434-5348-44d6-86d2-a41b7a238807"><con:settings/><con:config><script>def serverName = context.expand( '${#TestSuite#serverName}' )
def sname=serverName.split(/-/)[0]
testRunner.testCase.testSuite.setPropertyValue( "server", sname )

testRunner.testCase.setPropertyValue( "server", sname )
testRunner.testCase.testSuite.setPropertyValue( "server", sname )




</script></con:config></con:testStep><con:testStep type="calltestcase" name="Find Cookie" id="c19ad7ca-f259-4aec-92c9-c42f27da9e63"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>73aca830-7e01-4286-ab3b-cac4c2c3e8ab</con:targetTestCase><con:properties><con:property><con:name>qaDevCookies</con:name><con:value>[avalon.sid=s%3A54cb1cf0e4b004ec636c4d71.OKyf7Hynz6NWePZzjLl5L9azOOkbtfD5ExcpJE%2FUL48</con:value></con:property></con:properties><con:returnProperties><con:entry>qaDevCookies</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="restrequest" name="Find SalesRep" id="bbfb7ff1-4304-4f90-8cd9-bbce4a25346e"><con:settings/><con:config service="Find Contact" methodName="Core.contacts::find" resourcePath="/rest/api/${#TestSuite#tenant}/core.contacts::find" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Find SalesRep" mediaType="application/json" postQueryString="false" id="4dbdccb1-b97c-4e9a-926f-2741b7dace27"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Cookie" value="${#TestSuite#Cookie}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://${#TestSuite#serverName}.ssi-cloud.com</con:endpoint><con:request>{"filter":{"type":"core.contact/person","emailAddresses.address":{"$regex":"^${#TestSuite#salesRepEmail}"}},"params":{"start":0,"limit":50,"columns":["_id","type","systemProperties","displayName","type","role","relationships.company","emailAddresses"]},"origin":{"component":"AvalonGridDuplo","url":"#tab/core .contacts/vq=TYPE: \"Person\" EMAIL: \"salesrepone@dell.com\""},"inversesummary":false}</con:request><con:originalUri>https://pe-internal.dev.ssi-cloud.com/rest/api/dell/core.contacts::find</con:originalUri><con:credentials><con:username>${#TestSuite#loginId}</con:username><con:password>passwordone</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="Property Transfer-slaesRepKey" id="f0b83cfb-b35f-4b3d-91f0-e69e2698e3c9"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false" disabled="false"><con:name>salesRepKey</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Find SalesRep</con:sourceStep><con:sourcePath>declare namespace ns1='https://pe-internal.dev.ssi-cloud.com/rest/api/dell/core.contacts::find';
//ns1:Response[1]/ns1:data[1]/ns1:core.contact[1]/ns1:e[1]/ns1:_id[1]</con:sourcePath><con:targetType>salesRepKey</con:targetType><con:targetStep>#TestSuite#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="true" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>salesRep</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Find SalesRep</con:sourceStep><con:sourcePath>declare namespace ns1='https://pe-internal.dev.ssi-cloud.com/rest/api/dell/core.contacts::find';
//ns1:Response[1]/ns1:data[1]/ns1:core.contact[1]/ns1:e[1]/ns1:displayName[1]</con:sourcePath><con:targetType>salesRep</con:targetType><con:targetStep>#TestSuite#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="restrequest" name="Find Opp" id="abd482a9-66dd-441a-ba10-5caaaf10be3a"><con:settings/><con:config service="Find Opp" methodName="App.opportunities::find" resourcePath="/rest/api/${#TestSuite#tenant}/app.opportunities::find" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Find Opp" mediaType="application/json" postQueryString="false" id="ef0758d3-9c70-4f60-9221-78f1bdacd54b"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Cookie" value="${#TestSuite#Cookie}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://${#TestSuite#serverName}.ssi-cloud.com</con:endpoint><con:request>{"filter":{"flows.salesStages.state.name":{"$nin":["noService","closedSale","houseAccount","consolidated"]},"isSubordinate":false},"params":{"sort":{"systemProperties.lastModifiedOn":-1},"start":0,"limit":2,"columns":["_id","type","systemProperties","displayName","flows.salesStages.state","flows.salesStages.target","targetDate","relationships.customer","relationships.reseller","relationships.salesRep","targetAmount.normalizedAmount","amount.normalizedAmount","commitLevel","extensions.master.forecastedCloseDate.value","extensions.tenant.batchType.value","extensions.master.targetPeriod.value","relationships.assignedTeam","headline"]},"origin":{"component":"AvalonGridDuplo","url":""},"inversesummary":false}</con:request><con:originalUri>https://pe-internal.dev.ssi-cloud.com/rest/api/dell/app.opportunities::find</con:originalUri><con:assertion type="XPath Match" name="Match content of [type]" id="aefda2b9-b6b2-4e63-9d11-5cbf876ed504"><con:configuration><path>declare namespace ns1='https://pe-internal.dev.ssi-cloud.com/rest/api/dell/app.opportunities::find';
//ns1:Response[1]/ns1:data[1]/ns1:app.opportunity[1]/ns1:e[2]/ns1:type[1]/text()</path><content>app.opportunity</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:username>${#TestSuite#loginId}</con:username><con:password>${#TestSuite#password}</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="Property Transfer-oppid" id="02bca247-50b6-45b7-9e63-aa691c157a15"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>oppid</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Find Opp</con:sourceStep><con:sourcePath>declare namespace ns1='https://pe-internal.dev.ssi-cloud.com/rest/api/dell/app.opportunities::find';
//ns1:Response[1]/ns1:data[1]/ns1:app.opportunity[1]/ns1:e[1]/ns1:_id[1]</con:sourcePath><con:targetType>oppid</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" entitize="false" ignoreEmpty="false" transferToAll="false" transferChildNodes="false"><con:name>oppname</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Find Opp</con:sourceStep><con:sourcePath>declare namespace ns1='https://pe-internal.dev.ssi-cloud.com/rest/api/dell/app.opportunities::find';
//ns1:Response[1]/ns1:data[1]/ns1:app.opportunity[1]/ns1:e[1]/ns1:displayName[1]</con:sourcePath><con:targetType>oppname</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="restrequest" name="Find Selling period" id="9cb56ca5-fba7-429f-b657-08172dadb4e5"><con:settings/><con:config service="Transition Input" methodName="getTransitionInput" resourcePath="/rest/api/${#TestSuite#tenant}/app.opportunities/${#TestCase#oppid}::getTransitionInput" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Find Selling period" mediaType="application/json" postQueryString="false" id="7e45d6a9-a7f8-44f0-bd33-80fb9aef34ed"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Cookie" value="${#TestSuite#Cookie}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://${#TestSuite#serverName}.ssi-cloud.com</con:endpoint><con:request>{"detail":{"_id":"${#TestCase#oppid}","type":"app.opportunity","displayName":"${#TestCase#oppname}"},"selections":[],"origin":{"url":""}}</con:request><con:originalUri>https://qa-internal.dev.ssi-cloud.com/rest/api/dell/app.opportunities/::getTransitionInput</con:originalUri><con:credentials><con:username>${#TestSuite#loginId}</con:username><con:password>${#TestSuite#password}</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="Property Transfer-sellingPeriod" id="744b627e-3e4d-427f-b6c4-99073c6863ed"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>targetPeriod</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Find Selling period</con:sourceStep><con:sourcePath>declare namespace ns1='https://qa-internal.dev.ssi-cloud.com/rest/api/dell/app.opportunities/::getTransitionInput';
//ns1:Response[1]/ns1:data[1]/ns1:app.tranopp.input[1]/ns1:e[1]/ns1:targetPeriod[1]/ns1:name[1]</con:sourcePath><con:targetType>targetPeriod</con:targetType><con:targetStep>#TestSuite#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" transferToAll="false"><con:name>targetPeriodDName</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Find Selling period</con:sourceStep><con:sourcePath>declare namespace ns1='https://qa-internal.dev.ssi-cloud.com/rest/api/dell/app.opportunities/::getTransitionInput';
//ns1:Response[1]/ns1:data[1]/ns1:app.tranopp.input[1]/ns1:e[1]/ns1:targetPeriod[1]/ns1:displayName[1]</con:sourcePath><con:targetType>targetPeriodDName</con:targetType><con:targetStep>#TestSuite#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true"><con:name>targetPeriodKey</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Find Selling period</con:sourceStep><con:sourcePath>declare namespace ns1='https://qa-internal.dev.ssi-cloud.com/rest/api/dell/app.opportunities/::getTransitionInput';
//ns1:Response[1]/ns1:data[1]/ns1:app.tranopp.input[1]/ns1:e[1]/ns1:targetPeriod[1]/ns1:_id[1]</con:sourcePath><con:targetType>targetPeriodKey</con:targetType><con:targetStep>#TestSuite#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>enddate</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Find Selling period</con:sourceStep><con:sourcePath>declare namespace ns1='https://qa-internal.dev.ssi-cloud.com/rest/api/dell/app.opportunities/::getTransitionInput';
//ns1:Response[1]/ns1:data[1]/ns1:app.tranopp.input[1]/ns1:e[1]/ns1:targetPeriod[1]/ns1:value[1]/ns1:end[1]</con:sourcePath><con:targetType>enddate</con:targetType><con:targetStep>#TestSuite#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>startDate</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Find Selling period</con:sourceStep><con:sourcePath>declare namespace ns1='https://qa-internal.dev.ssi-cloud.com/rest/api/dell/app.opportunities/::getTransitionInput';
//ns1:Response[1]/ns1:data[1]/ns1:app.tranopp.input[1]/ns1:e[1]/ns1:targetPeriod[1]/ns1:value[1]/ns1:start[1]</con:sourcePath><con:targetType>startDate</con:targetType><con:targetStep>#TestSuite#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="restrequest" name="Get Team" id="2d941855-e05d-4364-b143-63c6494cfd5f" disabled="true"><con:settings/><con:config service="Get Team Info" methodName="Core.users::getUsersWithTeamInfo" resourcePath="/rest/api/${#TestSuite#tenant}/core.users::getUsersWithTeamInfo" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get Team" mediaType="application/json" postQueryString="false" id="ddad5b52-53e5-461f-9e47-1b6de41ea958"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Cookie" value="${#TestSuite#Cookie}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://${#TestSuite#serverName}.ssi-cloud.com</con:endpoint><con:request>{"filter":{"username":{"$regex":"^${#TestSuite#salesRepEmail}"}},"params":{"start":0,"limit":50,"columns":["_id","type","systemProperties","displayName","username","relationships.team","relationships.role","relationships.company","uiProfile"]},"origin":{"component":"AvalonGridDuplo","url":""},"inversesummary":false,"options":{"gridFilter":{"username":{"$regex":"^${#TestSuite#salesRepEmail}"}},"currentPage":1}}</con:request><con:originalUri>https://pe-internal.dev.ssi-cloud.com/rest/api/dell/core.users::getUsersWithTeamInfo</con:originalUri><con:assertion type="XPath Match" name="Match content of [displayName]" id="fe26fdbb-c94d-45e6-8560-b7a2a2e21192"><con:configuration><path>declare namespace ns1='https://pe-internal.dev.ssi-cloud.com/rest/api/dell/core.users::getUsersWithTeamInfo';
//ns1:Response[1]/ns1:data[1]/ns1:core.user[1]/ns1:e[1]/ns1:displayName[1]/text()</path><content>${#TestSuite#salesRep}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:username>bruice.lewis@${#TestSuite#tenant}.com</con:username><con:password>${#TestSuite#password}</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="Property Transfer-team" id="6e43b68b-65d3-4073-8838-8568edb564d0" disabled="true"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>salesRepteam</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Get Team</con:sourceStep><con:sourcePath>declare namespace ns1='https://${#TestSuite#serverName}.ssi-cloud.com/rest/api/${#TestSuite#tenant}/core.users::getUsersWithTeamInfo';
//ns1:Response[1]/ns1:data[1]/ns1:core.user[1]/ns1:e[1]/ns1:relationships[1]/ns1:e[1]/ns1:target[1]/ns1:displayName[1]</con:sourcePath><con:targetType>salesRepTeam</con:targetType><con:targetStep>#TestSuite#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>salesRepTeamKey</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Get Team</con:sourceStep><con:sourcePath>declare namespace ns1='https://${#TestSuite#serverName}.ssi-cloud.com/rest/api/${#TestSuite#tenant}/core.users::getUsersWithTeamInfo';
//ns1:Response[1]/ns1:data[1]/ns1:core.user[1]/ns1:e[1]/ns1:relationships[1]/ns1:e[1]/ns1:target[1]/ns1:key[1]</con:sourcePath><con:targetType xsi:nil="true"/><con:targetStep>#TestSuite#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:properties><con:property><con:name>server</con:name><con:value>sqa</con:value></con:property><con:property><con:name>oppid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">5742dd5ee4b09b044d38ef99</con:value></con:property><con:property><con:name>oppname</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">APOS--_NO2740950-NONTIED-FY10Q3-1</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>d8bbdb54-0b45-4b2d-a300-645cca2b593d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase id="a198a682-67db-4e1d-8665-e8b567a57de8" discardOkResults="true" failOnError="true" failTestCaseOnErrors="true" keepSession="false" name="Tasks-Completed-Requested during weekday, Completed during weekday; (BUT there is one or more weekends in between Request and Completion)" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="Find Cookie" id="b54035a0-ac1b-49f6-9ca1-2623e9d99127" disabled="true"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>c0ce29f2-7cb0-4efc-a1f0-d98a032504a6</con:targetTestCase><con:properties><con:property><con:name>qaDevCookies</con:name><con:value>[avalon.sid=s%3A54cb1cf0e4b004ec636c4d71.OKyf7Hynz6NWePZzjLl5L9azOOkbtfD5ExcpJE%2FUL48</con:value></con:property></con:properties><con:returnProperties><con:entry>qaDevCookies</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="calltestcase" name="Fetch Selling Period" id="4d5d7995-e8a5-421f-aa2d-99cf10aea469"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>26ebacc5-4fed-4ce3-9eb3-6e4f6e53ecc4</con:targetTestCase><con:properties><con:property><con:name>server</con:name><con:value>pe</con:value></con:property><con:property><con:name>oppid</con:name><con:value>5465d421e4b0f4e48a1b9522</con:value></con:property><con:property><con:name>oppname</con:name><con:value>APOS-KHK LIER_BE2136261-CLIENT-FY16Q1-1</con:value></con:property></con:properties><con:returnProperties><con:entry>server</con:entry><con:entry>oppid</con:entry><con:entry>oppname</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script -CreatedOnDate" id="ac4b655b-966a-41db-a2c8-7464024fe0f5"><con:settings/><con:config><script>import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.text.DateFormat;
import java.util.Date;
import java.util.TimeZone;
import java.util.*
import org.joda.time.DateTime;

DateTime dateTime = new DateTime();
long firstDayOfWeekTimestamp = dateTime.withDayOfWeek(1).getMillis();
log.info firstDayOfWeekTimestamp
// Get calendar set to current date and time
Calendar c = Calendar.getInstance();
	    c.setTime(new Date());
	    c.set(Calendar.HOUR_OF_DAY, 0);
         c.set(Calendar.MINUTE, 0);
         c.set(Calendar.SECOND, 0);
         c.set(Calendar.MILLISECOND, 0);
        
       
// Set the calendar to MONDAY of the current week
c.set(Calendar.DAY_OF_WEEK, Calendar.MONDAY); 



// substract 7 days
// If we give 7 there it will give 8 days back
c.set(Calendar.DAY_OF_MONTH, c.get(Calendar.DAY_OF_MONTH)-20);

// convert to date
Date myDate = c.getTime();

// Print dates of the current week starting on SUNDAY
DateFormat df = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ");
for (int i = 0; i &lt; 1; i++) {
    log.info(df.format(c.getTime()));
 DateFormat df1 = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS");
 log.info(df1.format(c.getTime()));
    //c.add(Calendar.DATE, 1);
    testRunner.testCase.setPropertyValue( "CreatedOnDate", (df1.format(c.getTime()).toString()+"Z"));
}</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script-FIndQuotesRequest" id="3cc34fbd-f1c3-430c-900a-fc082b5bf633" disabled="true"><con:settings/><con:config><script>import groovy.json.*
def serverName = context.expand( '${#TestSuite#serverName}' )
def tenant = context.expand( '${#TestSuite#tenant}' )
def createdOnDate = context.expand( '${#TestCase#requestedTime}' )

if (tenant=="dell" &amp;&amp; serverName =="pe-internal.dev")
{

                def jsonText='''{"filter":{"flows.quoteStages.state.name":"requested","flows.quoteStages.transitions":{"$elemMatch":{"changeDate":{"$gte":"${#TestCase#requestedTime}"},"toState":"requested"}},"isBase":false,"isDraft":false},"params":{"sort":{"systemProperties.createdOn":1},"start":0,"limit":50,"columns":["_id","type","systemProperties","displayName","requestReason","flows.quoteStages.state","flows.quoteStages.target","relationships.requestedBy","relationships.assignee","expirationDate","flows.quoteStages.transitions","dueDate","amount.normalizedAmount","relationships.customer","tags","flows.quoteStages.transitions","flows.quoteStages.transitions"]},"origin":{"component":"AvalonGridDuplo","url":"#tab/app.quotes/vq=STATUS%3A%20%22Requested%22%20REQUEST-DATE%${#TestCase#requestedTime}%"},"inversesummary":false}'''
}
else
{
                def jsonText='''{"filter":{"flows.quoteStages.state.name":"requested","systemProperties.createdOn":{"$gt":"${#TestCase#requestedTime}"},"isBase":false,"isDraft":false},"params":{"sort":{"dueDate":1},"start":0,"limit":50,"columns":["_id","type","systemProperties","displayName","requestReason","flows.quoteStages.state","flows.quoteStages.target","relationships.requestedBy","relationships.assignee","expirationDate","flows.quoteStages.transitions","dueDate","amount.normalizedAmount","relationships.customer","tags","flows.quoteStages.transitions","flows.quoteStages.transitions"]},"origin":{"component":"AvalonGridDuplo","url":"#tab/app.quotes/vq=STATUS%3A%20%22Requested%7CStaged%7COn%20Hold%22%20CREATED-ON%3A%20%22%3E04-24-2016%22"},"inversesummary":false}'''
}




//{"filter":{"flows.quoteStages.state.name":"requested","systemProperties.createdOn":{"$gt":"${#TestCase#requestedTime}"},"isBase":false,"isDraft":false},"params":{"sort":{"systemProperties.createdOn":1},"start":0,"limit":50,"columns":["_id","type","systemProperties","displayName","requestReason","flows.quoteStages.state","flows.quoteStages.target","relationships.requestedBy","relationships.assignee","expirationDate","flows.quoteStages.transitions","dueDate","amount.normalizedAmount","relationships.customer","tags","flows.quoteStages.transitions","flows.quoteStages.transitions"]},"origin":{"component":"AvalonGridDuplo","url":"#tab/app.quotes/vq=STATUS%3A%20%22Requested%22%20CREATED-ON%3A%20%22%3E04-14-2016%22"},"inversesummary":false}</script></con:config></con:testStep><con:testStep type="restrequest" name="FindTask" id="49896ab4-267d-469b-905e-44feac6135e1"><con:settings/><con:config service="FindTask" resourcePath="/rest/api/${#TestSuite#tenant}/app.tasks::find" methodName="App.tasks::find" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="FindTask" id="72d7ffb4-c9d1-4bee-8c95-65eb37ae1f09" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Cookie" value="${#TestSuite#Cookie}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://${#TestSuite#serverName}.ssi-cloud.com</con:endpoint><con:request>{"filter":{"tags":{"$nin":[{"$regex":"^TAT_TEST"},{"$regex":"^Functional_QA"}]},"flows.taskStatus.state.name":"open","systemProperties.createdOn":{"$gte":"${#TestCase#CreatedOnDate}"}},"params":{"sort":{"systemProperties.createdOn":1},"start":0,"limit":50,"columns":["_id","type","systemProperties","displayName","taskType","dueDate","flows.taskStatus.state","flows.taskStatus.target","priority","relationships.assignee","relationships.requestedBy","systemProperties.createdOn"]},"origin":{"component":"AvalonGridDuplo"},"inversesummary":false}</con:request><con:originalUri>https://pe-internal.dev.ssi-cloud.com/rest/api/dell/app.tasks::find</con:originalUri><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="Property Transfer-TaskID" id="90bbb58d-4dd1-4926-bc3a-76f2eb37a8f8"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TaskID</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>FindTask</con:sourceStep><con:sourcePath>declare namespace ns1='https://pe-internal.dev.ssi-cloud.com/rest/api/dell/app.tasks::find';
//ns1:Response[1]/ns1:data[1]/ns1:app.task[1]/ns1:e[1]/ns1:_id[1]</con:sourcePath><con:targetType>TaskID</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:targetPath/><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TaskDisplayName</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>FindTask</con:sourceStep><con:sourcePath>declare namespace ns1='https://pe-internal.dev.ssi-cloud.com/rest/api/dell/app.tasks::find';
//ns1:Response[1]/ns1:data[1]/ns1:app.task[1]/ns1:e[1]/ns1:displayName[1]</con:sourcePath><con:targetType>TaskDisplayName</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="restrequest" name="TaskDetails" id="02e518ef-17d6-4c15-9bff-ccd7ef7f7d0c"><con:settings/><con:config service="TaskDetails" resourcePath="/rest/api/${#TestSuite#tenant}/app.tasks::find" methodName="App.tasks::find" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="TaskDetails" id="a283c0b1-fe82-48ae-a333-6e53781e3cc8" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Cookie" value="${#TestSuite#Cookie}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://${#TestSuite#serverName}.ssi-cloud.com</con:endpoint><con:request>{"inversesummary":true,"filter":{"_id":"${#TestCase#TaskID}"},"params":{"start":0,"limit":1},"origin":{"component":"AvalonCollection"}}</con:request><con:originalUri>https://pe-internal.dev.ssi-cloud.com/rest/api/dell/app.tasks::find</con:originalUri><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters><entry key="inversesummary" value="true" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>inversesummary</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="Property Transfer-TimeZone" id="7735dfd2-f719-488a-890e-df086edd98c5"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="true" transferChildNodes="false"><con:name>TimeZone</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>TaskDetails</con:sourceStep><con:sourcePath>declare namespace ns1='https://pe-internal.dev.ssi-cloud.com/rest/api/dell/app.tasks::find';
//ns1:Response[1]/ns1:data[1]/ns1:app.task[1]/ns1:e[1]/ns1:extensions[1]/ns1:master[1]/ns1:requestedTimeZone[1]/ns1:value[1]/ns1:displayName[1]</con:sourcePath><con:targetType>TimeZone</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:targetPath/><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="restrequest" name="FindActivities" id="94e1c72f-64cd-4934-a0df-c978057f7d42"><con:settings/><con:config service="FindActivities" resourcePath="/rest/api/dell/core.activities::getrhpactivities" methodName="Core.activities::getrhpactivities" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="FindActivities" id="ec32ed71-dac8-4f9f-8863-509201de0075" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Cookie" value="${#TestSuite#Cookie}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://${#TestSuite#serverName}.ssi-cloud.com</con:endpoint><con:request>{"params":{"sort":{"systemProperties.createdOn":-1},"start":0,"limit":50,"columns":["relatedObjects"]},"origin":{"component":"Duplo_TimelineStream","url":"#tab/core.activities"},"inversesummary":false,"type":"app.task","key":"${#TestCase#TaskID}","filter":{"crudBased":false},"configParams":{"includeNotes":true}}</con:request><con:originalUri>https://qa-internal.dev.ssi-cloud.com/rest/api/dell/core.activities::getrhpactivities</con:originalUri><con:credentials><con:username>maria.gomez@dell.com</con:username><con:password>passwordone</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="Property Transfer-RequestedDateTime" id="64f86758-bf59-49fc-ad06-36d589c0b9e0"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>RequestedTime</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>FindActivities</con:sourceStep><con:sourcePath>declare namespace ns1='https://qa-internal.dev.ssi-cloud.com/rest/api/dell/core.activities::getrhpactivities';
//ns1:Response[1]/ns1:data[1]/ns1:core.activity[1]/ns1:e[1]/ns1:systemProperties[1]/ns1:createdOn[1]</con:sourcePath><con:targetType>requestedTime</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:targetPath/><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="restrequest" name="CompleteTask" id="b1c61bf5-3789-4ecb-b9dd-3dc4074acfd8"><con:settings/><con:config service="CompleteTask" resourcePath="/rest/api/${#TestSuite#tenant}/app.tasks/${#TestCase#TaskID}::completeTask" methodName="511a69f263165f8e0f05266e::completeTask" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CompleteTask" id="b101cbcc-5363-41ee-bc9f-5eb57ab80861" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Cookie" value="${#TestSuite#Cookie}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://${#TestSuite#serverName}.ssi-cloud.com</con:endpoint><con:request>{"detail":{"_id":"${#TestCase#TaskID}","type":"app.task","displayName":"${#TestCase#TaskDisplayName}"},"selections":[],"inversesummary":true,"extinversesummary":true,"origin":{}}</con:request><con:originalUri>https://pe-internal.dev.ssi-cloud.com/rest/api/dell/app.tasks/::completeTask</con:originalUri><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters>
  <con:entry key="inversesummary" value="true"/>
  <con:entry key="extinversesummary" value="true"/>
</con:parameters><con:parameterOrder><con:entry>inversesummary</con:entry><con:entry>extinversesummary</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="TaskDetails-Completed" id="f9d881b6-efa1-4808-87e0-97b84aed3faf"><con:settings/><con:config service="TaskDetails" resourcePath="/rest/api/${#TestSuite#tenant}/app.tasks::find" methodName="App.tasks::find" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="TaskDetails-Completed" id="a283c0b1-fe82-48ae-a333-6e53781e3cc8" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Cookie" value="${#TestSuite#Cookie}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://${#TestSuite#serverName}.ssi-cloud.com</con:endpoint><con:request>{"inversesummary":true,"filter":{"_id":"${#TestCase#TaskID}"},"params":{"start":0,"limit":1},"origin":{"component":"AvalonCollection","url":"#tab/app.tasks"}}</con:request><con:originalUri>https://qa-internal.dev.ssi-cloud.com/rest/api/dell/app.tasks::find</con:originalUri><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters><entry key="inversesummary" value="true" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>inversesummary</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="Property Transfer-CompletedDate" id="40fcd738-ba48-4042-bc07-e436c901056c"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>CompletedDate</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>TaskDetails-Completed</con:sourceStep><con:sourcePath>declare namespace ns1='https://qa-internal.dev.ssi-cloud.com/rest/api/dell/app.tasks::find';
//ns1:Response[1]/ns1:data[1]/ns1:app.task[1]/ns1:e[1]/ns1:flows[1]/ns1:taskStatus[1]/ns1:transitions[1]/ns1:e[2]/ns1:changeDate[1]</con:sourcePath><con:targetType>ChangeDate</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:targetPath/><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TatTotal</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>TaskDetails-Completed</con:sourceStep><con:sourcePath>declare namespace ns1='https://qa-internal.dev.ssi-cloud.com/rest/api/dell/app.tasks::find';
//ns1:Response[1]/ns1:data[1]/ns1:app.task[1]/ns1:e[1]/ns1:extensions[1]/ns1:master[1]/ns1:tatTotal[1]/ns1:value[1]</con:sourcePath><con:targetType>TatTotal</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TatNet</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>TaskDetails-Completed</con:sourceStep><con:sourcePath>declare namespace ns1='https://qa-internal.dev.ssi-cloud.com/rest/api/dell/app.tasks::find';
//ns1:Response[1]/ns1:data[1]/ns1:app.task[1]/ns1:e[1]/ns1:extensions[1]/ns1:master[1]/ns1:tatNet[1]/ns1:value[1]</con:sourcePath><con:targetType>TatNet</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script-TatCalculations" id="ecb391e1-3dc9-4e4e-a4ee-9d838973aab7" disabled="true"><con:settings/><con:config><script><![CDATA[import java.text.SimpleDateFormat;
import java.util.Date;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.text.DateFormat;
import java.util.TimeZone;
import java.util.concurrent.TimeUnit;
import java.lang.Long

def createdOnDate = context.expand( '${#TestCase#requestedTime}' )
def completedDate = context.expand( '${#TestCase#ChangeDate}' )

String string = createdOnDate;
String string1 = completedDate;


SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ");
SimpleDateFormat output = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS");

//requested Date
Date date = sdf.parse(createdOnDate.replaceAll("Z", "+0000"));
String nTime = output.format(date);

myDate = Date.parse("yyyy-MM-dd'T'HH:mm:ss.SSS", nTime) ;
//log.info("string: " + string);
log.info("date: " + nTime);

//change Date
Date date1 = sdf.parse(completedDate.replaceAll("Z", "+0000"));
log.info("date1: " + date1);

String nTime1 = output.format(date1);
myDate1 = Date.parse("yyyy-MM-dd'T'HH:mm:ss.SSS", nTime1) ;
log.info("myDate1: " + myDate1);
log.info("date: " + nTime1);


use(groovy.time.TimeCategory) {
    def duration = date1 - date
    log.info ("Timediff::" + duration)
    log.info "Days: ${duration.days}, Hours: ${duration.hours},Minutes: ${duration.minutes},Seconds: ${duration.seconds}"
    testRunner.testCase.setPropertyValue( "Timediff", duration.toString());
     def minutes=0
     def seconds=0

   StringBuilder sb = new StringBuilder(64);
        sb.append(duration.days);
        sb.append(" Days ");
        sb.append(duration.hours);
        sb.append(" Hours ");
      

        if (duration.minutes==0 && duration.seconds>0){
           minutes=duration.minutes+1
        	 sb.append(duration.minutes);
        	 sb.append(" Minutes ");
        	 seconds=0
        	 sb.append(seconds);
           sb.append(" Seconds");
        }
       else if (duration.minutes>0 && duration.seconds>0 && duration.seconds<=30){
	      sb.append(duration.minutes);
        	 sb.append(" Minutes ");
        	 seconds=0
        	 sb.append(seconds);
           sb.append(" Seconds");
        }
        else if (duration.minutes>0 && duration.seconds>30){
        	minutes=duration.minutes+1
        	 sb.append(minutes);
        	 sb.append(" Minutes ");
        	seconds=0
        	 sb.append(seconds);
           sb.append(" Seconds");
        	}
              
log.info("sbTime::" + sb.toString())
 testRunner.testCase.setPropertyValue( "TimediffAfterCal", sb.toString());

    
}





/*
DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS");
//get current date time with Date()
Date date2 = new Date();
log.info(dateFormat.format(date2));
//log.info firstDayOfWeekTimestamp
// Get calendar set to current date and time
Calendar c = Calendar.getInstance();
 	    c.set(Calendar.HOUR_OF_DAY, 0);
         c.set(Calendar.MINUTE, 0);
         c.set(Calendar.SECOND, 0);
         c.set(Calendar.MILLISECOND, 0);
         
         log.info c.getTime();

    
t2=(dateFormat.format(c.getTime()))
t3=(dateFormat.parse(t2))
Timeinhours=(t3 - myDate1);
log.info ("Time: " + Timeinhours)




//DateDifferentExample(nTime,nTime1)





Long DateDifferentExample(String dateStart,String dateStop) {

		//HH converts hour in 24 hours format (0-23), day calculation
		SimpleDateFormat format = new SimpleDateFormat("MM/dd/yyyy HH:mm:ss.SSS");

		Date d1 = null;
		Date d2 = null;

	
			d1 = format.parse(dateStart);
			d2 = format.parse(dateStop);

			//in milliseconds
			long diff = d2.getTime() - d1.getTime();

			 long days = TimeUnit.MILLISECONDS.toDays(diff);
        diff -= TimeUnit.DAYS.toMillis(days);
        long hours = TimeUnit.MILLISECONDS.toHours(diff);
        diff -= TimeUnit.HOURS.toMillis(hours);
        long minutes = TimeUnit.MILLISECONDS.toMinutes(diff);
        diff -= TimeUnit.MINUTES.toMillis(minutes);
        long seconds = TimeUnit.MILLISECONDS.toSeconds(diff);

        StringBuilder sb = new StringBuilder(64);
   
        sb.append(hours);
        sb.append(" Hours ");
        sb.append(minutes);
        sb.append(" Minutes "); 
        sb.append(seconds);
        sb.append(" Seconds");
        
        log.info("sbT::"+ sb.toString())
        testRunner.testCase.setPropertyValue( "tatNetmillies", sb.toString());

			log.info(diffDays + " days, ");
			log.info(diffHours + " hours, ");
			log.info(diffMinutes + " minutes, ");
			log.info(diffSeconds + " seconds.");

		
	}
*/
]]></script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script-TAT Calculations" id="ba60401a-b193-4aaf-8751-0e40ada50f55" disabled="true"><con:settings/><con:config><script><![CDATA[import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.TimeZone;
import java.util.concurrent.TimeUnit;
def quoteID = context.expand( '${#TestCase#QuoteID}' )
def timeZone = context.expand( '${#TestCase#TimeZone}' )
def requestedTime = context.expand( '${#TestCase#requestedTime}' )
def changeDate = context.expand( '${#TestCase#ChangeDate}' )


def turnaroundTime = context.expand( '${#TestCase#TurnaroundTime}' )
def tatNet = context.expand( '${#TestCase#TatNet}' )
def tatTotal = context.expand( '${#TestCase#TatTotal}' )
def long minutes1 = tatTotal.toLong()
def long tatTotalmillies = minutes1 * 60 * 1000;
def long tatNetmillies = minutes1 * 60 * 1000;

//getWorkingDaysBetweenTwoDates( requestedTime,endDate)

//getDurationBreakdown(millies)

getDurationBreakdownMinutes(tatTotalmillies)
getDurationBreakdownMinutes1(tatNetmillies)


/*def String getDurationBreakdown(long millies)
    {
        if(millies < 0)
        {
            throw new IllegalArgumentException("Duration must be greater than zero!");
        }

        long days = TimeUnit.MILLISECONDS.toDays(millies);
        millies -= TimeUnit.DAYS.toMillis(days);
        long hours = TimeUnit.MILLISECONDS.toHours(millies);
        millies -= TimeUnit.HOURS.toMillis(hours);
        long minutes = TimeUnit.MILLISECONDS.toMinutes(millies);
        millies -= TimeUnit.MINUTES.toMillis(minutes);
        long seconds = TimeUnit.MILLISECONDS.toSeconds(millies);

        StringBuilder sb = new StringBuilder(64);
        sb.append(days);
        sb.append(" Days ");
        sb.append(hours);
        sb.append(" Hours ");
      

        if (minutes==0 && seconds>0){
        	 minutes=minutes+1
        	 sb.append(minutes);
        	 sb.append(" Minutes ");
        	 seconds=0
        	 sb.append(seconds);
           sb.append(" Seconds");
        }
       else if (minutes>0 && seconds>0 && seconds<=30){
	      sb.append(minutes);
        	 sb.append(" Minutes ");
        	 seconds=0
        	 sb.append(seconds);
           sb.append(" Seconds");
        }
        else if (minutes>0 && seconds>30){
        	minutes=minutes+1
        	 sb.append(minutes);
        	 sb.append(" Minutes ");
        	 seconds=0
        	 sb.append(seconds);
           sb.append(" Seconds");
        	}
              
log.info(sb.toString())
       testRunner.testCase.setPropertyValue( "TatfromRestTimegap", sb.toString());
    }*/

def String getDurationBreakdownMinutes(long tatTotalmillies)
    {
        if(tatTotalmillies < 0)
        {
            throw new IllegalArgumentException("Duration must be greater than zero!");
        }

        long days = TimeUnit.MILLISECONDS.toDays(tatTotalmillies);
        tatTotalmillies -= TimeUnit.DAYS.toMillis(days);
        long hours = TimeUnit.MILLISECONDS.toHours(tatTotalmillies);
        tatTotalmillies -= TimeUnit.HOURS.toMillis(hours);
        long minutes = TimeUnit.MILLISECONDS.toMinutes(tatTotalmillies);
        tatTotalmillies -= TimeUnit.MINUTES.toMillis(minutes);
        long seconds = TimeUnit.MILLISECONDS.toSeconds(tatTotalmillies);

        StringBuilder sb = new StringBuilder(64);
        sb.append(days);
        sb.append(" Days ");
        sb.append(hours);
        sb.append(" Hours ");
        sb.append(minutes);
        sb.append(" Minutes "); 
        sb.append(seconds);
        sb.append(" Seconds");
        
        log.info(sb.toString())
        testRunner.testCase.setPropertyValue( "TatfromTatTotal", sb.toString());
    }

def String getDurationBreakdownMinutes1(long tatNetmillies)
    {
        if(tatNetmillies < 0)
        {
            throw new IllegalArgumentException("Duration must be greater than zero!");
        }

        long days = TimeUnit.MILLISECONDS.toDays(tatNetmillies);
        tatNetmillies -= TimeUnit.DAYS.toMillis(days);
        long hours = TimeUnit.MILLISECONDS.toHours(tatNetmillies);
        tatNetmillies -= TimeUnit.HOURS.toMillis(hours);
        long minutes = TimeUnit.MILLISECONDS.toMinutes(tatNetmillies);
        tatNetmillies -= TimeUnit.MINUTES.toMillis(minutes);
        long seconds = TimeUnit.MILLISECONDS.toSeconds(tatNetmillies);

        StringBuilder sb = new StringBuilder(64);
        sb.append(days);
        sb.append(" Days ");
        sb.append(hours);
        sb.append(" Hours ");
        sb.append(minutes);
        sb.append(" Minutes "); 
        sb.append(seconds);
        sb.append(" Seconds");
        
        log.info(sb.toString())
        testRunner.testCase.setPropertyValue( "tatNetmillies", sb.toString());
    }




    ]]></script></con:config></con:testStep><con:testStep type="groovy" name="Assertion For TatTotal and TatNet" id="fa4b1702-f530-4dfc-a6c2-ade14d0f7bfe" disabled="true"><con:settings/><con:config><script>def tatfromTatTotal = context.expand( '${#TestCase#TatfromTatTotal}' )
def tatfromRestTimegap = context.expand( '${#TestCase#TatfromRestTimegap}' )
def tatNetmillies = context.expand( '${#TestCase#tatNetmillies}' )
def timediffAfterCal = context.expand( '${#TestCase#TimediffAfterCal}' )




assert tatfromTatTotal==timediffAfterCal
assert tatNetmillies==timediffAfterCal</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script 5" id="1e40f136-be66-4665-bdee-6f7f30ed04bb" disabled="true"><con:settings/><con:config><script>import java.text.SimpleDateFormat;
import java.util.Date;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.text.DateFormat;
import java.util.TimeZone;
import java.util.concurrent.TimeUnit;
import java.lang.Long
def createdOnDate = context.expand( '${#TestCase#requestedTime}' )
def completedDate = context.expand( '${#TestCase#ChangeDate}' )

//log.info createdOnDate
//log.info completedDate

//String string = createdOnDate;
//String string1 = completedDate;

SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ");
SimpleDateFormat output = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS");

//createdOnDate
Date date = sdf.parse(createdOnDate.replaceAll("Z", "+0000"));
String nTime = output.format(date);
myDate = Date.parse("yyyy-MM-dd'T'HH:mm:ss.SSS", nTime) ;
//log.info("string: " + string);
log.info("date: " + nTime);

//completedDate
Date date1 = sdf.parse(completedDate.replaceAll("Z", "+0000"));
log.info("date1: " + date1);

String nTime1 = output.format(date1);
myDate1 = Date.parse("yyyy-MM-dd'T'HH:mm:ss.SSS", nTime1) ;
log.info("myDate1: " + myDate1);
log.info("date: " + nTime1);

DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS");
//get current date time with Date()
Date date2 = new Date();
log.info(dateFormat.format(date2));
//log.info firstDayOfWeekTimestamp
// Get calendar set to current date and time
Calendar c = Calendar.getInstance();
 	    c.set(Calendar.HOUR_OF_DAY, 0);
         c.set(Calendar.MINUTE, 0);
         c.set(Calendar.SECOND, 0);
         c.set(Calendar.MILLISECOND, 0);
         
         log.info c.getTime();


    
t2=(dateFormat.format(c.getTime()))
t3=(dateFormat.parse(t2))
Timeinhours=(myDate1 - t3);
log.info ("Time: " + Timeinhours);


DateDifferentExample(nTime1,t2)





Long DateDifferentExample(String dateStart,String dateStop) {

		//HH converts hour in 24 hours format (0-23), day calculation
		SimpleDateFormat format = new SimpleDateFormat("MM/dd/yyyy HH:mm:ss");

		Date d1 = null;
		Date d2 = null;

		try {
			d1 = format.parse(dateStart);
			d2 = format.parse(dateStop);

			//in milliseconds
			long diff = d2.getTime() - d1.getTime();

			long diffSeconds = diff / 1000 % 60;
			long diffMinutes = diff / (60 * 1000) % 60;
			long diffHours = diff / (60 * 60 * 1000) % 24;
			long diffDays = diff / (24 * 60 * 60 * 1000);

			log.info(diffDays + " days, ");
			log.info(diffHours + " hours, ");
			log.info(diffMinutes + " minutes, ");
			log.info(diffSeconds + " seconds.");

		} catch (Exception e) {
			e.printStackTrace();
		}

	}

</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script" id="2232e95b-1b4b-4368-8f33-2be5aba20866" disabled="true"><con:settings/><con:config><script>import java.text.SimpleDateFormat;
import java.util.Date;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.text.DateFormat;
import java.util.TimeZone;
import java.util.concurrent.TimeUnit;
import java.lang.Long

def createdOnDate = context.expand( '${#TestCase#requestedTime}' )
def completedDate = context.expand( '${#TestCase#ChangeDate}' )


SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ");
SimpleDateFormat output = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS");

//createdOnDate
Date date = sdf.parse(createdOnDate.replaceAll("Z", "+0000"));

//completedDate
Date date1 = sdf.parse(completedDate.replaceAll("Z", "+0000"));


days(date,date1)


 Long days(Date start, Date end){
    //Ignore argument check

    Calendar c1 = Calendar.getInstance();
    c1.setTime(start);
    int w1 = c1.get(Calendar.DAY_OF_WEEK);
    c1.add(Calendar.DAY_OF_WEEK, -w1);

    Calendar c2 = Calendar.getInstance();
    c2.setTime(end);
    int w2 = c2.get(Calendar.DAY_OF_WEEK);
    c2.add(Calendar.DAY_OF_WEEK, -w2);

    //end Saturday to start Saturday 
    long days = (c2.getTimeInMillis()-c1.getTimeInMillis())/(1000*60*60*24);
    long daysWithoutWeekendDays = days-(days*2/7);

    // Adjust days to add on (w2) and days to subtract (w1) so that Saturday
    // and Sunday are not included
    if (w1 == Calendar.SUNDAY &amp;&amp; w2 != Calendar.SATURDAY) {
        w1 = Calendar.MONDAY;
    } else if (w1 == Calendar.SATURDAY &amp;&amp; w2 != Calendar.SUNDAY) {
        w1 = Calendar.FRIDAY;
    } 

    if (w2 == Calendar.SUNDAY) {
        w2 = Calendar.MONDAY;
    } else if (w2 == Calendar.SATURDAY) {
        w2 = Calendar.FRIDAY;
    }
   log.info("days: " + (daysWithoutWeekendDays-w1+w2));
    //return daysWithoutWeekendDays-w1+w2;
}</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script-FormatRequestedDate" id="a5f49324-ab9e-4025-a6c1-22dcca548540"><con:settings/><con:config><script>import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.text.DateFormat;
import java.util.Date;
import java.util.TimeZone;


def requestedTime = context.expand( '${#TestCase#requestedTime}' )
log.info requestedTime

String string = requestedTime;
String defaultTimezone = TimeZone.getDefault().getID();
SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ");
SimpleDateFormat output = new SimpleDateFormat("yyyy-MM-dd");
//Date d = sdf.parse(time);

Date date = sdf.parse(string.replaceAll("Z", "+0000"));
String nTime = output.format(date);
log.info("string: " + string);
log.info("date: " + date);
log.info("nTime: " + nTime);
testRunner.testCase.setPropertyValue( "FormatedRequestedDate", nTime.toString());</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script- FormatChangeDate" id="c98ae804-c9ba-4556-bfe1-6e94255c9524"><con:settings/><con:config><script>import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.text.DateFormat;
import java.util.Date;
import java.util.TimeZone;
def changeDate = context.expand( '${#TestCase#ChangeDate}' )

String string = changeDate;
//String defaultTimezone = TimeZone.getDefault().getID();
SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ");
SimpleDateFormat output = new SimpleDateFormat("yyyy-MM-dd");
//Date d = sdf.parse(time);

Date date = sdf.parse(string.replaceAll("Z", "+0000"));
String nTime = output.format(date);
log.info("string: " + string);
log.info("date: " + date);
log.info("nTime: " + nTime);
testRunner.testCase.setPropertyValue( "FormatedChangeDate", nTime.toString());</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script 52" id="57943d99-acef-449a-8b70-95e104a77695"><con:settings/><con:config><script>import java.text.SimpleDateFormat;
import java.util.Date;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.text.DateFormat;
import java.util.TimeZone;
import java.util.concurrent.TimeUnit;

def changeDate = context.expand( '${#TestCase#ChangeDate}' )
def requestedTime = context.expand( '${#TestCase#requestedTime}' )
log.info requestedTime
log.info changeDate

SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ");
SimpleDateFormat output = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS");

//requested Date
Date date = sdf.parse(requestedTime.replaceAll("Z", "+0000"));
String nTime = output.format(date);
myDate = Date.parse("yyyy-MM-dd'T'HH:mm:ss.SSS", nTime) ;
//log.info("string: " + string);
log.info("date: " + nTime);

//change Date
Date date1 = sdf.parse(changeDate.replaceAll("Z", "+0000"));
log.info("date1: " + date1);

String nTime1 = output.format(date1);
myDate1 = Date.parse("yyyy-MM-dd'T'HH:mm:ss.SSS", nTime1) ;
log.info("myDate1: " + myDate1);
log.info("date1: " + nTime1);

getTimeDiff(date,date1)

def getTimeDiff(Date dateOne, Date dateTwo) {
            String diff = "";
            long timeDiff = Math.abs(dateOne.getTime() - dateTwo.getTime());
            log.info ("TimeDiff : " + timeDiff);
            testRunner.testCase.setPropertyValue( "TimeDiffMilliesFromDate", timeDiff.toString())
              return timeDiff;
    }

</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script 51" id="976b2d43-5229-45b9-a04f-145575d888f6"><con:settings/><con:config><script><![CDATA[import java.text.SimpleDateFormat;
import java.util.Date;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.text.DateFormat;
import java.util.TimeZone;
import java.util.concurrent.TimeUnit;

def timeDiffMilliesFromDate = context.expand( '${#TestCase#TimeDiffMilliesFromDate}' )

Long timeDiffMilliesFromDate1 = Long.valueOf(timeDiffMilliesFromDate);

getDurationBreakdown(timeDiffMilliesFromDate1)


def String getDurationBreakdown(long millies)
    {
        if(millies < 0)
        {
            throw new IllegalArgumentException("Duration must be greater than zero!");
        }

        long days = TimeUnit.MILLISECONDS.toDays(millies);
        millies -= TimeUnit.DAYS.toMillis(days);
        long hours = TimeUnit.MILLISECONDS.toHours(millies);
        millies -= TimeUnit.HOURS.toMillis(hours);
        long minutes = TimeUnit.MILLISECONDS.toMinutes(millies);
        millies -= TimeUnit.MINUTES.toMillis(minutes);
        long seconds = TimeUnit.MILLISECONDS.toSeconds(millies);

        StringBuilder sb = new StringBuilder(64);

      
        sb.append(hours);
        sb.append(" Hours ");
       if (minutes==0 && seconds>0){
        	 minutes=minutes+1
        	 sb.append(minutes);
        	 sb.append(" Minutes ");
        	 seconds=0
        	 sb.append(seconds);
           sb.append(" Seconds");
        }
       else if (minutes>0 && seconds>0 && seconds<=30){
       	minutes=minutes
	      sb.append(minutes);
        	 sb.append(" Minutes ");
        	 seconds=0
        	 sb.append(seconds);
           sb.append(" Seconds");
        }
        else if (minutes>0 && seconds>30){
        	minutes=minutes+1
        	 sb.append(minutes);
        	 sb.append(" Minutes ");
        	 seconds=0
        	 sb.append(seconds);
           sb.append(" Seconds");
        	}
            
log.info(sb.toString())
       testRunner.testCase.setPropertyValue( "MilliesFromDate", sb.toString());
    }]]></script></con:config></con:testStep><con:testStep type="groovy" name="BusinessDay Calculation" id="80ac8e11-09dc-4f91-8d4c-6889d180be0e"><con:settings/><con:config><script>import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.text.DateFormat;
import java.util.Date;
import java.util.TimeZone;
import java.util.*
import org.joda.time.DateTime;

def changeDate = context.expand( '${#TestCase#ChangeDate}' )
def formatedRequestedDate = context.expand( '${#TestCase#FormatedRequestedDate}' )
def formatedChangeDate = context.expand( '${#TestCase#FormatedChangeDate}' )

SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd");
String dateInString = formatedRequestedDate
log.info dateInString
Date date = formatter.parse(dateInString);
log.info(date);
log.info(formatter.format(date));
def projectContext = context.testCase.testSuite.project.context
projectContext.date = date


String dateInString1 = formatedChangeDate		
		
Date date1 = formatter.parse(dateInString1);
log.info(date1);
log.info(formatter.format(date1));

projectContext.date1 = date1

def date3 = projectContext.date1
def date2 = projectContext.date


days(date2,date3)




//Business Days Calculation

 long days(Date start, Date end){
    //Ignore argument check

    Calendar c1 = Calendar.getInstance();
    c1.setTime(start);
    int w1 = c1.get(Calendar.DAY_OF_WEEK);
    c1.add(Calendar.DAY_OF_WEEK, -w1);

    Calendar c2 = Calendar.getInstance();
    c2.setTime(end);
    int w2 = c2.get(Calendar.DAY_OF_WEEK);
    c2.add(Calendar.DAY_OF_WEEK, -w2);

    //end Saturday to start Saturday 
    long days = (c2.getTimeInMillis()-c1.getTimeInMillis())/(1000*60*60*24);
    long daysWithoutWeekendDays = days-(days*2/7);

    // Adjust days to add on (w2) and days to subtract (w1) so that Saturday
    // and Sunday are not included
    if (w1 == Calendar.SUNDAY &amp;&amp; w2 != Calendar.SATURDAY) {
        w1 = Calendar.MONDAY;
    } else if (w1 == Calendar.SATURDAY &amp;&amp; w2 != Calendar.SUNDAY) {
        w1 = Calendar.FRIDAY;
    } 

    if (w2 == Calendar.SUNDAY) {
        w2 = Calendar.MONDAY;
    } else if (w2 == Calendar.SATURDAY) {
        w2 = Calendar.FRIDAY;
    }
    testRunner.testCase.setPropertyValue( "BusinessDays", (daysWithoutWeekendDays-w1+w2-1).toString());
    return daysWithoutWeekendDays-w1+w2-1;
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script-TAT Calculations1" id="ac5226fe-469d-49a9-af3e-9fa9cabbcf14"><con:settings/><con:config><script><![CDATA[import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.TimeZone;
import java.util.concurrent.TimeUnit;
def quoteID = context.expand( '${#TestCase#QuoteID}' )
def timeZone = context.expand( '${#TestCase#TimeZone}' )
def requestedTime = context.expand( '${#TestCase#requestedTime}' )
def changeDate = context.expand( '${#TestCase#ChangeDate}' )
def timeGap = context.expand( '${#TestCase#TimeGap}' )
//def long millies =timeGap.toLong()
def turnaroundTime = context.expand( '${#TestCase#TurnaroundTime}' )
def tatNet = context.expand( '${#TestCase#TatNet}' )
def tatTotal = context.expand( '${#TestCase#TatTotal}' )
def long minutes1 = tatTotal.toLong()
def long tatTotalmillies = minutes1 * 60 * 1000;
def long tatNetmillies = minutes1 * 60 * 1000;
def businessDays = context.expand( '${#TestCase#BusinessDays}' )
def dateDiffAfterCal = context.expand( '${#TestCase#DateDiffAfterCal}' )
def milliesFromDate = context.expand( '${#TestCase#MilliesFromDate}' )


def FinalTATCal = businessDays + " Days " + milliesFromDate
log.info (" FinalTATCal: " + FinalTATCal)
testRunner.testCase.setPropertyValue( "FinalTATCal", FinalTATCal.toString());

//getWorkingDaysBetweenTwoDates( requestedTime,endDate)

//getDurationBreakdown(millies)

getDurationBreakdownMinutes(tatTotalmillies)
getDurationBreakdownMinutes1(tatNetmillies)


def String getDurationBreakdown(long millies)
    {
        if(millies < 0)
        {
            throw new IllegalArgumentException("Duration must be greater than zero!");
        }

        long days = TimeUnit.MILLISECONDS.toDays(millies);
        millies -= TimeUnit.DAYS.toMillis(days);
        long hours = TimeUnit.MILLISECONDS.toHours(millies);
        millies -= TimeUnit.HOURS.toMillis(hours);
        long minutes = TimeUnit.MILLISECONDS.toMinutes(millies);
        millies -= TimeUnit.MINUTES.toMillis(minutes);
        long seconds = TimeUnit.MILLISECONDS.toSeconds(millies);

        StringBuilder sb = new StringBuilder(64);
   	   sb.append(days);
        sb.append(" Days ");
        sb.append(hours);
        sb.append(" Hours ");
      

        if (minutes==0 && seconds>0){
        	 minutes=minutes+1
        	 sb.append(minutes);
        	 sb.append(" Minutes ");
        	 seconds=0
        	 sb.append(seconds);
           sb.append(" Seconds");
        }
       else if (minutes>0 && seconds>0 && seconds<=30){
	      sb.append(minutes);
        	 sb.append(" Minutes ");
        	 seconds=0
        	 sb.append(seconds);
           sb.append(" Seconds");
        }
        else if (minutes>0 && seconds>30){
        	minutes=minutes+1
        	 sb.append(minutes);
        	 sb.append(" Minutes ");
        	 seconds=0
        	 sb.append(seconds);
           sb.append(" Seconds");
        	}
              
log.info(sb.toString())
       testRunner.testCase.setPropertyValue( "TatfromRestTimegap", sb.toString());
    }

def String getDurationBreakdownMinutes(long tatTotalmillies)
    {
        if(tatTotalmillies < 0)
        {
            throw new IllegalArgumentException("Duration must be greater than zero!");
        }

        long days = TimeUnit.MILLISECONDS.toDays(tatTotalmillies);
        tatTotalmillies -= TimeUnit.DAYS.toMillis(days);
        long hours = TimeUnit.MILLISECONDS.toHours(tatTotalmillies);
        tatTotalmillies -= TimeUnit.HOURS.toMillis(hours);
        long minutes = TimeUnit.MILLISECONDS.toMinutes(tatTotalmillies);
        tatTotalmillies -= TimeUnit.MINUTES.toMillis(minutes);
        long seconds = TimeUnit.MILLISECONDS.toSeconds(tatTotalmillies);

        StringBuilder sb = new StringBuilder(64);
        sb.append(days);
        sb.append(" Days ");
        sb.append(hours);
        sb.append(" Hours ");
        sb.append(minutes);
        sb.append(" Minutes "); 
        sb.append(seconds);
        sb.append(" Seconds");
        
        log.info(sb.toString())
        testRunner.testCase.setPropertyValue( "TatfromTatTotal", sb.toString());
    }

def String getDurationBreakdownMinutes1(long tatNetmillies)
    {
        if(tatNetmillies < 0)
        {
            throw new IllegalArgumentException("Duration must be greater than zero!");
        }

        long days = TimeUnit.MILLISECONDS.toDays(tatNetmillies);
        tatNetmillies -= TimeUnit.DAYS.toMillis(days);
        long hours = TimeUnit.MILLISECONDS.toHours(tatNetmillies);
        tatNetmillies -= TimeUnit.HOURS.toMillis(hours);
        long minutes = TimeUnit.MILLISECONDS.toMinutes(tatNetmillies);
        tatNetmillies -= TimeUnit.MINUTES.toMillis(minutes);
        long seconds = TimeUnit.MILLISECONDS.toSeconds(tatNetmillies);

        StringBuilder sb = new StringBuilder(64);
        sb.append(days);
        sb.append(" Days ");
        sb.append(hours);
        sb.append(" Hours ");
        sb.append(minutes);
        sb.append(" Minutes "); 
        sb.append(seconds);
        sb.append(" Seconds");
        
        log.info(sb.toString())
        testRunner.testCase.setPropertyValue( "tatNetmillies", sb.toString());
    }


    ]]></script></con:config></con:testStep><con:testStep type="groovy" name="Assertion For TatTotal and TatNet1" id="e1419d5d-ebbc-4094-8e6d-3ac30345cf5b"><con:settings/><con:config><script>def tatfromTatTotal = context.expand( '${#TestCase#TatfromTatTotal}' )
def tatNetmillies = context.expand( '${#TestCase#tatNetmillies}' )
def finalTATCal = context.expand( '${#TestCase#FinalTATCal}' )




assert tatfromTatTotal==finalTATCal
assert tatNetmillies==finalTATCal</script></con:config></con:testStep><con:properties><con:property><con:name>ChangeDate</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2016-06-03T05:38:58.237Z</con:value></con:property><con:property><con:name>requestedTime</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2016-05-11T06:42:32.504Z</con:value></con:property><con:property><con:name>TaskDisplayName</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">ActionTilesTest3659</con:value></con:property><con:property><con:name>TaskID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">5732d458e4b08fde9a1735c5</con:value></con:property><con:property><con:name>TatfromTatTotal</con:name><con:value>16 Days 22 Hours 56 Minutes 0 Seconds</con:value></con:property><con:property><con:name>TatNet</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">24416</con:value></con:property><con:property><con:name>tatNetmillies</con:name><con:value>16 Days 22 Hours 56 Minutes 0 Seconds</con:value></con:property><con:property><con:name>TatTotal</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">24416</con:value></con:property><con:property><con:name>TimeZone</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">UTC+5:30</con:value></con:property><con:property><con:name>FormatedRequestedDate</con:name><con:value>2016-05-11</con:value></con:property><con:property><con:name>FormatedChangeDate</con:name><con:value>2016-06-03</con:value></con:property><con:property><con:name>BusinessDays</con:name><con:value>16</con:value></con:property><con:property><con:name>TimeDiffMilliesFromDate</con:name><con:value>1983385733</con:value></con:property><con:property><con:name>MilliesFromDate</con:name><con:value>22 Hours 56 Minutes 0 Seconds</con:value></con:property><con:property><con:name>FinalTATCal</con:name><con:value>16 Days 22 Hours 56 Minutes 0 Seconds</con:value></con:property><con:property><con:name>CreatedOnDate</con:name><con:value>2016-05-10T00:00:00.000Z</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>6bda5a34-450f-427a-af64-6c06a948395d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c7cd9b4b-e847-484c-aef7-6b7380700d73</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f24e4578-6c82-46aa-963a-5be8c0cac063</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>ef6b8989-f85b-439f-b50a-064ecf6480d4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>08492c3e-1c05-4fb7-ac4f-4644aa99fe2d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>cd7dda61-054f-4b73-8ef1-a81f73dcfb35</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>34f3dc72-65dc-4452-98c0-80d30fcc8a99</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>57943d99-acef-449a-8b70-95e104a77695</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>4d5d7995-e8a5-421f-aa2d-99cf10aea469</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase id="b5d7b452-d250-4b2a-bc37-b4b4d975bc89" discardOkResults="true" failOnError="true" failTestCaseOnErrors="true" keepSession="false" name="Bookings-Completed-Requested during weekday, Completed during weekday; (BUT there is one or more weekends in between Request and Completion)" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="Find Cookie" id="abd9f465-6b42-4ead-a260-6835ad92d51f" disabled="true"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>73aca830-7e01-4286-ab3b-cac4c2c3e8ab</con:targetTestCase><con:properties><con:property><con:name>qaDevCookies</con:name><con:value>[avalon.sid=s%3A54cb1cf0e4b004ec636c4d71.OKyf7Hynz6NWePZzjLl5L9azOOkbtfD5ExcpJE%2FUL48</con:value></con:property></con:properties><con:returnProperties><con:entry>qaDevCookies</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="calltestcase" name="Fetch SalesRep-selling period" id="dd698a1e-a85b-4a85-8a9a-0fb4439bc7d0"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>73aca830-7e01-4286-ab3b-cac4c2c3e8ab</con:targetTestCase><con:properties><con:property><con:name>qaDevCookies</con:name><con:value>[avalon.sid=s%3A54cb1cf0e4b004ec636c4d71.OKyf7Hynz6NWePZzjLl5L9azOOkbtfD5ExcpJE%2FUL48</con:value></con:property></con:properties><con:returnProperties><con:entry>qaDevCookies</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script -CreatedOnDate" id="d9900384-d8fc-4d0f-bb80-74a8917d2b89"><con:settings/><con:config><script>import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.text.DateFormat;
import java.util.Date;
import java.util.TimeZone;
import java.util.*
import org.joda.time.DateTime;

DateTime dateTime = new DateTime();
long firstDayOfWeekTimestamp = dateTime.withDayOfWeek(1).getMillis();
log.info firstDayOfWeekTimestamp
// Get calendar set to current date and time
Calendar c = Calendar.getInstance();
	    c.setTime(new Date());
	    c.set(Calendar.HOUR_OF_DAY, 0);
         c.set(Calendar.MINUTE, 0);
         c.set(Calendar.SECOND, 0);
         c.set(Calendar.MILLISECOND, 0);
        
       
// Set the calendar to MONDAY of the current week
c.set(Calendar.DAY_OF_WEEK, Calendar.MONDAY); 



// substract 7 days
// If we give 7 there it will give 8 days back
c.set(Calendar.DAY_OF_MONTH, c.get(Calendar.DAY_OF_MONTH)-6);

// convert to date
Date myDate = c.getTime();

// Print dates of the current week starting on SUNDAY
DateFormat df = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ");
for (int i = 0; i &lt; 1; i++) {
    log.info(df.format(c.getTime()));
 DateFormat df1 = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS");
 log.info(df1.format(c.getTime()));
    //c.add(Calendar.DATE, 1);
    testRunner.testCase.setPropertyValue( "CreatedOnDate", (df1.format(c.getTime()).toString()+"Z"));
}</script></con:config></con:testStep><con:testStep type="restrequest" name="Find OPP" id="94e7c3fb-e9d7-40d3-9f3b-6ad18779398b" disabled="true"><con:settings/><con:config service="Find Opp" resourcePath="/rest/api/${#TestSuite#tenant}/app.opportunities::find" methodName="App.opportunities::find" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Find OPP" id="e764c5ae-27c5-4120-954d-d8c0db92ff35" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Cookie" value="${#TestSuite#Cookie}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://${#TestSuite#serverName}.ssi-cloud.com</con:endpoint><con:request>{"filter":{"flows.salesStages.state.name":"poReceived","tags":{"$nin":[{"$regex":"^TAT_TEST"},{"$regex":"^FUNCTIONAL_QA"}]},"extensions.master.targetPeriod.value.name":"fy17q2","isSubordinate":false},"params":{"sort":{"systemProperties.lastModifiedOn":-1},"start":0,"limit":50,"columns":["_id","type","systemProperties","displayName","flows.salesStages.state","flows.salesStages.target","targetDate","relationships.customer","relationships.reseller","relationships.salesRep","targetAmount.normalizedAmount","amount.normalizedAmount","commitLevel","extensions.master.country.value.displayName","extensions.master.directChannel.value.displayName","relationships.assignedTeam","headline"]},"origin":{},"inversesummary":false}</con:request><con:originalUri>https://pe-internal.dev.ssi-cloud.com/rest/api/dell/app.opportunities::find</con:originalUri><con:credentials><con:username>maria.gomez@dell.com</con:username><con:password>passwordone</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="Property Transfer-OppID" id="99475280-ebaa-42e2-8501-5370cfbc574a" disabled="true"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>OppID</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Find OPP</con:sourceStep><con:sourcePath>declare namespace ns1='https://pe-internal.dev.ssi-cloud.com/rest/api/dell/app.opportunities::find';
//ns1:Response[1]/ns1:data[1]/ns1:app.opportunity[1]/ns1:e[1]/ns1:_id[1]</con:sourcePath><con:targetType>OppID</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:targetPath/><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="restrequest" name="Opp Details" id="d55002b1-04d0-4afa-ad50-a93aec32c62d" disabled="true"><con:settings/><con:config service="Opp Details" resourcePath="/rest/api/${#TestSuite#tenant}/app.opportunities::find" methodName="App.opportunities::find" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Opp Details" id="7a40269a-24ad-4e9a-906b-74cd19d49953" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Cookie" value="${#TestSuite#Cookie}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://pe-internal.dev.ssi-cloud.com</con:endpoint><con:request>{"inversesummary":true,"filter":{"_id":"${#TestCase#OppID}"},"params":{"start":0,"limit":1},"origin":{"component":"AvalonCollection","url":"#tab/app.opportunities/vq=SALES-STAGE%3A%20%22PO%20Received%22%20LABEL%3A%20%22!TAT_TEST%7CFUNCTIONAL_QA%22%20SELLING-PERIOD%3A%20%22FY17Q2%22"}}</con:request><con:originalUri>https://pe-internal.dev.ssi-cloud.com/rest/api/dell/app.opportunities::find</con:originalUri><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters><entry key="inversesummary" value="true" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>inversesummary</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="Property Transfer-BookingID 2" id="06292811-a34e-4f19-a50e-1cd1f5cf80b4" disabled="true"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>BookingID</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Opp Details</con:sourceStep><con:sourcePath>declare namespace ns1='https://pe-internal.dev.ssi-cloud.com/rest/api/dell/app.opportunities::find';
//ns1:Response[1]/ns1:data[1]/ns1:app.opportunity[1]/ns1:e[1]/ns1:relationships[1]/ns1:e[1]/ns1:_id[1]</con:sourcePath><con:targetType>BookingID</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:targetPath/><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script-FIndQuotesRequest" id="122587e3-86e3-464c-a43b-9f0861ebec14" disabled="true"><con:settings/><con:config><script>import groovy.json.*
def serverName = context.expand( '${#TestSuite#serverName}' )
def tenant = context.expand( '${#TestSuite#tenant}' )
def createdOnDate = context.expand( '${#TestCase#requestedTime}' )

if (tenant=="dell" &amp;&amp; serverName =="pe-internal.dev")
{

                def jsonText='''{"filter":{"flows.quoteStages.state.name":"requested","flows.quoteStages.transitions":{"$elemMatch":{"changeDate":{"$gte":"${#TestCase#requestedTime}"},"toState":"requested"}},"isBase":false,"isDraft":false},"params":{"sort":{"systemProperties.createdOn":1},"start":0,"limit":50,"columns":["_id","type","systemProperties","displayName","requestReason","flows.quoteStages.state","flows.quoteStages.target","relationships.requestedBy","relationships.assignee","expirationDate","flows.quoteStages.transitions","dueDate","amount.normalizedAmount","relationships.customer","tags","flows.quoteStages.transitions","flows.quoteStages.transitions"]},"origin":{"component":"AvalonGridDuplo","url":"#tab/app.quotes/vq=STATUS%3A%20%22Requested%22%20REQUEST-DATE%${#TestCase#requestedTime}%"},"inversesummary":false}'''
}
else
{
                def jsonText='''{"filter":{"flows.quoteStages.state.name":"requested","systemProperties.createdOn":{"$gt":"${#TestCase#requestedTime}"},"isBase":false,"isDraft":false},"params":{"sort":{"dueDate":1},"start":0,"limit":50,"columns":["_id","type","systemProperties","displayName","requestReason","flows.quoteStages.state","flows.quoteStages.target","relationships.requestedBy","relationships.assignee","expirationDate","flows.quoteStages.transitions","dueDate","amount.normalizedAmount","relationships.customer","tags","flows.quoteStages.transitions","flows.quoteStages.transitions"]},"origin":{"component":"AvalonGridDuplo","url":"#tab/app.quotes/vq=STATUS%3A%20%22Requested%7CStaged%7COn%20Hold%22%20CREATED-ON%3A%20%22%3E04-24-2016%22"},"inversesummary":false}'''
}




//{"filter":{"flows.quoteStages.state.name":"requested","systemProperties.createdOn":{"$gt":"${#TestCase#requestedTime}"},"isBase":false,"isDraft":false},"params":{"sort":{"systemProperties.createdOn":1},"start":0,"limit":50,"columns":["_id","type","systemProperties","displayName","requestReason","flows.quoteStages.state","flows.quoteStages.target","relationships.requestedBy","relationships.assignee","expirationDate","flows.quoteStages.transitions","dueDate","amount.normalizedAmount","relationships.customer","tags","flows.quoteStages.transitions","flows.quoteStages.transitions"]},"origin":{"component":"AvalonGridDuplo","url":"#tab/app.quotes/vq=STATUS%3A%20%22Requested%22%20CREATED-ON%3A%20%22%3E04-14-2016%22"},"inversesummary":false}</script></con:config></con:testStep><con:testStep type="restrequest" name="FindBooking" id="0b93fe9f-65e8-4432-9956-f4ea16216bf4"><con:settings/><con:config service="FindBooking" resourcePath="/rest/api/${#TestSuite#tenant}/app.bookings::find" methodName="App.bookings::find" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="FindBooking" id="d5f2a138-3d23-467a-9912-55909aa3fc9d" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Cookie" value="${#TestSuite#Cookie}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://${#TestSuite#serverName}.ssi-cloud.com</con:endpoint><con:request>{"filter":{"tags":{"$nin":[{"$regex":"^TAT_TEST"},{"$regex":"^Functional_QA"}]},"flows.bookingStages.state.name":"pending","systemProperties.createdOn":{"$gte":"${#TestCase#requestedTime}"},"extensions.master.targetPeriod.value.name":"${#TestSuite#targetPeriod}"},"params":{"sort":{"systemProperties.createdOn":1},"start":0,"limit":50,"columns":["_id","type","systemProperties","displayName","relationships.assignee","relationships.requestedBy","flows.bookingStages.transitions","dueDate","flows.bookingStages.transitions","flows.bookingStages.state","flows.bookingStages.target","soDate","amount.normalizedAmount"]},"origin":{},"inversesummary":false}</con:request><con:originalUri>https://pe-internal.dev.ssi-cloud.com/rest/api/pe-internal.dev/app.bookings::find</con:originalUri><con:credentials><con:username>${#TestSuite#loginID}</con:username><con:password>passwordone</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="Property Transfer-BookingID" id="d83a1b0d-7b9a-4272-ae0d-cb58b690d446"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>BookingID</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>FindBooking</con:sourceStep><con:sourcePath>declare namespace ns1='https://pe-internal.dev.ssi-cloud.com/rest/api/pe-internal.dev/app.bookings::find';
//ns1:Response[1]/ns1:data[1]/ns1:app.booking[1]/ns1:e[1]/ns1:_id[1]</con:sourcePath><con:targetType>BookingID</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:targetPath/><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>BookingDisplayName</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>FindBooking</con:sourceStep><con:sourcePath>declare namespace ns1='https://pe-internal.dev.ssi-cloud.com/rest/api/pe-internal.dev/app.bookings::find';
//ns1:Response[1]/ns1:data[1]/ns1:app.booking[1]/ns1:e[1]/ns1:displayName[1]</con:sourcePath><con:targetType>BookingDisplayName</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>BookingCount</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>FindBooking</con:sourceStep><con:sourcePath>declare namespace ns1='https://pe-internal.dev.ssi-cloud.com/rest/api/pe-internal.dev/app.bookings::find';
//ns1:Response[1]/ns1:recordCount[1]/ns1:app.booking[1]</con:sourcePath><con:targetType>BookingCount</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="BookingID" id="765fd2ac-a301-41a9-ba84-64d81532e8a9"><con:settings/><con:config><script>import groovy.json.JsonSlurper
import com.eviware.soapui.support.XmlHolder
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
def holder = groovyUtils.getXmlHolder(testRunner.testCase.testSteps["FindBooking"].testRequest.response.getContentAsXml());
def bookingCount = context.expand( '${#TestCase#BookingCount}' )

log.info bookingCount
def responseAsXml = context.expand( '${FindBooking#ResponseAsXml#declare namespace ns1=\'https://pe-internal.dev.ssi-cloud.com/rest/api/pe-internal.dev/app.bookings::find\'; //ns1:Response[1]/ns1:data[1]/ns1:app.booking[1]/ns1:e[1]/ns1:_id[1]}' )




def BookingIDs=[]

                def i=1
                def j=1             
                for(node in holder["//ns1:Response[1]/ns1:data[1]/ns1:app.booking[1]/ns1:e[${i}]"])
                {              
								   
               rate = holder.getNodeValue("ns1:Response[1]/ns1:data[1]/ns1:app.booking[1]/ns1:e[${i}]/ns1:amount[1]/ns1:normalizedAmount[1]/ns1:rate[1]")   
               //affinityOrg= holder.getNodeValue("ns1:Response[1]/ns1:data[1]/ns1:app.quote[1]/ns1:e[${i}]/ns1:relationships[1]/ns1:e[2]/ns1:target[1]/ns1:relationships[1]/ns1:affinityOrganization[1]/ns1:targets[1]/ns1:e[1]/ns1:extensions[1]/ns1:tenant[1]/ns1:l0AffinityId[1]/ns1:value[1]")
          
              log.info rate
              //log.info affinityOrg
              if(rate!=null){
              //	 if(rate!=null&amp;&amp; affinityOrg != null){
              	
          									   
                                id = holder.getNodeValue("ns1:Response[1]/ns1:data[1]/ns1:app.booking[1]/ns1:e[${i}]/ns1:_id[1]" )
                                BookingIDs.add(id)                              
                                i=i+1
                                log.info i
                                if(i==bookingCount.toInteger())
                                break;
                }}
testRunner.testCase.setPropertyValue( "rate", rate.toString() ) 
testRunner.testCase.setPropertyValue( "BookingIDs", BookingIDs.toString())
testRunner.testCase.setPropertyValue( "bookingCount", i.toString())
log.info BookingIDs.toString()
def count=0
testRunner.testCase.setPropertyValue( "i", count.toString() )
def flag=false
testRunner.testCase.setPropertyValue( "flag",flag.toString())

</script></con:config></con:testStep><con:testStep type="groovy" name="Counter" id="1d0d1aff-788c-4763-ab1a-67ebeee6d69f"><con:settings/><con:config><script>def i = context.expand( '${#TestCase#i}' )
log.info i

def bookingID = context.expand( '${#TestCase#BookingIDs#$[${#TestCase#i}]}' )

log.info bookingID
testRunner.testCase.setPropertyValue( "bookingID", bookingID.toString() )
</script></con:config></con:testStep><con:testStep type="restrequest" name="BookingDetails" id="43dd49f5-497f-413d-9475-a9594127a737"><con:settings/><con:config service="BookingDetails" resourcePath="/rest/api/${#TestSuite#tenant}/app.bookings::find" methodName="App.bookings::find" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="BookingDetails" id="c7ef5e26-ae51-43f1-9688-846d741a3a69" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Cookie" value="${#TestSuite#Cookie}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://${#TestSuite#serverName}.ssi-cloud.com</con:endpoint><con:request>{"inversesummary":true,"extinversesummary":true,"filter":{"_id":"${#TestCase#BookingID}","type":"app.booking/sales"},"params":{"start":0,"limit":1},"origin":{"component":"AvalonCollection","url":"#tab/app.bookings/"}}</con:request><con:originalUri>https://pe-internal.dev.ssi-cloud.com/rest/api/delll/app.bookings::find</con:originalUri><con:credentials><con:username>maria.gomez@dell.com</con:username><con:password>passwordone</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters>
  <con:entry key="inversesummary" value="true"/>
  <con:entry key="extinversesummary" value="true"/>
</con:parameters><con:parameterOrder><con:entry>inversesummary</con:entry><con:entry>extinversesummary</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="Property Transfer-TimeZone1" id="c795f1f3-5216-4c33-a35a-da95c566b251"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TimeZone</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>BookingDetails</con:sourceStep><con:sourcePath>declare namespace ns1='https://qa-internal.dev.ssi-cloud.com/rest/api/dell/app.quotes::find';
//ns1:Response[1]/ns1:data[1]/ns1:app.quote[1]/ns1:e[1]/ns1:extensions[1]/ns1:master[1]/ns1:requestedTimeZone[1]/ns1:value[1]/ns1:displayName[1]</con:sourcePath><con:targetType>TimeZone</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:targetPath/><con:type>XPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false" disabled="true"><con:name>TimeZoneKey</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>BookingDetails</con:sourceStep><con:sourcePath>declare namespace ns1='https://qa-internal.dev.ssi-cloud.com/rest/api/dell/app.quotes::find';
//ns1:Response[1]/ns1:data[1]/ns1:app.quote[1]/ns1:e[1]/ns1:extensions[1]/ns1:master[1]/ns1:requestedTimeZone[1]/ns1:value[1]/ns1:key[1]</con:sourcePath><con:targetType>TimeZoneKey</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false" disabled="true"><con:name>amount1</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>QuoteDetails</con:sourceStep><con:sourcePath>declare namespace ns1='https://qa-internal.dev.ssi-cloud.com/rest/api/dell/app.quotes::find';
//ns1:Response[1]/ns1:data[1]/ns1:app.quote[1]/ns1:e[1]/ns1:amount[1]/ns1:amount[1]</con:sourcePath><con:targetType>amount</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false" disabled="true"><con:name>corelookupKey</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>QuoteDetails</con:sourceStep><con:sourcePath>declare namespace ns1='https://qa-internal.dev.ssi-cloud.com/rest/api/dell/app.quotes::find';
//ns1:Response[1]/ns1:data[1]/ns1:app.quote[1]/ns1:e[1]/ns1:amount[1]/ns1:code[1]/ns1:key[1]</con:sourcePath><con:targetType>coreLookUpKey</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false" disabled="true"><con:name>coreLookUpKEY2</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>QuoteDetails</con:sourceStep><con:sourcePath>declare namespace ns1='https://qa-internal.dev.ssi-cloud.com/rest/api/dell/app.quotes::find';
//ns1:Response[1]/ns1:data[1]/ns1:app.quote[1]/ns1:e[1]/ns1:amount[1]/ns1:normalizedAmount[1]/ns1:code[1]/ns1:key[1]</con:sourcePath><con:targetType>coreLookUpKEY2</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false" disabled="true"><con:name>currencyName1</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>QuoteDetails</con:sourceStep><con:sourcePath>declare namespace ns1='https://qa-internal.dev.ssi-cloud.com/rest/api/dell/app.quotes::find';
//ns1:Response[1]/ns1:data[1]/ns1:app.quote[1]/ns1:e[1]/ns1:amount[1]/ns1:code[1]/ns1:name[1]</con:sourcePath><con:targetType>currencyName1</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="true" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false"><con:name>currencyDisplayName1</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>QuoteDetails</con:sourceStep><con:sourcePath>declare namespace ns1='https://qa-internal.dev.ssi-cloud.com/rest/api/dell/app.quotes::find';
//ns1:Response[1]/ns1:data[1]/ns1:app.quote[1]/ns1:e[1]/ns1:amount[1]/ns1:code[1]/ns1:displayName[1]</con:sourcePath><con:targetType>currencyDisplayName1</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:targetPath xsi:nil="true"/><con:type>XPATH</con:type><con:targetTransferType>XPATH</con:targetTransferType><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="true" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false"><con:name>currencyDisplayName2</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>QuoteDetails</con:sourceStep><con:sourcePath>declare namespace ns1='https://qa-internal.dev.ssi-cloud.com/rest/api/dell/app.quotes::find';
//ns1:Response[1]/ns1:data[1]/ns1:app.quote[1]/ns1:e[1]/ns1:amount[1]/ns1:normalizedAmount[1]/ns1:code[1]/ns1:displayName[1]</con:sourcePath><con:targetType>currencyDisplayName2</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:targetPath xsi:nil="true"/><con:type>XPATH</con:type><con:targetTransferType>XPATH</con:targetTransferType><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false" disabled="true"><con:name>CurrencyName2</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>QuoteDetails</con:sourceStep><con:sourcePath>declare namespace ns1='https://qa-internal.dev.ssi-cloud.com/rest/api/dell/app.quotes::find';
//ns1:Response[1]/ns1:data[1]/ns1:app.quote[1]/ns1:e[1]/ns1:amount[1]/ns1:normalizedAmount[1]/ns1:code[1]/ns1:name[1]</con:sourcePath><con:targetType>currencyName2</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false" disabled="true"><con:name>amount2</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>QuoteDetails</con:sourceStep><con:sourcePath>declare namespace ns1='https://qa-internal.dev.ssi-cloud.com/rest/api/dell/app.quotes::find';
//ns1:Response[1]/ns1:data[1]/ns1:app.quote[1]/ns1:e[1]/ns1:amount[1]/ns1:normalizedAmount[1]/ns1:amount[1]</con:sourcePath><con:targetType>amount2</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="Counter++" id="a456b592-e36a-42ca-b00a-08cd1eb05d8e"><con:settings/><con:config><script>import groovy.json.JsonSlurper
import com.eviware.soapui.support.XmlHolder
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
def holder = groovyUtils.getXmlHolder(testRunner.testCase.testSteps["BookingDetails"].testRequest.response.getContentAsXml());
def flag = context.expand( '${#TestCase#flag}' )                                






                          timeZone=holder.getNodeValue("//ns1:Response[1]/ns1:data[1]/ns1:app.booking[1]/ns1:e[1]/ns1:extensions[1]/ns1:master[1]/ns1:requestedTimeZone[1]/ns1:value[1]/ns1:displayName[1]")
                        //  isrevised=holder.getNodeValue("//ns1:Response[1]/ns1:data[1]/ns1:app.quote[1]/ns1:e[1]/ns1:isRevised[1]")
                          
                                
                                log.info ("Timezone: " + timeZone)
                              //  log.info isrevised
                        
                                if(timeZone != null ){
                            
                                flag==true
                                testRunner.testCase.setPropertyValue( "flag","true")                   
                                }
                                else
                                {
                                	testRunner.testCase.setPropertyValue( "flag","false")   
                                }
                                log.info flag
               
def i = context.expand( '${#TestCase#i}' )
log.info i
def c = i.toInteger()+1
testRunner.testCase.setPropertyValue( "i", c.toString() )
</script></con:config></con:testStep><con:testStep type="groovy" name="Counter Check" id="da9cdd96-5fca-433f-baa5-e3f6dbec676c"><con:settings/><con:config><script>def i = context.expand( '${#TestCase#i}' )
def bookingCount = context.expand( '${#TestCase#BookingCount}' )

def flag = context.expand( '${#TestCase#flag}' )
log.info i
log.info bookingCount
log.info flag
if((i.toInteger()&lt;bookingCount.toInteger())&amp;&amp; (flag=="false"))
{
   testRunner.gotoStepByName( "Counter" )
}
else if ((i.toInteger()==bookingCount.toInteger())&amp;&amp; (flag=="false"))
{
	testRunner.gotoStepByName( "Delay 3" );
	log.info ("Test Case Fail : DATA NOT FOUND")
	def DATA_NOT_FOUND="DATA NOT FOUND"
	return DATA_NOT_FOUND
	
    
}
else 
{
    testRunner.gotoStepByName( "Delay 2" )
}</script></con:config></con:testStep><con:testStep type="delay" name="Delay 2" id="1f081106-6f56-43aa-924b-6e3c78728166"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:testStep type="transfer" name="Property Transfer-TimeZone" id="e02f0c42-e2a4-412c-92d9-b893849f6f39" disabled="true"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="true" transferChildNodes="false"><con:name>TimeZone</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>BookingDetails</con:sourceStep><con:sourcePath>declare namespace ns1='https://pe-internal.dev.ssi-cloud.com/rest/api/delll/app.bookings::find';
//ns1:Response[1]/ns1:data[1]/ns1:app.booking[1]/ns1:e[1]/ns1:inverseSummary[1]/ns1:acceptedQuote[1]/ns1:extensions[1]/ns1:master[1]/ns1:requestedTimeZone[1]/ns1:value[1]/ns1:displayName[1]</con:sourcePath><con:targetType>TimeZone</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:targetPath/><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" entitize="false" ignoreEmpty="false" transferToAll="false" transferChildNodes="false"><con:name>PaAmount</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>BookingDetails</con:sourceStep><con:sourcePath>declare namespace ns1='https://pe-internal.dev.ssi-cloud.com/rest/api/delll/app.bookings::find';
//ns1:Response[1]/ns1:data[1]/ns1:app.booking[1]/ns1:e[1]/ns1:amount[1]/ns1:amount[1]</con:sourcePath><con:targetType>PaAmount</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>SOAmount</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>BookingDetails</con:sourceStep><con:sourcePath>declare namespace ns1='https://pe-internal.dev.ssi-cloud.com/rest/api/delll/app.bookings::find';
//ns1:Response[1]/ns1:data[1]/ns1:app.booking[1]/ns1:e[1]/ns1:amount[1]/ns1:amount[1]</con:sourcePath><con:targetType>SOAmount</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>LineItemAmount</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>BookingDetails</con:sourceStep><con:sourcePath>declare namespace ns1='https://pe-internal.dev.ssi-cloud.com/rest/api/delll/app.bookings::find';
//ns1:Response[1]/ns1:data[1]/ns1:app.booking[1]/ns1:e[1]/ns1:inverseSummary[1]/ns1:acceptedQuote[1]/ns1:amount[1]/ns1:amount[1]</con:sourcePath><con:targetType>LineItemAmount</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>PaCurrencyDisplayName</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>BookingDetails</con:sourceStep><con:sourcePath>declare namespace ns1='https://pe-internal.dev.ssi-cloud.com/rest/api/delll/app.bookings::find';
//ns1:Response[1]/ns1:data[1]/ns1:app.booking[1]/ns1:e[1]/ns1:amount[1]/ns1:code[1]/ns1:displayName[1]</con:sourcePath><con:targetType>PaCurrencyDisplayName</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>PaCurrencyName</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>BookingDetails</con:sourceStep><con:sourcePath>declare namespace ns1='https://pe-internal.dev.ssi-cloud.com/rest/api/delll/app.bookings::find';
//ns1:Response[1]/ns1:data[1]/ns1:app.booking[1]/ns1:e[1]/ns1:amount[1]/ns1:code[1]/ns1:name[1]</con:sourcePath><con:targetType>PaCurrencyName</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="restrequest" name="FindActivities" id="ef2c1d99-0f84-4c63-b747-95c4f9d28489"><con:settings/><con:config service="FindActivities" resourcePath="/rest/api/dell/core.activities::getrhpactivities" methodName="Core.activities::getrhpactivities" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="FindActivities" id="ec32ed71-dac8-4f9f-8863-509201de0075" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Cookie" value="${#TestSuite#Cookie}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://${#TestSuite#serverName}.ssi-cloud.com</con:endpoint><con:request>{"params":{"sort":{"systemProperties.createdOn":-1},"start":0,"limit":50,"columns":["relatedObjects"]},"origin":{"component":"Duplo_TimelineStream","url":"#tab/core.activities"},"inversesummary":false,"type":"app.booking/sales","key":"${#TestCase#BookingID}","filter":{"crudBased":false},"configParams":{"includeNotes":true}}</con:request><con:originalUri>https://qa-internal.dev.ssi-cloud.com/rest/api/dell/core.activities::getrhpactivities</con:originalUri><con:credentials><con:username>maria.gomez@dell.com</con:username><con:password>passwordone</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="Property Transfer-CreatedOnDate" id="9d03718f-95cd-4d51-bd78-3233911ddfa1"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>requestedtime</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>FindActivities</con:sourceStep><con:sourcePath>declare namespace ns1='https://qa-internal.dev.ssi-cloud.com/rest/api/dell/core.activities::getrhpactivities';
//ns1:Response[1]/ns1:data[1]/ns1:core.activity[1]/ns1:e[1]/ns1:systemProperties[1]/ns1:createdOn[1]</con:sourcePath><con:targetType>requestedTime</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:targetPath/><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="restrequest" name="FillingBookingDetails" id="0011dc51-ecb9-40bc-9115-0befa0b70cc9" disabled="true"><con:settings/><con:config service="BookingDetails-SalesOrderId" resourcePath="/rest/api/${#TestSuite#tenant}/app.bookings/${#TestCase#BookingID}" methodName="571aa679e4b037f2558b42b4" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="FillingBookingDetails" id="97d5d5ba-dd11-4927-9cd2-928310fb1fef" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Cookie" value="${#TestSuite#Cookie}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://${#TestSuite#serverName}.ssi-cloud.com</con:endpoint><con:request>{"poAmount":{"amount":"${#TestCase#LineItemAmount}","type":"core.currency","code":{"key":"51a67a6116a8afd0f000c389","displayName":"${#TestCase#PaCurrencyDisplayName}","type":"core.lookup","name":"${#TestCase#PaCurrencyName}"},"normalizedAmount":{"amount":"${#TestCase#LineItemAmount}","code":{"key":"51a6796716a8afd0f00001c5","displayName":"USD","type":"core.lookup","name":"usd"},"convertedOn":"2015-10-20T08:32:07.206Z"}},"amount":{"amount":${#TestSuite#amount},"type":"core.currency","code":{"key":"51a67a6116a8afd0f000c389","displayName":"USD","type":"core.lookup","name":"usd"},"normalizedAmount":{"amount":${#TestSuite#amount},"code":{"key":"51a6796716a8afd0f00001c5","displayName":"USD","type":"core.lookup","name":"usd"},"convertedOn":"2015-10-20T08:32:07.206Z"}},"resellerPoAmount":{"amount":0,"type":"core.currency","code":{"key":"51a67a6116a8afd0f000c389","displayName":"USD","type":"core.lookup","name":"usd"},"normalizedAmount":{"amount":0,"code":{"key":"51a6796716a8afd0f00001c5","displayName":"USD","type":"core.lookup","name":"usd"},"convertedOn":"2015-10-20T08:32:07.206Z"}},"notes":[],"poAttachments":[],"resolutionDate":"","opportunity":{"_id":"5625fb65e4b08169c544461b","type":"app.opportunity","amount":{"amount":${#TestSuite#amount},"type":"core.currency","normalizedAmount":{"amount":${#TestSuite#amount},"code":{"key":"51a6796716a8afd0f00001c5","displayName":"USD","type":"core.lookup","name":"usd"},"convertedOn":"2015-10-20T08:30:07.391Z"},"code":{"name":"usd","displayName":"USD","type":"core.lookup"}},"targetAmount":{"amount":${#TestSuite#amount},"type":"core.currency","normalizedAmount":{"amount":${#TestSuite#amount},"code":{"key":"51a6796716a8afd0f00001c5","displayName":"USD","type":"core.lookup","name":"usd"},"convertedOn":"2015-10-20T08:30:07.391Z"},"code":{"name":"usd","displayName":"USD","type":"core.lookup"}},"resellerAmount":{"amount":${#TestSuite#amount},"type":"core.currency","normalizedAmount":{"amount":${#TestSuite#amount},"code":{"key":"51a6796716a8afd0f00001c5","displayName":"USD","type":"core.lookup","name":"usd"},"convertedOn":"2015-10-20T08:30:07.391Z"},"code":{"name":"usd","displayName":"USD","type":"core.lookup"}},"resellerTargetAmount":{"amount":${#TestSuite#amount},"type":"core.currency","normalizedAmount":{"amount":${#TestSuite#amount},"code":{"key":"51a6796716a8afd0f00001c5","displayName":"USD","type":"core.lookup","name":"usd"},"convertedOn":"2015-10-20T08:30:07.391Z"},"code":{"name":"usd","displayName":"USD","type":"core.lookup"}},"upsellAmount":{"amount":0,"type":"core.currency","normalizedAmount":{"amount":0,"code":{"key":"51a6796716a8afd0f00001c5","displayName":"USD","type":"core.lookup","name":"usd"},"convertedOn":"2015-10-20T08:30:07.391Z"},"code":{"name":"usd","displayName":"USD","type":"core.lookup"}},"offerCount":1,"isSubordinate":false,"isRevoked":false,"extensions":{"master":{"clientBatchQuarter":{"type":"string","value":"fy16q4"},"clientRegion":{"type":"lookup","value":{"displayName":"India","name":"in","type":"app.lookup","key":"51a67a6416a8afd0f000c911"}},"country":{"type":"lookup","value":{"displayName":"India","name":"IN","type":"core.lookup","key":"51a67a6216a8afd0f000c4ea"}},"inactive":{"type":"boolean","value":false},"directChannel":{"type":"lookup","value":{"displayName":"Direct","name":"direct","type":"app.lookup","key":"51a67a6316a8afd0f000c760"}},"businessLine":{"type":"lookup","value":{"displayName":"Client Products","name":"client","type":"app.lookup","key":"51a67a6416a8afd0f000c95b"}},"targetPeriod":{"type":"lookup","value":{"displayName":"${#TestSuite#targetPeriodDName}","name":"${#TestSuite#targetPeriodName}","type":"app.lookup","value":{"start":"2015-05-02T12:00:00.000Z","end":"2015-07-08T12:00:00.000Z"},"key":"54f11014e4b0e68d1c36a365"}},"clientTheatre":{"type":"lookup","value":{"displayName":"NALA","name":"nala","type":"app.lookup","key":"51a67a6316a8afd0f000c764"}},"forecastedCloseDate":{"value":"${#TestSuite#dueDate}","type":"date"},"clientTerritory":{"type":"lookup","value":{"displayName":"CONSUMER","name":"consumer","type":"app.lookup","key":"51a67a6416a8afd0f000c9cd"}}},"tenant":{"customerNumber":{"type":"string","value":"${#TestSuite#custNumber}"},"buDescription":{"value":"India Direct","type":"string"},"margin":{"type":"number","value":0}}},"tags":["${#TestSuite#Tag}"],"flows":{"salesStages":{"state":{"name":"quoteDelivered","displayName":"Quote Delivered"},"transitions":[{"fromState":"-","toState":"notContacted","changeDate":"2015-10-20T08:29:25.660Z","timeGap":0},{"fromState":"notContacted","toState":"contacted","changeDate":"2015-10-20T08:29:57.831Z","timeGap":32171},{"fromState":"contacted","toState":"quoteRequested","changeDate":"2015-10-20T08:30:00.243Z","timeGap":2412},{"fromState":"quoteRequested","toState":"quoteCompleted","changeDate":"2015-10-20T08:30:05.452Z","timeGap":5209},{"fromState":"quoteCompleted","toState":"quoteDelivered","changeDate":"2015-10-20T08:30:07.368Z","timeGap":1916}],"target":{"key":"51a67b6016a8afd0f000cd03","displayName":"salesStages","name":"Sales Stages","type":"core.flow/assignment"}}},"displayName":"${#TestSuite#OppName}","commitLevel":{"key":"51a67a6416a8afd0f000c92e","value":{"color":"blue_allports","value":0.01},"displayName":"Plan","type":"app.lookup","name":"plan"},"systemProperties":{"revisionId":10,"tenant":"dell","createdOn":"2015-10-20T08:29:25.893Z","createdBy":"bill.moor@dell.com","lastModifiedOn":"2015-10-20T08:30:07.402Z","lastModifiedBy":"bill.moor@dell.com","expiredOn":"9999-01-01T00:00:00.000Z"},"targetDate":"2015-11-30T12:00:00.000Z","customerBuid":"${#TestSuite#buId}","relationships":[{"_id":"5625fc07e4b088850010e54d","type":"core.relationship","relation":{"type":"core.lookup","key":"51a67a6116a8afd0f000c301","displayName":"Quote","name":"quote"},"target":{"key":"${#TestSuite#quoteID}","type":"app.quote","_relationships":null,"flows":{"quoteStages":{"state":{"name":"delivered","displayName":"Delivered"},"transitions":[{"fromState":"-","toState":"staged","changeDate":"2015-10-20T08:29:59.531Z","timeGap":0},{"fromState":"staged","toState":"requested","changeDate":"2015-10-20T08:30:00.174Z","timeGap":643},{"fromState":"requested","toState":"completed","changeDate":"2015-10-20T08:30:05.366Z","timeGap":5192},{"fromState":"completed","toState":"delivered","changeDate":"2015-10-20T08:30:07.301Z","timeGap":1935}],"target":{"key":"51a67b6016a8afd0f000ccfa","displayName":"quoteStages","name":"Quote Stages","type":"core.flow/assignment"}}},"displayName":"Q-${#TestSuite#OppName}-V1","externalIds":[],"isDraft":false,"isBase":false,"isInvalid":false,"relationships":{},"revisionId":7}},{"_id":"5625fc07e4b088850010e54e","type":"core.relationship","relation":{"type":"core.lookup","key":"5539c8c9e4b08e76df7b5181","displayName":"Bill To Customer","name":"billToCustomer"},"target":{"key":"${#TestSuite#customerID}","type":"core.contact/organization","displayName":"${#TestSuite#CustomerName}","externalIds":[],"extensions":"","relationships":{},"revisionId":0},"relationships":[{"_id":"5625fc07e4b088850010e54f","type":"core.relationship","relation":{"type":"core.lookup","key":"5539c8c9e4b08e76df7b5182","displayName":"Address","name":"address"},"target":{"type":"core.address","key":"${#TestSuite#addressKey}","country":{"key":"51a67a6216a8afd0f000c524","displayName":"United States","name":"US","type":"core.lookup"},"displayName":"${#TestSuite#address}","externalIds":[],"relationships":{},"revisionId":0}},{"_id":"5625fc07e4b088850010e550","type":"core.relationship","relation":{"type":"core.lookup","key":"51a67a6116a8afd0f000c2ec","displayName":"Contact","name":"contact"},"target":{"type":"core.contact/person","key":"${#TestSuite#contactKey}","displayName":"${#TestSuite#contact}","externalIds":[],"extensions":"","relationships":{},"revisionId":0}}]},{"_id":"5625fc07e4b088850010e551","type":"core.relationship","relation":{"type":"core.lookup","key":"51a67a6116a8afd0f000c338","displayName":"Latest Quote","name":"latestQuote"},"target":{"key":"${#TestSuite#quoteID}","type":"app.quote","_relationships":null,"flows":{"quoteStages":{"state":{"name":"delivered","displayName":"Delivered"},"transitions":[{"fromState":"-","toState":"staged","changeDate":"2015-10-20T08:29:59.531Z","timeGap":0},{"fromState":"staged","toState":"requested","changeDate":"2015-10-20T08:30:00.174Z","timeGap":643},{"fromState":"requested","toState":"completed","changeDate":"2015-10-20T08:30:05.366Z","timeGap":5192},{"fromState":"completed","toState":"delivered","changeDate":"2015-10-20T08:30:07.301Z","timeGap":1935}],"target":{"key":"51a67b6016a8afd0f000ccfa","displayName":"quoteStages","name":"Quote Stages","type":"core.flow/assignment"}}},"displayName":"Q-${#TestSuite#OppName}-V1","externalIds":[],"isDraft":false,"isBase":false,"isInvalid":false,"relationships":{},"revisionId":7}},{"_id":"5625fc07e4b088850010e552","type":"core.relationship","relation":{"type":"core.lookup","key":"51a67a6116a8afd0f000c2ff","displayName":"Primary Quote","name":"primaryQuote"},"target":{"type":"app.quote","key":"${#TestSuite#quoteID}","_relationships":null,"flows":{"quoteStages":{"state":{"name":"delivered","displayName":"Delivered"},"transitions":[{"fromState":"-","toState":"staged","changeDate":"2015-10-20T08:29:59.531Z","timeGap":0},{"fromState":"staged","toState":"requested","changeDate":"2015-10-20T08:30:00.174Z","timeGap":643},{"fromState":"requested","toState":"completed","changeDate":"2015-10-20T08:30:05.366Z","timeGap":5192},{"fromState":"completed","toState":"delivered","changeDate":"2015-10-20T08:30:07.301Z","timeGap":1935}],"target":{"key":"51a67b6016a8afd0f000ccfa","displayName":"quoteStages","name":"Quote Stages","type":"core.flow/assignment"}}},"displayName":"Q-${#TestSuite#OppName}-V1","externalIds":[],"isDraft":false,"isBase":false,"isInvalid":false,"relationships":{},"revisionId":7}},{"_id":"5625fc07e4b088850010e553","type":"core.relationship","relation":{"type":"core.lookup","key":"51a67a6116a8afd0f000c336","displayName":"Base Quote","name":"baseQuote"},"target":{"key":"${#TestSuite#initialOfferKey}","type":"app.quote","_relationships":null,"displayName":"Initial Offers","isDraft":false,"isBase":true,"isInvalid":false,"relationships":{},"revisionId":1}},{"_id":"5625fc07e4b088850010e554","type":"core.relationship","relation":{"type":"core.lookup","key":"5539c8c9e4b0be591c96db16","displayName":"Ship To Customer","name":"shipToCustomer"},"target":{"key":"${#TestSuite#customerID}","type":"core.contact/organization","displayName":"${#TestSuite#CustomerName}","externalIds":[],"extensions":"","relationships":{},"revisionId":0},"relationships":[{"_id":"5625fc07e4b088850010e555","type":"core.relationship","relation":{"type":"core.lookup","key":"5539c8c9e4b08e76df7b5182","displayName":"Address","name":"address"},"target":{"type":"core.address","key":"${#TestSuite#addressKey}","country":{"key":"51a67a6216a8afd0f000c524","displayName":"United States","name":"US","type":"core.lookup"},"displayName":"${#TestSuite#address}","externalIds":[],"relationships":{},"revisionId":0}},{"_id":"5625fc07e4b088850010e556","type":"core.relationship","relation":{"type":"core.lookup","key":"51a67a6116a8afd0f000c2ec","displayName":"Contact","name":"contact"},"target":{"type":"core.contact/person","key":"${#TestSuite#contactKey}","displayName":"${#TestSuite#contact}","externalIds":[],"extensions":"","relationships":{},"revisionId":0}}]},{"_id":"5625fc07e4b088850010e557","type":"core.relationship","relation":{"type":"core.lookup","key":"51a67a6116a8afd0f000c2ef","displayName":"Customer","name":"customer"},"target":{"key":"${#TestSuite#customerID}","type":"core.contact/organization","displayName":"${#TestSuite#CustomerName}","externalIds":[],"extensions":"","relationships":{},"revisionId":0},"relationships":[{"_id":"5625fc07e4b088850010e558","type":"core.relationship","relation":{"type":"core.lookup","key":"5539c8c9e4b08e76df7b5182","displayName":"Address","name":"address"},"target":{"type":"core.address","key":"${#TestSuite#addressKey}","country":{"key":"51a67a6216a8afd0f000c524","displayName":"United States","name":"US","type":"core.lookup"},"displayName":"${#TestSuite#address}","externalIds":[],"relationships":{},"revisionId":0}},{"_id":"5625fc07e4b088850010e559","type":"core.relationship","relation":{"type":"core.lookup","key":"51a67a6116a8afd0f000c2fe","displayName":"Primary Contact","name":"primaryContact"},"target":{"type":"core.contact/person","key":"${#TestSuite#contactKey}","displayName":"${#TestSuite#contact}","externalIds":[],"extensions":"","relationships":{},"revisionId":0}},{"_id":"5625fc07e4b088850010e55a","type":"core.relationship","relation":{"type":"core.lookup","key":"51a67a6116a8afd0f000c2ec","displayName":"Contact","name":"contact"},"target":{"type":"core.contact/person","key":"${#TestSuite#contactKey}","displayName":"${#TestSuite#contact}","externalIds":[],"extensions":"","relationships":{},"revisionId":0}}]}]},"type":"app.request.booking.input","priority":{"name":"medium"},"tags":[""],"relationships":[{"type":"core.relationship","relation":{"displayName":"Requested By","name":"requestedBy","type":"core.relationship"},"target":{"displayName":"Bill Moor","type":"core.contact/person","key":"50ac0251911b1a00000001dd"}},{"type":"core.relationship","relation":{"displayName":"quote","name":"quote","type":"core.relationship"},"target":{"displayName":"Q-${#TestSuite#OppName}-V1","type":"app.quote","key":"${#TestSuite#quoteID}"}},{"relationships":[{"_id":"5625fc07e4b088850010e558","type":"core.relationship","relation":{"displayName":"Address","name":"address","type":"core.lookup","key":"5539c8c9e4b08e76df7b5182"},"target":{"revisionId":0,"country":{"displayName":"United States","name":"US","type":"core.lookup","key":"51a67a6216a8afd0f000c524"},"relationships":{},"displayName":"${#TestSuite#address}","externalIds":[],"type":"core.address","key":"${#TestSuite#addressKey}"}},{"_id":"5625fc07e4b088850010e559","type":"core.relationship","relation":{"displayName":"Primary Contact","name":"primaryContact","type":"core.lookup","key":"51a67a6116a8afd0f000c2fe"},"target":{"revisionId":0,"relationships":{},"extensions":"","displayName":"${#TestSuite#contact}","externalIds":[],"type":"core.contact/person","key":"${#TestSuite#contactKey}"}},{"_id":"5625fc07e4b088850010e55a","type":"core.relationship","relation":{"displayName":"Contact","name":"contact","type":"core.lookup","key":"51a67a6116a8afd0f000c2ec"},"target":{"revisionId":0,"relationships":{},"extensions":{"tenant":{"contactId":{"type":"string","value":"24339976"},"customerId":{"type":"string","value":"AUTP15O10001"}}},"displayName":"${#TestSuite#contact}","externalIds":[],"type":"core.contact/person","key":"${#TestSuite#contactKey}"}}],"_id":"5625fc07e4b088850010e557","type":"core.relationship","relation":{"displayName":"Customer","name":"customer","type":"core.lookup","key":"51a67a6116a8afd0f000c2ef"},"target":{"revisionId":0,"relationships":{},"extensions":"","displayName":"${#TestSuite#CustomerName}","externalIds":[],"type":"core.contact/organization","key":"${#TestSuite#customerID}"}},{"relation":{"name":"opportunity","type":"core.relationship","displayName":"Opportunity"},"target":{"type":"app.quote","key":"${#TestSuite#OppID}","displayName":"${#TestSuite#OppName}"},"type":"core.relationship"}],"resellerPoAttachments":[],"bookingDocuments":[],"resellerAmount":{"amount":${#TestSuite#amount},"type":"core.currency","normalizedAmount":{"amount":${#TestSuite#amount},"code":{"key":"51a6796716a8afd0f00001c5","displayName":"USD","type":"core.lookup","name":"usd"},"convertedOn":"2015-10-20T08:32:07.206Z"},"code":{"displayName":"USD","name":"usd","type":"core.lookup","key":"51a67a6116a8afd0f000c389"}},"requestedTimeZone":{"name":"IST"},"dueDate":"${#TestSuite#futuredate}","requestedCurrency":{"key":"51a67a6116a8afd0f000c389","displayName":"USD","type":"core.lookup","name":"usd"},"salesStage":"Quote Delivered","poNumber":"PID123","poDate":"${#TestSuite#currentDate}","winResultReason":{"displayName":"CS - Backdated - BKD","name":"csBKD","type":"app.lookup","key":"51a67a6316a8afd0f000c715"},"lossResultReason":{},"origin":{"url":"#tab/app.quotes/vq=ID%3A%20%225625fb86e4b021752335a542%22"}}</con:request><con:originalUri>https://pe-internal.dev.ssi-cloud.com/rest/api/dell/app.bookings/5732dc4ce4b0c7db13b1c1f1</con:originalUri><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script-Booking Complusory Fields" id="66b96b5b-9c82-4405-8a8e-f7f0d2c6b0b2"><con:settings/><con:config><script>import org.openqa.selenium.By
import org.openqa.selenium.*
import org.openqa.selenium.WebDriver
import org.openqa.selenium.WebElement
import org.openqa.selenium.chrome.ChromeDriver
import org.openqa.selenium.firefox.FirefoxDriver;
import org.openqa.selenium.support.ui.ExpectedCondition
import org.openqa.selenium.support.ui.WebDriverWait
import org.openqa.selenium.OutputType
import org.apache.commons.io.FileUtils
import org.openqa.selenium.interactions.Actions;
import org.openqa.selenium.Keys
import org.openqa.selenium.firefox.FirefoxProfile;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.openqa.selenium.support.ui.Select;
import org.openqa.selenium.WebDriverException;
import java.lang.Numberjava.lang.*
import groovy.json.*
import java.awt.AWTException;
import java.awt.Robot;
import java.awt.Toolkit;
import java.awt.event.KeyEvent;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.text.DateFormat;
import java.util.Date;
import java.util.TimeZone;
import java.util.*
import org.joda.time.DateTime;
import groovy.transform.Field


def tenant = context.expand( '${#TestSuite#tenant}' )
def loginID = context.expand( '${#TestSuite#loginID}' )
//def salesRepEmail = context.expand( '${#Project#salesRepEmail}' )
def password = context.expand( '${#TestSuite#password}' )
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def projectDir = groovyUtils.projectPath
def resultDir = new File(projectDir);
def serverName = context.expand( '${#TestSuite#serverName}' )
def version = context.expand( '${#Project#version}' )
def bookingID = context.expand( '${#TestCase#BookingID}' )
def id="id"
url="https://"+serverName+".ssi-cloud.com"


//Setting firefox profile to download file
FirefoxProfile  fp = new FirefoxProfile();
fp.setPreference("browser.download.folderList",2);
fp.setPreference("browser.download.manager.showWhenStarting",false);
fp.setPreference("browser.download.dir", projectDir);
fp.setPreference("browser.helperApps.neverAsk.openFile", "application/octet-stream");
fp.setPreference("browser.helperApps.neverAsk.saveToDisk", "application/octet-stream");

WebDriver driver = new FirefoxDriver(fp)
/*
//Initiate Chrome WebDriver
System.setProperty("webdriver.chrome.driver", "C:/Users/ankits.rajput/Downloads/chromedriver.exe");
log.info(System.getProperty("webdriver.chrome.driver"));
	
 WebDriver driver=new ChromeDriver()
*/

 //BY Using this we can use driver object in other methods 
 def projectContext = context.testCase.testSuite.project.context
 projectContext.driver = driver
 driver.manage().deleteAllCookies();


try
{
           // Url to be opened	
           driver.get(url) 

           // Apllying wait
           WebDriverWait wait = new WebDriverWait(driver, 100); 

           //Username 
           wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath("//input[@id='userid']")));   
           driver.findElement(By.xpath("//input[@id='userid']")).sendKeys(loginID);

		//password
		driver.findElement(By.xpath("//input[@id='password']")).sendKeys(password);

		//version
		WebElement mySelectElm = driver.findElement(By.id("platformVersion")); 
		Select mySelect = new Select(mySelectElm);
		mySelect.selectByVisibleText(version);
		
		//submit button
		driver.findElement(By.xpath("//input[@id='xsubmit']")).click();
		
		//maximize windows
		driver.manage().window().maximize();
		Thread.sleep(5000); 

         //Clicking on Bookings Tab
          wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath("//div[4]/div[14]/div/div/div")));   
		WebElement table = driver.findElement(By.xpath("//div[4]/div[14]/div/div/div"));
		List&lt;WebElement> rows1 = table.findElements(By.xpath("//li[@class='av_tab']"));
		java.util.Iterator&lt;WebElement> i = rows1.iterator();

		while(i.hasNext()) {
  		WebElement row = i.next();
  		       
              if ( row.getText()=="BOOKINGS"){
              row.click();
              break;}
           
		}
         search_by(id,bookingID)
         
           driver.findElement(By.xpath(".//*[@id='1']/td[2]/span")).click();

  		Thread.sleep(8000); 

Boolean isPresent = driver.findElements(By.xpath("//tbody/tr/td[@class='sectionFormLayoutCol']/div/div/div/div/div/ul/li[19]/div/div[@data-widget-path='amount']")).size() > 0
if (isPresent==true){
	Thread.sleep(5000); 
     driver.quit();
   testRunner.gotoStepByName( "Counter" )
}



  		 
     // Line Item Amount
 		//Boolean isPresent = driver.findElements(By.xpath("//tbody/tr/td[@class='sectionFormLayoutCol']/div/div/div/div/div/ul/li[19]/div/div[@data-widget-path='amount']")).size() > 0
		@Field amt=0
		@Field amt1=0
		
		if (isPresent==true){
		wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath("//tbody/tr/td[@class='sectionFormLayoutCol']/div/div/div/div/div/ul/li[19]/div/div[@data-widget-path='amount']")));   
       	amt= driver.findElement(By.xpath("//tbody/tr/td[@class='sectionFormLayoutCol']/div/div/div/div/div/ul/li[19]/div/div[@data-widget-path='amount']")).getText();
       	log.info ("amt: " + amt);
		log.info ("size" +amt.size());
		amt1 = amt.substring(0, amt.length() - 3);
          log.info ("amt1:" +amt1);
       	}
       	else{
       	wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath("//tbody/tr/td[@class='sectionFormLayoutCol']/div/div/div/div/div/ul/li[19]/div/div[@data-widget-path='amount_amount']")));   
       	amt= driver.findElement(By.xpath("//tbody/tr/td[@class='sectionFormLayoutCol']/div/div/div/div/div/ul/li[19]/div/div[@data-widget-path='amount_amount']")).getText();
       	
		log.info ("amt: " + amt);
		log.info ("size" +amt.size());
		amt1 = amt.substring(0, amt.length() - 3);
          log.info ("amt1:" +amt1);}
// PoAmount
		wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath("//tbody/tr/td[@class='sectionFormLayoutCol']/div/div/div/div/div/ul/li[6]/div/input[@class='widget_currency-amount']")));   
		driver.findElement(By.xpath("//tbody/tr/td[@class='sectionFormLayoutCol']/div/div/div/div/div/ul/li[6]/div/input[@class='widget_currency-amount']")).clear()
       	driver.findElement(By.xpath("//tbody/tr/td[@class='sectionFormLayoutCol']/div/div/div/div/div/ul/li[6]/div/input[@class='widget_currency-amount']")).sendKeys(amt1);
		Thread.sleep(2000); 


// PoAmount Currency
          String last3;
          	if (amt == null || amt.length() &lt; 3) {
  			  last3 = amt;
  			  log.info ("last: " + last3);
			} else {
 			   last3 = amt.substring(amt.length() - 3);
 			   log.info ("last3: " + last3);
			}

		Thread.sleep(1000); 
          Select dropdown = new Select(driver.findElement(By.xpath("//tbody/tr/td[@class='sectionFormLayoutCol']/div/div/div/div/div/ul/li[6]/div/select[@class='widget_currency-code required']")));
          dropdown.selectByVisibleText(last3);


//PoNumber
 Random random1 = new Random();
      
String randomInteger1 = random1.nextInt(50000).toString();
     // int randomInteger = random.nextInt();
      log.info("SoNumber: " + randomInteger1);
 


		wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath("//tbody/tr/td[1]/div/div/div/div[1]/div/ul/li[4]/input")));  
		driver.findElement(By.xpath("//tbody/tr/td[1]/div/div/div/div[1]/div/ul/li[4]/input")).clear() 
       	driver.findElement(By.xpath("//tbody/tr/td[1]/div/div/div/div[1]/div/ul/li[4]/input")).sendKeys(randomInteger1);
		Thread.sleep(2000); 

 //PoDate

 DateFormat dateFormat23 = new SimpleDateFormat("d"); 
            Date date23 = new Date();

            String today1 = dateFormat23.format(date23); 

  driver.findElement(By.xpath("//tbody/tr/td[@class='sectionFormLayoutCol']/div/div/div/div/div/ul/li[9]/div/div[@class='trigger_by_button']")).click();
  
  WebElement dateWidget1 = driver.findElement(By.xpath(".//*[@id='ui-datepicker-div']/table/tbody"));
  List rows11=dateWidget1.findElements(By.tagName("tr"));
  List columns11=dateWidget1.findElements(By.tagName("td"));
  
  for (WebElement cell: columns11){
  
   if (cell.getText().equals(today1)){
   cell.click();
   break;
   }}

//SoAmount
		wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath("//tbody/tr/td[@class='sectionFormLayoutCol']/div/div/div/div/div/ul/li[12]/div/input[@class='widget_currency-amount']")));
		driver.findElement(By.xpath("//tbody/tr/td[@class='sectionFormLayoutCol']/div/div/div/div/div/ul/li[12]/div/input[@class='widget_currency-amount']")).clear();   
       	driver.findElement(By.xpath("//tbody/tr/td[@class='sectionFormLayoutCol']/div/div/div/div/div/ul/li[12]/div/input[@class='widget_currency-amount']")).sendKeys(amt1);
		Thread.sleep(2000); 


// SoAmount Currency
          
		Thread.sleep(1000); 
          Select dropdown1 = new Select(driver.findElement(By.xpath("//tbody/tr/td[@class='sectionFormLayoutCol']/div/div/div/div/div/ul/li[12]/div/select[@class='widget_currency-code']")));
          dropdown1.selectByVisibleText(last3);

 //SoDate

 DateFormat dateFormat2 = new SimpleDateFormat("d"); 
            Date date2 = new Date();

            String today = dateFormat2.format(date2); 

  driver.findElement(By.xpath("//tbody/tr/td[@class='sectionFormLayoutCol']/div/div/div/div/div/ul/li[14]/div/div[@class='trigger_by_button']")).click();
  
  WebElement dateWidget = driver.findElement(By.xpath(".//*[@id='ui-datepicker-div']/table/tbody"));
  List rows=dateWidget.findElements(By.tagName("tr"));
  List columns=dateWidget.findElements(By.tagName("td"));
  
  for (WebElement cell: columns){
  
   if (cell.getText().equals(today)){
   cell.click();
    break;
   }}


//SoNumber
 Random random = new Random();
      
String randomInteger = random.nextInt(40000).toString();
     // int randomInteger = random.nextInt();
      log.info(" SoNumber: " + randomInteger);
 


		wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath("//tbody/tr/td[1]/div/div/div/div[1]/div/ul/li[11]/input")));   
       	driver.findElement(By.xpath("//tbody/tr/td[1]/div/div/div/div[1]/div/ul/li[11]/input")).sendKeys(randomInteger);
		Thread.sleep(2000); 



//savebtn
           driver.findElement(By.xpath("//button[@id='saveBtn']")).click();

		Thread.sleep(5000); 
          driver.quit();
          
}

catch(Exception e)
{
log.info "Exception encountered : " + e.message
}


def WebElement clear_search() {
	  def projectContext = context.testCase.testSuite.project.context
  	  def driver = projectContext.driver
  	  WebDriverWait wait = new WebDriverWait(driver, 200); 
       wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath("//div[@class='VS-icon VS-icon-cancel VS-cancel-search-box']"))); 
	  ele=driver.findElement(By.xpath("//div[@class='VS-icon VS-icon-cancel VS-cancel-search-box']"));
	return ele;
	}




def rClick() {

	 try {
	     robot = new Robot();
	     robot.keyPress(KeyEvent.VK_ENTER);
	     robot.keyRelease(KeyEvent.VK_ENTER);
	 }  catch (Exception e) {
	     e.printStackTrace();
	     throw new WebDriverException("Unable to perform Click Operation");
	 }
	 robot = null;
	}



def search_by(String val1, String val2) throws InterruptedException {
	def projectContext = context.testCase.testSuite.project.context
  	def driver = projectContext.driver
	clear_search().click();
	Thread.sleep(1000);
	WebDriverWait wait = new WebDriverWait(driver, 200); 
     wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath("//input[@class='ui-autocomplete-input']")));
	driver.findElement(By.xpath("//input[@class='ui-autocomplete-input']")).sendKeys(val1);
	Thread.sleep(1000);
	rClick();
	wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath("//input[contains(@class,'search_facet_input VS-interface ui-autocomplete-input')]")));
	driver.findElement(By.xpath("//input[contains(@class,'search_facet_input VS-interface ui-autocomplete-input')]")).sendKeys(val2);
	Thread.sleep(1000);
	rClick();
	Thread.sleep(3000);
}






def search_with_two_criteria(String val1, String val2,String val3, String val4) throws InterruptedException {
	clear_search().click();
	driver.findElement(By.xpath("//input[@class='ui-autocomplete-input']")).sendKeys(val1);
	driver.findElement(By.xpath("//input[contains(@class,'input VS-interface ui-autocomplete-input')]")).sendKeys(val2);
	Thread.sleep(1000);
	rClick();
	driver.findElement(By.xpath("//div[@class='VS-search-inner']/div[3]/input")).sendKeys(val3);
	driver.findElement(By.xpath("//div[@class='VS-search-inner']/div[4]/div[2]/input")).sendKeys(val4);
	Thread.sleep(1000);
	rClick();
	Thread.sleep(3000);
}


def selectDropDownValue(String ValueToSelect) 
{
    def projectContext = context.testCase.testSuite.project.context
    def driver = projectContext.driver
    webelement findDropDownValue=driver.findElements(By.xpath("//tbody/tr/td[@class='sectionFormLayoutCol']/div/div/div/div/div/ul/li[6]/div/select[@class='widget_currency-code required']"))    //this will find that dropdown 

    wait.until(ExpectedConditions.visibilityOf(findDropDownValue));    // wait till that dropdown appear

    super.highlightElement(findDropDownValue);   // highlight that dropdown     

    new Select(findDropDownValue).selectByValue(ValueToSelect);    //select that option which u had passed as argument
}</script></con:config></con:testStep><con:testStep type="delay" name="Delay" id="3e2a5986-441e-4ce6-9444-ca75f22b31be"><con:settings/><con:config><delay>50000</delay></con:config></con:testStep><con:testStep type="restrequest" name="CompleteBooking" id="9aee9f21-4d5d-4b9e-afa6-53e691fc8601"><con:settings/><con:config service="CompleteBooking" resourcePath="/rest/api/${#TestSuite#tenant}/app.bookings/${#TestCase#BookingID}::complete" methodName="57308996e4b08fde9a0bdeda::complete" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CompleteBooking" id="dc8aab17-68c1-4cc3-9936-78d3dad0764f" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Cookie" value="${#TestSuite#Cookie}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://${#TestSuite#serverName}.ssi-cloud.com</con:endpoint><con:request>{"detail":{"_id":"${#TestCase#BookingID}","type":"app.booking/sales","displayName":"${#TestCase#BookingDisplayName}"},"selections":[],"inversesummary":true,"extinversesummary":true,"origin":{"url":"#detail/app.bookings/${#TestCase#BookingID}"}}</con:request><con:originalUri>https://pe-internal.dev.ssi-cloud.com/rest/api/dell/app.bookings/57303300e4b0c7db13a73b0a::complete</con:originalUri><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters>
  <con:entry key="inversesummary" value="true"/>
  <con:entry key="extinversesummary" value="true"/>
</con:parameters><con:parameterOrder><con:entry>inversesummary</con:entry><con:entry>extinversesummary</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="Property Transfer-CompletedDate" id="94d226a4-57d2-4dd6-b508-1b3eca2d582f"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>CompletedDate</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>CompleteBooking</con:sourceStep><con:sourcePath>declare namespace ns1='https://pe-internal.dev.ssi-cloud.com/rest/api/dell/app.bookings/57303300e4b0c7db13a73b0a::complete';
//ns1:Response[1]/ns1:data[1]/ns1:app.bookingSales[1]/ns1:e[1]/ns1:amount[1]/ns1:normalizedAmount[1]/ns1:convertedOn[1]</con:sourcePath><con:targetType>ChangeDate</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:targetPath/><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TatTotal</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>CompleteBooking</con:sourceStep><con:sourcePath>declare namespace ns1='https://pe-internal.dev.ssi-cloud.com/rest/api/dell/app.bookings/57303300e4b0c7db13a73b0a::complete';
//ns1:Response[1]/ns1:data[1]/ns1:app.bookingSales[1]/ns1:e[1]/ns1:extensions[1]/ns1:master[1]/ns1:tatTotal[1]/ns1:value[1]</con:sourcePath><con:targetType>TatTotal</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TatNet</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>CompleteBooking</con:sourceStep><con:sourcePath>declare namespace ns1='https://pe-internal.dev.ssi-cloud.com/rest/api/dell/app.bookings/57303300e4b0c7db13a73b0a::complete';
//ns1:Response[1]/ns1:data[1]/ns1:app.bookingSales[1]/ns1:e[1]/ns1:extensions[1]/ns1:master[1]/ns1:tatNet[1]/ns1:value[1]</con:sourcePath><con:targetType>TatNet</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script-TatCalculations" id="63a2e4db-00e5-46b9-9d15-c85f6a22cfb9" disabled="true"><con:settings/><con:config><script><![CDATA[import java.text.SimpleDateFormat;
import java.util.Date;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.text.DateFormat;
import java.util.TimeZone;
import java.util.concurrent.TimeUnit;
import java.lang.Long

def createdOnDate = context.expand( '${#TestCase#requestedTime}' )
def completedDate = context.expand( '${#TestCase#ChangeDate}' )

String string = createdOnDate;
String string1 = completedDate;


SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ");
SimpleDateFormat output = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS");

//requested Date
Date date = sdf.parse(createdOnDate.replaceAll("Z", "+0000"));
String nTime = output.format(date);

myDate = Date.parse("yyyy-MM-dd'T'HH:mm:ss.SSS", nTime) ;
//log.info("string: " + string);
log.info("date: " + nTime);

//change Date
Date date1 = sdf.parse(completedDate.replaceAll("Z", "+0000"));
log.info("date1: " + date1);

String nTime1 = output.format(date1);
myDate1 = Date.parse("yyyy-MM-dd'T'HH:mm:ss.SSS", nTime1) ;
log.info("myDate1: " + myDate1);
log.info("date: " + nTime1);


use(groovy.time.TimeCategory) {
    def duration = date1 - date
    log.info ("Timediff::" + duration)
    log.info "Days: ${duration.days}, Hours: ${duration.hours},Minutes: ${duration.minutes},Seconds: ${duration.seconds}"
    testRunner.testCase.setPropertyValue( "Timediff", duration.toString());
     def minutes=0
     def seconds=0

   StringBuilder sb = new StringBuilder(64);
        sb.append(duration.days);
        sb.append(" Days ");
        sb.append(duration.hours);
        sb.append(" Hours ");
      

        if (duration.minutes==0 && duration.seconds>0){
           minutes=duration.minutes+1
        	 sb.append(duration.minutes);
        	 sb.append(" Minutes ");
        	 seconds=0
        	 sb.append(seconds);
           sb.append(" Seconds");
        }
       else if (duration.minutes>0 && duration.seconds>0 && duration.seconds<=30){
	      sb.append(duration.minutes);
        	 sb.append(" Minutes ");
        	seconds=0
        	 sb.append(seconds);;
           sb.append(" Seconds");
        }
        else if (duration.minutes>0 && duration.seconds>30){
        	minutes=duration.minutes+1
        	 sb.append(minutes);
        	 sb.append(" Minutes ");
        	seconds=0
        	 sb.append(seconds);
           sb.append(" Seconds");
        	}
              
log.info("sbTime::" + sb.toString())
 testRunner.testCase.setPropertyValue( "TimediffAfterCal", sb.toString());

    
}





/*
DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS");
//get current date time with Date()
Date date2 = new Date();
log.info(dateFormat.format(date2));
//log.info firstDayOfWeekTimestamp
// Get calendar set to current date and time
Calendar c = Calendar.getInstance();
 	    c.set(Calendar.HOUR_OF_DAY, 0);
         c.set(Calendar.MINUTE, 0);
         c.set(Calendar.SECOND, 0);
         c.set(Calendar.MILLISECOND, 0);
         
         log.info c.getTime();

    
t2=(dateFormat.format(c.getTime()))
t3=(dateFormat.parse(t2))
Timeinhours=(t3 - myDate1);
log.info ("Time: " + Timeinhours)




//DateDifferentExample(nTime,nTime1)





Long DateDifferentExample(String dateStart,String dateStop) {

		//HH converts hour in 24 hours format (0-23), day calculation
		SimpleDateFormat format = new SimpleDateFormat("MM/dd/yyyy HH:mm:ss.SSS");

		Date d1 = null;
		Date d2 = null;

	
			d1 = format.parse(dateStart);
			d2 = format.parse(dateStop);

			//in milliseconds
			long diff = d2.getTime() - d1.getTime();

			 long days = TimeUnit.MILLISECONDS.toDays(diff);
        diff -= TimeUnit.DAYS.toMillis(days);
        long hours = TimeUnit.MILLISECONDS.toHours(diff);
        diff -= TimeUnit.HOURS.toMillis(hours);
        long minutes = TimeUnit.MILLISECONDS.toMinutes(diff);
        diff -= TimeUnit.MINUTES.toMillis(minutes);
        long seconds = TimeUnit.MILLISECONDS.toSeconds(diff);

        StringBuilder sb = new StringBuilder(64);
   
        sb.append(hours);
        sb.append(" Hours ");
        sb.append(minutes);
        sb.append(" Minutes "); 
        sb.append(seconds);
        sb.append(" Seconds");
        
        log.info("sbT::"+ sb.toString())
        testRunner.testCase.setPropertyValue( "tatNetmillies", sb.toString());

			log.info(diffDays + " days, ");
			log.info(diffHours + " hours, ");
			log.info(diffMinutes + " minutes, ");
			log.info(diffSeconds + " seconds.");

		
	}
*/
]]></script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script-TAT Calculations" id="5cce4984-7dbe-464e-bfc8-ec035079cecc" disabled="true"><con:settings/><con:config><script><![CDATA[import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.TimeZone;
import java.util.concurrent.TimeUnit;
def quoteID = context.expand( '${#TestCase#QuoteID}' )
def timeZone = context.expand( '${#TestCase#TimeZone}' )
def requestedTime = context.expand( '${#TestCase#requestedTime}' )
def changeDate = context.expand( '${#TestCase#ChangeDate}' )


def turnaroundTime = context.expand( '${#TestCase#TurnaroundTime}' )
def tatNet = context.expand( '${#TestCase#TatNet}' )
def tatTotal = context.expand( '${#TestCase#TatTotal}' )
def long minutes1 = tatTotal.toLong()
def long tatTotalmillies = minutes1 * 60 * 1000;
def long tatNetmillies = minutes1 * 60 * 1000;

//getWorkingDaysBetweenTwoDates( requestedTime,endDate)

//getDurationBreakdown(millies)

getDurationBreakdownMinutes(tatTotalmillies)
getDurationBreakdownMinutes1(tatNetmillies)


/*def String getDurationBreakdown(long millies)
    {
        if(millies < 0)
        {
            throw new IllegalArgumentException("Duration must be greater than zero!");
        }

        long days = TimeUnit.MILLISECONDS.toDays(millies);
        millies -= TimeUnit.DAYS.toMillis(days);
        long hours = TimeUnit.MILLISECONDS.toHours(millies);
        millies -= TimeUnit.HOURS.toMillis(hours);
        long minutes = TimeUnit.MILLISECONDS.toMinutes(millies);
        millies -= TimeUnit.MINUTES.toMillis(minutes);
        long seconds = TimeUnit.MILLISECONDS.toSeconds(millies);

        StringBuilder sb = new StringBuilder(64);
        sb.append(days);
        sb.append(" Days ");
        sb.append(hours);
        sb.append(" Hours ");
      

        if (minutes==0 && seconds>0){
        	 minutes=minutes+1
        	 sb.append(minutes);
        	 sb.append(" Minutes ");
        	 seconds=0
        	 sb.append(seconds);
           sb.append(" Seconds");
        }
       else if (minutes>0 && seconds>0 && seconds<=30){
	      sb.append(minutes);
        	 sb.append(" Minutes ");
        	 seconds=0
        	 sb.append(seconds);
           sb.append(" Seconds");
        }
        else if (minutes>0 && seconds>30){
        	minutes=minutes+1
        	 sb.append(minutes);
        	 sb.append(" Minutes ");
        	 seconds=0
        	 sb.append(seconds);
           sb.append(" Seconds");
        	}
              
log.info(sb.toString())
       testRunner.testCase.setPropertyValue( "TatfromRestTimegap", sb.toString());
    }*/

def String getDurationBreakdownMinutes(long tatTotalmillies)
    {
        if(tatTotalmillies < 0)
        {
            throw new IllegalArgumentException("Duration must be greater than zero!");
        }

        long days = TimeUnit.MILLISECONDS.toDays(tatTotalmillies);
        tatTotalmillies -= TimeUnit.DAYS.toMillis(days);
        long hours = TimeUnit.MILLISECONDS.toHours(tatTotalmillies);
        tatTotalmillies -= TimeUnit.HOURS.toMillis(hours);
        long minutes = TimeUnit.MILLISECONDS.toMinutes(tatTotalmillies);
        tatTotalmillies -= TimeUnit.MINUTES.toMillis(minutes);
        long seconds = TimeUnit.MILLISECONDS.toSeconds(tatTotalmillies);

        StringBuilder sb = new StringBuilder(64);
        sb.append(days);
        sb.append(" Days ");
        sb.append(hours);
        sb.append(" Hours ");
        sb.append(minutes);
        sb.append(" Minutes "); 
        sb.append(seconds);
        sb.append(" Seconds");
        
        log.info(sb.toString())
        testRunner.testCase.setPropertyValue( "TatfromTatTotal", sb.toString());
    }

def String getDurationBreakdownMinutes1(long tatNetmillies)
    {
        if(tatNetmillies < 0)
        {
            throw new IllegalArgumentException("Duration must be greater than zero!");
        }

        long days = TimeUnit.MILLISECONDS.toDays(tatNetmillies);
        tatNetmillies -= TimeUnit.DAYS.toMillis(days);
        long hours = TimeUnit.MILLISECONDS.toHours(tatNetmillies);
        tatNetmillies -= TimeUnit.HOURS.toMillis(hours);
        long minutes = TimeUnit.MILLISECONDS.toMinutes(tatNetmillies);
        tatNetmillies -= TimeUnit.MINUTES.toMillis(minutes);
        long seconds = TimeUnit.MILLISECONDS.toSeconds(tatNetmillies);

        StringBuilder sb = new StringBuilder(64);
        sb.append(days);
        sb.append(" Days ");
        sb.append(hours);
        sb.append(" Hours ");
        sb.append(minutes);
        sb.append(" Minutes "); 
        sb.append(seconds);
        sb.append(" Seconds");
        
        log.info(sb.toString())
        testRunner.testCase.setPropertyValue( "tatNetmillies", sb.toString());
    }




    ]]></script></con:config></con:testStep><con:testStep type="groovy" name="Assertion For TatTotal and TatNet" id="7410dd37-a8da-49ac-9fb5-3b07e9471bbd" disabled="true"><con:settings/><con:config><script>def tatfromTatTotal = context.expand( '${#TestCase#TatfromTatTotal}' )
def tatfromRestTimegap = context.expand( '${#TestCase#TatfromRestTimegap}' )
def tatNetmillies = context.expand( '${#TestCase#tatNetmillies}' )
def timediffAfterCal = context.expand( '${#TestCase#TimediffAfterCal}' )




assert tatfromTatTotal==timediffAfterCal
assert tatNetmillies==timediffAfterCal</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script 5" id="fb53381a-6dc1-4819-be04-2ff58de6164f" disabled="true"><con:settings/><con:config><script>import java.text.SimpleDateFormat;
import java.util.Date;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.text.DateFormat;
import java.util.TimeZone;
import java.util.concurrent.TimeUnit;
import java.lang.Long
def createdOnDate = context.expand( '${#TestCase#requestedTime}' )
def completedDate = context.expand( '${#TestCase#ChangeDate}' )

//log.info createdOnDate
//log.info completedDate

//String string = createdOnDate;
//String string1 = completedDate;

SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ");
SimpleDateFormat output = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS");

//createdOnDate
Date date = sdf.parse(createdOnDate.replaceAll("Z", "+0000"));
String nTime = output.format(date);
myDate = Date.parse("yyyy-MM-dd'T'HH:mm:ss.SSS", nTime) ;
//log.info("string: " + string);
log.info("date: " + nTime);

//completedDate
Date date1 = sdf.parse(completedDate.replaceAll("Z", "+0000"));
log.info("date1: " + date1);

String nTime1 = output.format(date1);
myDate1 = Date.parse("yyyy-MM-dd'T'HH:mm:ss.SSS", nTime1) ;
log.info("myDate1: " + myDate1);
log.info("date: " + nTime1);

DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS");
//get current date time with Date()
Date date2 = new Date();
log.info(dateFormat.format(date2));
//log.info firstDayOfWeekTimestamp
// Get calendar set to current date and time
Calendar c = Calendar.getInstance();
 	    c.set(Calendar.HOUR_OF_DAY, 0);
         c.set(Calendar.MINUTE, 0);
         c.set(Calendar.SECOND, 0);
         c.set(Calendar.MILLISECOND, 0);
         
         log.info c.getTime();


    
t2=(dateFormat.format(c.getTime()))
t3=(dateFormat.parse(t2))
Timeinhours=(myDate1 - t3);
log.info ("Time: " + Timeinhours);


DateDifferentExample(nTime1,t2)





Long DateDifferentExample(String dateStart,String dateStop) {

		//HH converts hour in 24 hours format (0-23), day calculation
		SimpleDateFormat format = new SimpleDateFormat("MM/dd/yyyy HH:mm:ss");

		Date d1 = null;
		Date d2 = null;

		try {
			d1 = format.parse(dateStart);
			d2 = format.parse(dateStop);

			//in milliseconds
			long diff = d2.getTime() - d1.getTime();

			long diffSeconds = diff / 1000 % 60;
			long diffMinutes = diff / (60 * 1000) % 60;
			long diffHours = diff / (60 * 60 * 1000) % 24;
			long diffDays = diff / (24 * 60 * 60 * 1000);

			log.info(diffDays + " days, ");
			log.info(diffHours + " hours, ");
			log.info(diffMinutes + " minutes, ");
			log.info(diffSeconds + " seconds.");

		} catch (Exception e) {
			e.printStackTrace();
		}

	}

</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script" id="e865207c-3334-4d9f-9e04-bb6b9f513dc0" disabled="true"><con:settings/><con:config><script>import java.text.SimpleDateFormat;
import java.util.Date;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.text.DateFormat;
import java.util.TimeZone;
import java.util.concurrent.TimeUnit;
import java.lang.Long

def createdOnDate = context.expand( '${#TestCase#requestedTime}' )
def completedDate = context.expand( '${#TestCase#ChangeDate}' )


SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ");
SimpleDateFormat output = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS");

//createdOnDate
Date date = sdf.parse(createdOnDate.replaceAll("Z", "+0000"));

//completedDate
Date date1 = sdf.parse(completedDate.replaceAll("Z", "+0000"));


days(date,date1)


 Long days(Date start, Date end){
    //Ignore argument check

    Calendar c1 = Calendar.getInstance();
    c1.setTime(start);
    int w1 = c1.get(Calendar.DAY_OF_WEEK);
    c1.add(Calendar.DAY_OF_WEEK, -w1);

    Calendar c2 = Calendar.getInstance();
    c2.setTime(end);
    int w2 = c2.get(Calendar.DAY_OF_WEEK);
    c2.add(Calendar.DAY_OF_WEEK, -w2);

    //end Saturday to start Saturday 
    long days = (c2.getTimeInMillis()-c1.getTimeInMillis())/(1000*60*60*24);
    long daysWithoutWeekendDays = days-(days*2/7);

    // Adjust days to add on (w2) and days to subtract (w1) so that Saturday
    // and Sunday are not included
    if (w1 == Calendar.SUNDAY &amp;&amp; w2 != Calendar.SATURDAY) {
        w1 = Calendar.MONDAY;
    } else if (w1 == Calendar.SATURDAY &amp;&amp; w2 != Calendar.SUNDAY) {
        w1 = Calendar.FRIDAY;
    } 

    if (w2 == Calendar.SUNDAY) {
        w2 = Calendar.MONDAY;
    } else if (w2 == Calendar.SATURDAY) {
        w2 = Calendar.FRIDAY;
    }
   log.info("days: " + (daysWithoutWeekendDays-w1+w2));
    //return daysWithoutWeekendDays-w1+w2;
}</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script 6" id="c0f2c83b-9fc3-41bc-b6e8-838a18e170d5" disabled="true"><con:settings/><con:config><script>Random random = new Random();
      

     String randomInteger = random.nextInt().toString();
      log.info("SoNumber: " + randomInteger);
 </script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script-FormatRequestedDate" id="0d416b7c-a6c8-4fde-b9d4-3de7b2217643"><con:settings/><con:config><script>import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.text.DateFormat;
import java.util.Date;
import java.util.TimeZone;


def requestedTime = context.expand( '${#TestCase#requestedTime}' )
log.info requestedTime

String string = requestedTime;
String defaultTimezone = TimeZone.getDefault().getID();
SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ");
SimpleDateFormat output = new SimpleDateFormat("yyyy-MM-dd");
//Date d = sdf.parse(time);

Date date = sdf.parse(string.replaceAll("Z", "+0000"));
String nTime = output.format(date);
log.info("string: " + string);
log.info("date: " + date);
log.info("nTime: " + nTime);
testRunner.testCase.setPropertyValue( "FormatedRequestedDate", nTime.toString());</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script- FormatChangeDate" id="0cc48f40-ed5d-4d4f-8149-4241a10ec146"><con:settings/><con:config><script>import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.text.DateFormat;
import java.util.Date;
import java.util.TimeZone;
def changeDate = context.expand( '${#TestCase#ChangeDate}' )

String string = changeDate;
//String defaultTimezone = TimeZone.getDefault().getID();
SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ");
SimpleDateFormat output = new SimpleDateFormat("yyyy-MM-dd");
//Date d = sdf.parse(time);

Date date = sdf.parse(string.replaceAll("Z", "+0000"));
String nTime = output.format(date);
log.info("string: " + string);
log.info("date: " + date);
log.info("nTime: " + nTime);
testRunner.testCase.setPropertyValue( "FormatedChangeDate", nTime.toString());</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script 52" id="ab7515cf-65fd-4b93-a34a-5d5346f7fbcb"><con:settings/><con:config><script>import java.text.SimpleDateFormat;
import java.util.Date;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.text.DateFormat;
import java.util.TimeZone;
import java.util.concurrent.TimeUnit;

def changeDate = context.expand( '${#TestCase#ChangeDate}' )
def requestedTime = context.expand( '${#TestCase#requestedTime}' )
log.info requestedTime
log.info changeDate

SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ");
SimpleDateFormat output = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS");

//requested Date
Date date = sdf.parse(requestedTime.replaceAll("Z", "+0000"));
String nTime = output.format(date);
myDate = Date.parse("yyyy-MM-dd'T'HH:mm:ss.SSS", nTime) ;
//log.info("string: " + string);
log.info("date: " + nTime);

//change Date
Date date1 = sdf.parse(changeDate.replaceAll("Z", "+0000"));
log.info("date1: " + date1);

String nTime1 = output.format(date1);
myDate1 = Date.parse("yyyy-MM-dd'T'HH:mm:ss.SSS", nTime1) ;
log.info("myDate1: " + myDate1);
log.info("date1: " + nTime1);

getTimeDiff(date,date1)

def getTimeDiff(Date dateOne, Date dateTwo) {
            String diff = "";
            long timeDiff = Math.abs(dateOne.getTime() - dateTwo.getTime());
            log.info ("TimeDiff : " + timeDiff);
            testRunner.testCase.setPropertyValue( "TimeDiffMilliesFromDate", timeDiff.toString())
              return timeDiff;
    }

</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script 51" id="f20257b0-f671-4a62-9637-21bf60d89a3c"><con:settings/><con:config><script><![CDATA[import java.text.SimpleDateFormat;
import java.util.Date;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.text.DateFormat;
import java.util.TimeZone;
import java.util.concurrent.TimeUnit;

def changeDate = context.expand( '${#TestCase#ChangeDate}' )
def requestedTime = context.expand( '${#TestCase#requestedTime}' )
log.info requestedTime
log.info changeDate
def timeDiffMilliesFromDate = context.expand( '${#TestCase#TimeDiffMilliesFromDate}' )


Long timeDiffMilliesFromDate1 = Long.valueOf(timeDiffMilliesFromDate);
//String string = requestedTime;
//String string1 = changeDate;

SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ");
SimpleDateFormat output = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS");


//requested Date
Date date = sdf.parse(requestedTime.replaceAll("Z", "+0000"));
String nTime = output.format(date);
myDate = Date.parse("yyyy-MM-dd'T'HH:mm:ss.SSS", nTime) ;
//log.info("string: " + string);
log.info("date: " + nTime);




//change Date
Date date1 = sdf.parse(changeDate.replaceAll("Z", "+0000"));
log.info("date1: " + date1);

String nTime1 = output.format(date1);
myDate1 = Date.parse("yyyy-MM-dd'T'HH:mm:ss.SSS", nTime1) ;
log.info("myDate1: " + myDate1);
log.info("date1: " + nTime1);

DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS");
//get current date time with Date()
Date date2 = new Date();
log.info("CurrentDate: "+ dateFormat.format(date2));

// Get calendar set to current date and time
Calendar c = Calendar.getInstance();
 	    c.set(Calendar.HOUR_OF_DAY, 0);
         c.set(Calendar.MINUTE, 0);
         c.set(Calendar.SECOND, 0);
         c.set(Calendar.MILLISECOND, 0);
         
         log.info c.getTime();


    
t2=(dateFormat.format(c.getTime()))
t3=(dateFormat.parse(t2))
Timeinhours=(myDate1 - t3);
log.info ("Time: " + Timeinhours);


getTimeDiff(date,date1)

getDurationBreakdown(timeDiffMilliesFromDate1)




def getTimeDiff(Date dateOne, Date dateTwo) {
            String diff = "";
            long timeDiff = Math.abs(dateOne.getTime() - dateTwo.getTime());
            log.info ("TimeDiff : " + timeDiff);
            testRunner.testCase.setPropertyValue( "TimeDiffMilliesFromDate", timeDiff.toString())
              return timeDiff;
    }

def String getDurationBreakdown(long millies)
    {
        if(millies < 0)
        {
            throw new IllegalArgumentException("Duration must be greater than zero!");
        }

        long days = TimeUnit.MILLISECONDS.toDays(millies);
        millies -= TimeUnit.DAYS.toMillis(days);
        long hours = TimeUnit.MILLISECONDS.toHours(millies);
        millies -= TimeUnit.HOURS.toMillis(hours);
        long minutes = TimeUnit.MILLISECONDS.toMinutes(millies);
        millies -= TimeUnit.MINUTES.toMillis(minutes);
        long seconds = TimeUnit.MILLISECONDS.toSeconds(millies);

        StringBuilder sb = new StringBuilder(64);

        sb.append(hours);
        sb.append(" Hours ");
      

        if (minutes==0 && seconds>0){
        	 minutes=minutes+1
        	 sb.append(minutes);
        	 sb.append(" Minutes ");
        	 seconds=0
        	 sb.append(seconds);
           sb.append(" Seconds");
        }
       else if (minutes>0 && seconds>0 && seconds<=30){
       	minutes=minutes-1
	      sb.append(minutes);
        	 sb.append(" Minutes ");
        	 seconds=0
        	 sb.append(seconds);
           sb.append(" Seconds");
        }
        else if (minutes>0 && seconds>30){
        	minutes=minutes+1
        	 sb.append(minutes);
        	 sb.append(" Minutes ");
        	 seconds=0
        	 sb.append(seconds);
           sb.append(" Seconds");
        	}
            
log.info(sb.toString())
       testRunner.testCase.setPropertyValue( "MilliesFromDate", sb.toString());
    }]]></script></con:config></con:testStep><con:testStep type="groovy" name="BusinessDay Calculation" id="f1c67a16-e0a5-4cb9-a636-6ec92e7a3859"><con:settings/><con:config><script><![CDATA[import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.text.DateFormat;
import java.util.Date;
import java.util.TimeZone;
import java.util.*
import org.joda.time.DateTime;

def changeDate = context.expand( '${#TestCase#ChangeDate}' )
def formatedRequestedDate = context.expand( '${#TestCase#FormatedRequestedDate}' )
def formatedChangeDate = context.expand( '${#TestCase#FormatedChangeDate}' )

SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd");
String dateInString = formatedRequestedDate
log.info dateInString
Date date = formatter.parse(dateInString);
log.info(date);
log.info(formatter.format(date));
def projectContext = context.testCase.testSuite.project.context
projectContext.date = date






String dateInString1 = formatedChangeDate		
		
Date date1 = formatter.parse(dateInString1);
log.info(date1);
log.info(formatter.format(date1));

projectContext.date1 = date1

def date3 = projectContext.date1
def date2 = projectContext.date


days(date2,date3)

/*
SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ");
SimpleDateFormat output = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS");
//Date d = sdf.parse(time);



Date Changedate = sdf.parse(changeDate.replaceAll("Z", "+0000"));
String nTime = output.format(Changedate);

DateTime dateTime = new DateTime();
Calendar c = Calendar.getInstance();
	    c.setTime(new Date());
	    c.set(Calendar.HOUR_OF_DAY, 0);
         c.set(Calendar.MINUTE, 0);
         c.set(Calendar.SECOND, 0);
         c.set(Calendar.MILLISECOND, 0);

Date myDate = c.getTime();
log.info ("myDate::" + myDate);

String datediff= (nTime - myDate)
log.info ("datediff::" + datediff)



DateFormat sdf21 = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss"); 
Date date21 = sdf21.parse(datediff);
log.info ("Days :- " +date21.getDay()); 
log.info ("Hours :- " +date21.getHours()); 
log.info ("Min :- " + date21.getMinutes()); 
log.info ("Sec :- " + date21.getSeconds()); 

 StringBuilder sb = new StringBuilder(64);
        sb.append(date21.getHours());
        sb.append(" Hours ");
 if (date21.getMinutes()==0 && seconds>0){
        	 minutes=date21.getMinutes()+1
        	 sb.append(minutes);
        	 sb.append(" Minutes ");
        	 seconds=0
        	 sb.append(seconds);
           sb.append(" Seconds");
        }
       else if (date21.getMinutes()>0 && date21.getSeconds()>0 && date21.getSeconds()<=30){
	      sb.append(date21.getMinutes());
        	 sb.append(" Minutes ");
        	 seconds=0
        	 sb.append(seconds);
           sb.append(" Seconds");
        }
        else if (date21.getMinutes()>0 && date21.getSeconds()>30){
        	minutes=date21.getMinutes()+1
        	 sb.append(minutes);
        	 sb.append(" Minutes ");
        	 seconds=0
        	 sb.append(seconds);
           sb.append(" Seconds");
        	}

log.info("DateDiffAfterCal :- " +sb.toString())
testRunner.testCase.setPropertyValue( "DateDiffAfterCal", sb.toString());

*/




//Business Days Calculation

 long days(Date start, Date end){
    //Ignore argument check

    Calendar c1 = Calendar.getInstance();
    c1.setTime(start);
    int w1 = c1.get(Calendar.DAY_OF_WEEK);
    c1.add(Calendar.DAY_OF_WEEK, -w1);

    Calendar c2 = Calendar.getInstance();
    c2.setTime(end);
    int w2 = c2.get(Calendar.DAY_OF_WEEK);
    c2.add(Calendar.DAY_OF_WEEK, -w2);

    //end Saturday to start Saturday 
    long days = (c2.getTimeInMillis()-c1.getTimeInMillis())/(1000*60*60*24);
    long daysWithoutWeekendDays = days-(days*2/7);

    // Adjust days to add on (w2) and days to subtract (w1) so that Saturday
    // and Sunday are not included
    if (w1 == Calendar.SUNDAY && w2 != Calendar.SATURDAY) {
        w1 = Calendar.MONDAY;
    } else if (w1 == Calendar.SATURDAY && w2 != Calendar.SUNDAY) {
        w1 = Calendar.FRIDAY;
    } 

    if (w2 == Calendar.SUNDAY) {
        w2 = Calendar.MONDAY;
    } else if (w2 == Calendar.SATURDAY) {
        w2 = Calendar.FRIDAY;
    }
    testRunner.testCase.setPropertyValue( "BusinessDays", (daysWithoutWeekendDays-w1+w2-1).toString());
    return daysWithoutWeekendDays-w1+w2-1;
}
]]></script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script-TAT Calculations1" id="a876486e-efae-4712-b461-c9af7e781ec8"><con:settings/><con:config><script><![CDATA[import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.TimeZone;
import java.util.concurrent.TimeUnit;
def quoteID = context.expand( '${#TestCase#QuoteID}' )
def timeZone = context.expand( '${#TestCase#TimeZone}' )
def requestedTime = context.expand( '${#TestCase#requestedTime}' )
def changeDate = context.expand( '${#TestCase#ChangeDate}' )
def timeGap = context.expand( '${#TestCase#TimeGap}' )
//def long millies =timeGap.toLong()
def turnaroundTime = context.expand( '${#TestCase#TurnaroundTime}' )
def tatNet = context.expand( '${#TestCase#TatNet}' )
def tatTotal = context.expand( '${#TestCase#TatTotal}' )
def long minutes1 = tatTotal.toLong()
def long tatTotalmillies = minutes1 * 60 * 1000;
def long tatNetmillies = minutes1 * 60 * 1000;
def businessDays = context.expand( '${#TestCase#BusinessDays}' )
def dateDiffAfterCal = context.expand( '${#TestCase#DateDiffAfterCal}' )
def milliesFromDate = context.expand( '${#TestCase#MilliesFromDate}' )


def FinalTATCal = businessDays + " Days " + milliesFromDate
log.info (" FinalTATCal: " + FinalTATCal)
testRunner.testCase.setPropertyValue( "FinalTATCal", FinalTATCal.toString());

//getWorkingDaysBetweenTwoDates( requestedTime,endDate)

//getDurationBreakdown(millies)

getDurationBreakdownMinutes(tatTotalmillies)
getDurationBreakdownMinutes1(tatNetmillies)


def String getDurationBreakdown(long millies)
    {
        if(millies < 0)
        {
            throw new IllegalArgumentException("Duration must be greater than zero!");
        }

        long days = TimeUnit.MILLISECONDS.toDays(millies);
        millies -= TimeUnit.DAYS.toMillis(days);
        long hours = TimeUnit.MILLISECONDS.toHours(millies);
        millies -= TimeUnit.HOURS.toMillis(hours);
        long minutes = TimeUnit.MILLISECONDS.toMinutes(millies);
        millies -= TimeUnit.MINUTES.toMillis(minutes);
        long seconds = TimeUnit.MILLISECONDS.toSeconds(millies);

        StringBuilder sb = new StringBuilder(64);
   	   sb.append(days);
        sb.append(" Days ");
        sb.append(hours);
        sb.append(" Hours ");
      

        if (minutes==0 && seconds>0){
        	 minutes=minutes+1
        	 sb.append(minutes);
        	 sb.append(" Minutes ");
        	 seconds=0
        	 sb.append(seconds);
           sb.append(" Seconds");
        }
       else if (minutes>0 && seconds>0 && seconds<=30){
	      sb.append(minutes);
        	 sb.append(" Minutes ");
        	 seconds=0
        	 sb.append(seconds);
           sb.append(" Seconds");
        }
        else if (minutes>0 && seconds>30){
        	minutes=minutes+1
        	 sb.append(minutes);
        	 sb.append(" Minutes ");
        	 seconds=0
        	 sb.append(seconds);
           sb.append(" Seconds");
        	}
              
log.info(sb.toString())
       testRunner.testCase.setPropertyValue( "TatfromRestTimegap", sb.toString());
    }

def String getDurationBreakdownMinutes(long tatTotalmillies)
    {
        if(tatTotalmillies < 0)
        {
            throw new IllegalArgumentException("Duration must be greater than zero!");
        }

        long days = TimeUnit.MILLISECONDS.toDays(tatTotalmillies);
        tatTotalmillies -= TimeUnit.DAYS.toMillis(days);
        long hours = TimeUnit.MILLISECONDS.toHours(tatTotalmillies);
        tatTotalmillies -= TimeUnit.HOURS.toMillis(hours);
        long minutes = TimeUnit.MILLISECONDS.toMinutes(tatTotalmillies);
        tatTotalmillies -= TimeUnit.MINUTES.toMillis(minutes);
        long seconds = TimeUnit.MILLISECONDS.toSeconds(tatTotalmillies);

        StringBuilder sb = new StringBuilder(64);
        sb.append(days);
        sb.append(" Days ");
        sb.append(hours);
        sb.append(" Hours ");
        sb.append(minutes);
        sb.append(" Minutes "); 
        sb.append(seconds);
        sb.append(" Seconds");
        
        log.info(sb.toString())
        testRunner.testCase.setPropertyValue( "TatfromTatTotal", sb.toString());
    }

def String getDurationBreakdownMinutes1(long tatNetmillies)
    {
        if(tatNetmillies < 0)
        {
            throw new IllegalArgumentException("Duration must be greater than zero!");
        }

        long days = TimeUnit.MILLISECONDS.toDays(tatNetmillies);
        tatNetmillies -= TimeUnit.DAYS.toMillis(days);
        long hours = TimeUnit.MILLISECONDS.toHours(tatNetmillies);
        tatNetmillies -= TimeUnit.HOURS.toMillis(hours);
        long minutes = TimeUnit.MILLISECONDS.toMinutes(tatNetmillies);
        tatNetmillies -= TimeUnit.MINUTES.toMillis(minutes);
        long seconds = TimeUnit.MILLISECONDS.toSeconds(tatNetmillies);

        StringBuilder sb = new StringBuilder(64);
        sb.append(days);
        sb.append(" Days ");
        sb.append(hours);
        sb.append(" Hours ");
        sb.append(minutes);
        sb.append(" Minutes "); 
        sb.append(seconds);
        sb.append(" Seconds");
        
        log.info(sb.toString())
        testRunner.testCase.setPropertyValue( "tatNetmillies", sb.toString());
    }


    ]]></script></con:config></con:testStep><con:testStep type="groovy" name="Assertion For TatTotal and TatNet1" id="aec6988f-a855-4817-a680-f4c64a0bb4f8"><con:settings/><con:config><script>def tatfromTatTotal = context.expand( '${#TestCase#TatfromTatTotal}' )
def tatfromRestTimegap = context.expand( '${#TestCase#TatfromRestTimegap}' )
def tatNetmillies = context.expand( '${#TestCase#tatNetmillies}' )
def finalTATCal = context.expand( '${#TestCase#FinalTATCal}' )




assert tatfromTatTotal==finalTATCal
assert tatNetmillies==finalTATCal</script></con:config></con:testStep><con:testStep type="delay" name="Delay 3" id="42a9ca79-3eb9-4813-92b2-ca5d93c946ff"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:properties><con:property><con:name>ChangeDate</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2016-06-03T05:58:58.787Z</con:value></con:property><con:property><con:name>requestedTime</con:name><con:value>2016-06-02T06:57:23.957Z</con:value></con:property><con:property><con:name>BookingDisplayName</con:name><con:value>B-APOS-NIVAROX-FAR SA_CH531419-CLIENT-FY17Q1-2-V1</con:value></con:property><con:property><con:name>BookingID</con:name><con:value>574fd8d2e4b04d437bee9204</con:value></con:property><con:property><con:name>TatfromTatTotal</con:name><con:value>0 Days 23 Hours 2 Minutes 0 Seconds</con:value></con:property><con:property><con:name>TatNet</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1382</con:value></con:property><con:property><con:name>tatNetmillies</con:name><con:value>0 Days 23 Hours 2 Minutes 0 Seconds</con:value></con:property><con:property><con:name>TatTotal</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1382</con:value></con:property><con:property><con:name>Timediff</con:name><con:value>9 days, 2 hours, 2 minutes, 47.355 seconds</con:value></con:property><con:property><con:name>TimediffAfterCal</con:name><con:value>9 Days 2 Hours 3 Minutes 0 Seconds</con:value></con:property><con:property><con:name>TimeGap</con:name><con:value/></con:property><con:property><con:name>TimeZone</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>LineItemAmount</con:name><con:value>122</con:value></con:property><con:property><con:name>SOAmount</con:name><con:value>122</con:value></con:property><con:property><con:name>PaAmount</con:name><con:value>122</con:value></con:property><con:property><con:name>PaCurrencyName</con:name><con:value>usd</con:value></con:property><con:property><con:name>PaCurrencyDisplayName</con:name><con:value>USD</con:value></con:property><con:property><con:name>currentDate</con:name><con:value>2016-05-19T15:13:59.469Z</con:value></con:property><con:property><con:name>BookingCount</con:name><con:value>3</con:value></con:property><con:property><con:name>FormatedRequestedDate</con:name><con:value>2016-06-02</con:value></con:property><con:property><con:name>FormatedChangeDate</con:name><con:value>2016-06-03</con:value></con:property><con:property><con:name>TimeDiffMilliesFromDate</con:name><con:value>82894830</con:value></con:property><con:property><con:name>MilliesFromDate</con:name><con:value>23 Hours 2 Minutes 0 Seconds</con:value></con:property><con:property><con:name>BusinessDays</con:name><con:value>0</con:value></con:property><con:property><con:name>FinalTATCal</con:name><con:value>0 Days 23 Hours 2 Minutes 0 Seconds</con:value></con:property><con:property><con:name>CreatedOnDate</con:name><con:value>2016-05-24T00:00:00.000Z</con:value></con:property><con:property><con:name>OppID</con:name><con:value>56705aeee4b074a913da7861</con:value></con:property><con:property><con:name>rate</con:name><con:value>0.6749</con:value></con:property><con:property><con:name>BookingIDs</con:name><con:value>[574fd8d2e4b04d437bee9204, 574fdbe0e4b0d1e2a919f7a4]</con:value></con:property><con:property><con:name>i</con:name><con:value>1</con:value></con:property><con:property><con:name>flag</con:name><con:value>true</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>6bda5a34-450f-427a-af64-6c06a948395d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c7cd9b4b-e847-484c-aef7-6b7380700d73</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f24e4578-6c82-46aa-963a-5be8c0cac063</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>ef6b8989-f85b-439f-b50a-064ecf6480d4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>08492c3e-1c05-4fb7-ac4f-4644aa99fe2d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>cd7dda61-054f-4b73-8ef1-a81f73dcfb35</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>34f3dc72-65dc-4452-98c0-80d30fcc8a99</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>af1e3118-92db-4292-a3a8-d46858c7e2a4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>72ab2170-83ea-44a7-bf57-9bf834b5cea8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>839f97e6-dc3c-4439-9ab6-dca896301400</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d5324741-f6c2-4fb5-823c-44d9919d4d60</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>1cad318f-6582-4a05-b57e-06db5ca349d4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>3e2a5986-441e-4ce6-9444-ca75f22b31be</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>dd698a1e-a85b-4a85-8a9a-0fb4439bc7d0</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>ab7515cf-65fd-4b93-a34a-5d5346f7fbcb</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>94e7c3fb-e9d7-40d3-9f3b-6ad18779398b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d55002b1-04d0-4afa-ad50-a93aec32c62d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>99475280-ebaa-42e2-8501-5370cfbc574a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>06292811-a34e-4f19-a50e-1cd1f5cf80b4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>765fd2ac-a301-41a9-ba84-64d81532e8a9</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a456b592-e36a-42ca-b00a-08cd1eb05d8e</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>1d0d1aff-788c-4763-ab1a-67ebeee6d69f</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>da9cdd96-5fca-433f-baa5-e3f6dbec676c</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c795f1f3-5216-4c33-a35a-da95c566b251</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>1f081106-6f56-43aa-924b-6e3c78728166</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase id="182554d7-97cf-4c8e-b1e8-585cb6665ac7" discardOkResults="true" failOnError="true" failTestCaseOnErrors="true" keepSession="false" name="Quotes-Completed-Requested during weekday, Completed during weekday; (BUT there is one or more weekends in between Request and Completion)" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="Find Cookie" id="42ac7cac-733b-4fc8-a1df-5ae7861adc7b" disabled="true"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>73aca830-7e01-4286-ab3b-cac4c2c3e8ab</con:targetTestCase><con:properties><con:property><con:name>qaDevCookies</con:name><con:value>[avalon.sid=s%3A54cb1cf0e4b004ec636c4d71.OKyf7Hynz6NWePZzjLl5L9azOOkbtfD5ExcpJE%2FUL48</con:value></con:property></con:properties><con:returnProperties><con:entry>qaDevCookies</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="calltestcase" name="fetch salesRep-SellingPeriod" id="eae831b7-6f90-4592-975b-9728236cc09c"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>26ebacc5-4fed-4ce3-9eb3-6e4f6e53ecc4</con:targetTestCase><con:properties><con:property><con:name>server</con:name><con:value>pe</con:value></con:property><con:property><con:name>oppid</con:name><con:value>567ac039e4b02746682c7267</con:value></con:property><con:property><con:name>oppname</con:name><con:value>APOS-Balfour Beatty Utilities Limited_GB2486429-ENTERPRISE-FY17Q2-2</con:value></con:property></con:properties><con:returnProperties><con:entry>server</con:entry><con:entry>oppid</con:entry><con:entry>oppname</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script -CreatedOnDate" id="872c68e3-9e2b-40dd-95da-12edd3ebd014"><con:settings/><con:config><script>import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.text.DateFormat;
import java.util.Date;
import java.util.TimeZone;
import java.util.*
import org.joda.time.DateTime;

DateTime dateTime = new DateTime();
long firstDayOfWeekTimestamp = dateTime.withDayOfWeek(1).getMillis();
log.info firstDayOfWeekTimestamp
// Get calendar set to current date and time
Calendar c = Calendar.getInstance();
	    c.setTime(new Date());
	    c.set(Calendar.HOUR_OF_DAY, 0);
         c.set(Calendar.MINUTE, 0);
         c.set(Calendar.SECOND, 0);
         c.set(Calendar.MILLISECOND, 0);
        
       
// Set the calendar to MONDAY of the current week
c.set(Calendar.DAY_OF_WEEK, Calendar.MONDAY); 



// substract 7 days
// If we give 7 there it will give 8 days back
c.set(Calendar.DAY_OF_MONTH, c.get(Calendar.DAY_OF_MONTH)-20);

// convert to date
Date myDate = c.getTime();

// Print dates of the current week starting on SUNDAY
DateFormat df = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ");
for (int i = 0; i &lt; 1; i++) {
    log.info(df.format(c.getTime()));
 DateFormat df1 = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS");
 log.info(df1.format(c.getTime()));
    //c.add(Calendar.DATE, 1);
    testRunner.testCase.setPropertyValue( "CreatedOnDate", (df1.format(c.getTime()).toString()+"Z"));
}</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script-FIndQuotesRequest" id="4b4e7ecc-4f4a-4b2b-b05f-0febfcbc8763"><con:settings/><con:config><script>import groovy.json.*
def serverName = context.expand( '${#TestSuite#serverName}' )
def tenant = context.expand( '${#TestSuite#tenant}' )
def createdOnDate = context.expand( '${#TestCase#CreatedOnDate}' )

if (tenant=="dell" &amp;&amp; serverName =="pe-internal.dev")
{

                def jsonText='''{"filter":{"flows.quoteStages.state.name":"requested","flows.quoteStages.transitions":{"$elemMatch":{"changeDate":{"$gte":"${#TestCase#CreatedOnDate}"},"toState":"requested"}},"isBase":false,"isDraft":false},"params":{"sort":{"systemProperties.createdOn":1},"start":0,"limit":50,"columns":["_id","type","systemProperties","displayName","requestReason","flows.quoteStages.state","flows.quoteStages.target","relationships.requestedBy","relationships.assignee","expirationDate","flows.quoteStages.transitions","dueDate","amount.normalizedAmount","relationships.customer","tags","flows.quoteStages.transitions","flows.quoteStages.transitions"]},"origin":{"component":"AvalonGridDuplo"},"inversesummary":false}'''
}
else
{
                def jsonText='''{"filter":{"flows.quoteStages.state.name":"requested","systemProperties.createdOn":{"$gt":"${#TestCase#CreatedOnDate}"},"isBase":false,"isDraft":false},"params":{"sort":{"dueDate":1},"start":0,"limit":50,"columns":["_id","type","systemProperties","displayName","requestReason","flows.quoteStages.state","flows.quoteStages.target","relationships.requestedBy","relationships.assignee","expirationDate","flows.quoteStages.transitions","dueDate","amount.normalizedAmount","relationships.customer","tags","flows.quoteStages.transitions","flows.quoteStages.transitions"]},"origin":{},"inversesummary":false}'''
}




//{"filter":{"flows.quoteStages.state.name":"requested","systemProperties.createdOn":{"$gt":"${#TestCase#CreatedOnDate}"},"isBase":false,"isDraft":false},"params":{"sort":{"systemProperties.createdOn":1},"start":0,"limit":50,"columns":["_id","type","systemProperties","displayName","requestReason","flows.quoteStages.state","flows.quoteStages.target","relationships.requestedBy","relationships.assignee","expirationDate","flows.quoteStages.transitions","dueDate","amount.normalizedAmount","relationships.customer","tags","flows.quoteStages.transitions","flows.quoteStages.transitions"]},"origin":{"component":"AvalonGridDuplo","url":"#tab/app.quotes/vq=STATUS%3A%20%22Requested%22%20CREATED-ON%3A%20%22%3E04-14-2016%22"},"inversesummary":false}</script></con:config></con:testStep><con:testStep type="restrequest" name="FindQuotes" id="7139c84a-23d3-4e16-a9dc-96bbcb8e6f8c"><con:settings/><con:config service="FindQuotes" resourcePath="/rest/api/dell/app.quotes::find" methodName="App.quotes::find" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="FindQuotes" id="0303b810-05fa-4e34-9420-745dad712ec3" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Cookie" value="${#TestSuite#Cookie}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://${#TestSuite#serverName}.ssi-cloud.com</con:endpoint><con:request>{"filter":{"tags":{"$nin":[{"$regex":"^TAT_TEST"},{"$regex":"^Functional_QA"}]},"flows.quoteStages.state.name":"requested","systemProperties.createdOn":{"$gte":"${#TestCase#CreatedOnDate}"},"isBase":false,"isDraft":false},"params":{"sort":{"systemProperties.createdOn":1},"start":0,"limit":150,"columns":["_id","type","systemProperties","displayName","requestReason","flows.quoteStages.state","flows.quoteStages.target","relationships.requestedBy","relationships.assignee","expirationDate","flows.quoteStages.transitions","dueDate","amount.normalizedAmount","relationships.customer","tags","flows.quoteStages.transitions","flows.quoteStages.transitions"]},"origin":{"component":"AvalonGridDuplo"},"inversesummary":false}</con:request><con:originalUri>https://qa-internal.dev.ssi-cloud.com/rest/api/dell/app.quotes::find</con:originalUri><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="Property Transfer-QuoteCount" id="10b7671e-4603-48a1-b2ab-e8581543104b"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>QuoteCount</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>FindQuotes</con:sourceStep><con:sourcePath>declare namespace ns1='https://qa-internal.dev.ssi-cloud.com/rest/api/dell/app.quotes::find';
//ns1:Response[1]/ns1:recordCount[1]/ns1:app.quote[1]</con:sourcePath><con:targetType>QuoteCount</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:targetPath/><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="QuoteID" id="693a596b-d976-44cb-8ce2-8220710ab521"><con:settings/><con:config><script>import groovy.json.JsonSlurper
import com.eviware.soapui.support.XmlHolder
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
def holder = groovyUtils.getXmlHolder(testRunner.testCase.testSteps["FindQuotes"].testRequest.response.getContentAsXml());
def quoteCount = context.expand( '${#TestCase#QuoteCount}' )

log.info quoteCount


def QuoteIDs=[]

                def i=1
                def j=1
                for(node in holder["//ns1:Response[1]/ns1:data[1]/ns1:app.quote[1]/ns1:e[${i}]"])
                {              

               rate = holder.getNodeValue("ns1:Response[1]/ns1:data[1]/ns1:app.quote[1]/ns1:e[${i}]/ns1:amount[1]/ns1:normalizedAmount[1]/ns1:rate[1]")   
               //affinityOrg= holder.getNodeValue("ns1:Response[1]/ns1:data[1]/ns1:app.quote[1]/ns1:e[${i}]/ns1:relationships[1]/ns1:e[2]/ns1:target[1]/ns1:relationships[1]/ns1:affinityOrganization[1]/ns1:targets[1]/ns1:e[1]/ns1:extensions[1]/ns1:tenant[1]/ns1:l0AffinityId[1]/ns1:value[1]")
          
              log.info rate
              //log.info affinityOrg
              if(rate!=null){
              //	 if(rate!=null&amp;&amp; affinityOrg != null){
              	
          
                                id = holder.getNodeValue("ns1:Response[1]/ns1:data[1]/ns1:app.quote[1]/ns1:e[1]/ns1:_id[1]" )
                                QuoteIDs.add(id)                              
                                i=i+1
                                log.info i
                                if(i==quoteCount.toInteger())
                                break;
                }}
testRunner.testCase.setPropertyValue( "rate", rate.toString() ) 
testRunner.testCase.setPropertyValue( "QuoteIDs", QuoteIDs.toString())
testRunner.testCase.setPropertyValue( "quoteCount", i.toString())
log.info QuoteIDs.toString()
def count=0
testRunner.testCase.setPropertyValue( "i", count.toString() )
def flag=false
testRunner.testCase.setPropertyValue( "flag",flag.toString())

</script></con:config></con:testStep><con:testStep type="groovy" name="Counter" id="05503d7d-cc78-46e8-9155-809ee44ca432"><con:settings/><con:config><script>def i = context.expand( '${#TestCase#i}' )
log.info i

def quoteID = context.expand( '${#TestCase#QuoteIDs#$[${#TestCase#i}]}' )
log.info quoteID
testRunner.testCase.setPropertyValue( "quoteID", quoteID.toString() )
</script></con:config></con:testStep><con:testStep type="restrequest" name="QuoteDetails" id="4732fbfc-2ac6-4378-9541-fda5205029fe"><con:settings/><con:config service="QuoteDetails" resourcePath="/rest/api/dell/app.quotes::find" methodName="App.quotes::find" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="QuoteDetails" id="73cce1c1-ad05-4f68-83e5-e387a9e63e66" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Cookie" value="${#TestSuite#Cookie}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://${#TestSuite#serverName}.ssi-cloud.com</con:endpoint><con:request>{"inversesummary":true,"extinversesummary":true,"filter":{"_id":"${#TestCase#QuoteID}"},"params":{"start":0,"limit":1},"origin":{"component":"AvalonCollection","url":"#tab/app.quotes/vq=STATUS%3A%20%22Requested%22%20CREATED-ON%3A%20%22%3E04-14-2016%22"}}</con:request><con:originalUri>https://qa-internal.dev.ssi-cloud.com/rest/api/dell/app.quotes::find</con:originalUri><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters>
  <con:entry key="inversesummary" value="true"/>
  <con:entry key="extinversesummary" value="true"/>
</con:parameters><con:parameterOrder><con:entry>inversesummary</con:entry><con:entry>extinversesummary</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="Property Transfer-TimeZone" id="8764318a-63cb-47da-a5d0-31195f054f5e"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TimeZone</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>QuoteDetails</con:sourceStep><con:sourcePath>declare namespace ns1='https://qa-internal.dev.ssi-cloud.com/rest/api/dell/app.quotes::find';
//ns1:Response[1]/ns1:data[1]/ns1:app.quote[1]/ns1:e[1]/ns1:extensions[1]/ns1:master[1]/ns1:requestedTimeZone[1]/ns1:value[1]/ns1:displayName[1]</con:sourcePath><con:targetType>TimeZone</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:targetPath/><con:type>XPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TimeZoneKey</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>QuoteDetails</con:sourceStep><con:sourcePath>declare namespace ns1='https://qa-internal.dev.ssi-cloud.com/rest/api/dell/app.quotes::find';
//ns1:Response[1]/ns1:data[1]/ns1:app.quote[1]/ns1:e[1]/ns1:extensions[1]/ns1:master[1]/ns1:requestedTimeZone[1]/ns1:value[1]/ns1:key[1]</con:sourcePath><con:targetType>TimeZoneKey</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>amount1</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>QuoteDetails</con:sourceStep><con:sourcePath>declare namespace ns1='https://qa-internal.dev.ssi-cloud.com/rest/api/dell/app.quotes::find';
//ns1:Response[1]/ns1:data[1]/ns1:app.quote[1]/ns1:e[1]/ns1:amount[1]/ns1:amount[1]</con:sourcePath><con:targetType>amount</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>corelookupKey</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>QuoteDetails</con:sourceStep><con:sourcePath>declare namespace ns1='https://qa-internal.dev.ssi-cloud.com/rest/api/dell/app.quotes::find';
//ns1:Response[1]/ns1:data[1]/ns1:app.quote[1]/ns1:e[1]/ns1:amount[1]/ns1:code[1]/ns1:key[1]</con:sourcePath><con:targetType>coreLookUpKey</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>coreLookUpKEY2</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>QuoteDetails</con:sourceStep><con:sourcePath>declare namespace ns1='https://qa-internal.dev.ssi-cloud.com/rest/api/dell/app.quotes::find';
//ns1:Response[1]/ns1:data[1]/ns1:app.quote[1]/ns1:e[1]/ns1:amount[1]/ns1:normalizedAmount[1]/ns1:code[1]/ns1:key[1]</con:sourcePath><con:targetType>coreLookUpKEY2</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>currencyName1</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>QuoteDetails</con:sourceStep><con:sourcePath>declare namespace ns1='https://qa-internal.dev.ssi-cloud.com/rest/api/dell/app.quotes::find';
//ns1:Response[1]/ns1:data[1]/ns1:app.quote[1]/ns1:e[1]/ns1:amount[1]/ns1:code[1]/ns1:name[1]</con:sourcePath><con:targetType>currencyName1</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false"><con:name>currencyDisplayName1</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>QuoteDetails</con:sourceStep><con:sourcePath>declare namespace ns1='https://qa-internal.dev.ssi-cloud.com/rest/api/dell/app.quotes::find';
//ns1:Response[1]/ns1:data[1]/ns1:app.quote[1]/ns1:e[1]/ns1:amount[1]/ns1:code[1]/ns1:displayName[1]</con:sourcePath><con:targetType>currencyDisplayName1</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:targetPath xsi:nil="true"/><con:type>XPATH</con:type><con:targetTransferType>XPATH</con:targetTransferType><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false"><con:name>currencyDisplayName2</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>QuoteDetails</con:sourceStep><con:sourcePath>declare namespace ns1='https://qa-internal.dev.ssi-cloud.com/rest/api/dell/app.quotes::find';
//ns1:Response[1]/ns1:data[1]/ns1:app.quote[1]/ns1:e[1]/ns1:amount[1]/ns1:normalizedAmount[1]/ns1:code[1]/ns1:displayName[1]</con:sourcePath><con:targetType>currencyDisplayName2</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:targetPath xsi:nil="true"/><con:type>XPATH</con:type><con:targetTransferType>XPATH</con:targetTransferType><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>CurrencyName2</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>QuoteDetails</con:sourceStep><con:sourcePath>declare namespace ns1='https://qa-internal.dev.ssi-cloud.com/rest/api/dell/app.quotes::find';
//ns1:Response[1]/ns1:data[1]/ns1:app.quote[1]/ns1:e[1]/ns1:amount[1]/ns1:normalizedAmount[1]/ns1:code[1]/ns1:name[1]</con:sourcePath><con:targetType>currencyName2</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>amount2</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>QuoteDetails</con:sourceStep><con:sourcePath>declare namespace ns1='https://qa-internal.dev.ssi-cloud.com/rest/api/dell/app.quotes::find';
//ns1:Response[1]/ns1:data[1]/ns1:app.quote[1]/ns1:e[1]/ns1:amount[1]/ns1:normalizedAmount[1]/ns1:amount[1]</con:sourcePath><con:targetType>amount2</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="Counter++" id="3328f2ff-1698-41b1-954d-d6d4fd1196f3"><con:settings/><con:config><script>import groovy.json.JsonSlurper
import com.eviware.soapui.support.XmlHolder
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
def holder = groovyUtils.getXmlHolder(testRunner.testCase.testSteps["QuoteDetails"].testRequest.response.getContentAsXml());
def flag = context.expand( '${#TestCase#flag}' )                                
//def timeZone = context.expand( '${#TestCase#TimeZone}' )




                          timeZone=holder.getNodeValue("//ns1:Response[1]/ns1:data[1]/ns1:app.quote[1]/ns1:e[1]/ns1:extensions[1]/ns1:master[1]/ns1:requestedTimeZone[1]/ns1:value[1]/ns1:displayName[1]")
                          isrevised=holder.getNodeValue("//ns1:Response[1]/ns1:data[1]/ns1:app.quote[1]/ns1:e[1]/ns1:isRevised[1]")
                          
                                
                                log.info ("Timezone: " + timeZone)
                                log.info isrevised
                        
                                if(isrevised==null &amp;&amp; timeZone != null )
                                {
                            
                                flag==true
                                testRunner.testCase.setPropertyValue( "flag","true")                   
                                }
                                else
                                {
                                	testRunner.testCase.setPropertyValue( "flag","false")   
                                }
                                log.info flag
               
def i = context.expand( '${#TestCase#i}' )
log.info i
def c = i.toInteger()+1
testRunner.testCase.setPropertyValue( "i", c.toString() )
</script></con:config></con:testStep><con:testStep type="groovy" name="Counter Check" id="b0aaf993-c41a-4388-9ab4-d6f42a4defee"><con:settings/><con:config><script>def i = context.expand( '${#TestCase#i}' )
def quoteCount = context.expand( '${#TestCase#QuoteCount}' )
def flag = context.expand( '${#TestCase#flag}' )
log.info i
log.info quoteCount
log.info flag
if((i.toInteger()&lt;quoteCount.toInteger())&amp;&amp; (flag=="false"))
{
   testRunner.gotoStepByName( "Counter" )
}
else if ((i.toInteger()==quoteCount.toInteger())&amp;&amp; (flag=="false"))
{
	testRunner.gotoStepByName( "Delay 3" );
	log.info ("Test Case Fail : DATA NOT FOUND")
	def DATA_NOT_FOUND="DATA NOT FOUND"
	return DATA_NOT_FOUND
	
    
}
else 
{
    testRunner.gotoStepByName( "Delay 2" )
}</script></con:config></con:testStep><con:testStep type="delay" name="Delay 2" id="316e5fa2-37e9-451c-a491-6ffd530944fa"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:testStep type="restrequest" name="REST Request-test" id="d76f5ec5-89ed-4d24-983e-4244914defbb" disabled="true"><con:settings/><con:config service="FindQuotes" resourcePath="/rest/api/dell/app.quotes::find" methodName="App.quotes::find" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="REST Request-test" id="0303b810-05fa-4e34-9420-745dad712ec3" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Cookie" value="${#TestSuite#Cookie}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://qa-internal.dev.ssi-cloud.com</con:endpoint><con:request>{"filter":{"_id":"54925f8ae4b002d9d76bc9c8","isBase":false,"isDraft":false},"params":{"sort":{"dueDate":1},"start":0,"limit":50,"columns":["_id","type","systemProperties","displayName","requestReason","flows.quoteStages.state","flows.quoteStages.target","relationships.requestedBy","relationships.assignee","expirationDate","flows.quoteStages.transitions","dueDate","amount.normalizedAmount","relationships.customer","tags","flows.quoteStages.transitions","flows.quoteStages.transitions"]},"origin":{"component":"AvalonGridDuplo"},"inversesummary":false}</con:request><con:originalUri>https://qa-internal.dev.ssi-cloud.com/rest/api/dell/app.quotes::find</con:originalUri><con:credentials><con:username>maria.gomez@dell.com</con:username><con:password>passwordone</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script-CheckBadData" id="c6f0b13e-88da-4f1b-a92a-5706093ef083" disabled="true"><con:settings/><con:config><script>//def responseAsXml = context.expand( '${REST Request-test#ResponseAsXml#declare namespace ns1=\'https://qa-internal.dev.ssi-cloud.com/rest/api/dell/app.quotes::find\'; //ns1:Response[1]/ns1:data[1]/ns1:app.quote[1]/ns1:e[1]/ns1:relationships[1]/ns1:e[2]/ns1:target[1]/ns1:relationships[1]/ns1:affinityOrganization[1]}' )
def responseAsXml = context.expand( '${REST Request-test#ResponseAsXml#declare namespace ns1=\'https://qa-internal.dev.ssi-cloud.com/rest/api/dell/app.quotes::find\'; //ns1:Response[1]/ns1:data[1]/ns1:app.quote[1]/ns1:e[1]/ns1:relationships[1]/ns1:e[2]/ns1:target[1]/ns1:relationships[1]/ns1:affinityOrganization[1]/ns1:targets[1]/ns1:e[1]/ns1:extensions[1]/ns1:tenant[1]/ns1:l0AffinityId[1]/ns1:value[1]}' )
def responseAsXml = context.expand( '${REST Request-test#ResponseAsXml#declare namespace ns1=\'https://qa-internal.dev.ssi-cloud.com/rest/api/dell/app.quotes::find\'; //ns1:Response[1]/ns1:data[1]/ns1:app.quote[1]/ns1:e[1]/ns1:relationships[1]/ns1:e[2]/ns1:target[1]/ns1:relationships[1]/ns1:affinityOrganization[1]}' )
</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script-GetQuoteID" id="864e8943-4a7b-4956-b947-074221c5754b" disabled="true"><con:settings/><con:config><script>import groovy.json.JsonSlurper
import com.eviware.soapui.support.XmlHolder
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
def holder = groovyUtils.getXmlHolder(testRunner.testCase.testSteps["FindQuotes"].testRequest.response.getContentAsXml());






                def i=1
                def j=1
                
                for(node in holder["//ns1:Response[1]/ns1:data[1]/ns1:app.quote[1]/ns1:e[${i}]/ns1:_id[1]"])
                {              
          rate = holder.getNodeValue("ns1:Response[1]/ns1:data[1]/ns1:app.quote[1]/ns1:e[${i}]/ns1:amount[1]/ns1:normalizedAmount[1]/ns1:rate[1]")   
          affinityOrg= holder.getNodeValue("//ns1:Response[1]/ns1:data[1]/ns1:app.quote[1]/ns1:e[1]/ns1:relationships[1]/ns1:e[2]/ns1:target[1]/ns1:relationships[1]/ns1:affinityOrganization[1]/ns1:targets[1]/ns1:e[1]/ns1:extensions[1]/ns1:tenant[1]/ns1:l0AffinityId[1]/ns1:value[1]")
          
         //log.info rate
       //  log.info affinityOrg
          if(rate!=null)
          //&amp;&amp; affinityOrg != null)
          { 
          	//if(rate.toFloat()==1)

         // {    
          	 def id = holder.getNodeValue("ns1:Response[1]/ns1:data[1]/ns1:app.quote[1]/ns1:e[${i}]/ns1:_id[1]" )
          	                         //ns1:Response[1]/ns1:data[1]/ns1:app.quote[1]/ns1:e[${i}]/ns1:_id[1]
                     //QuoteID.add(id)
                     log.info id
                     j=j+1
                     testRunner.testCase.setPropertyValue( "QuoteID", id.toString() )
                     }
                       
          
               // testRunner.testCase.setPropertyValue( "QuoteID", id.toString() )
                                
                                i=i+1
                                if(j==2)
                                break;
                }
               // }

testRunner.testCase.setPropertyValue( "rate", rate.toString() )
</script></con:config></con:testStep><con:testStep type="transfer" name="Property Transfer-QuoteID" id="a3c4ec30-ee2e-4ca5-92ac-610f6bc0d539" disabled="true"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>QuoteID</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>FindQuotes</con:sourceStep><con:sourcePath>declare namespace ns1='https://qa-internal.dev.ssi-cloud.com/rest/api/dell/app.quotes::find';
//ns1:Response[1]/ns1:data[1]/ns1:app.quote[1]/ns1:e[1]/ns1:_id[1]</con:sourcePath><con:targetType>QuoteID</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:targetPath/><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="true" useXQuery="false"><con:name>QuoteName</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>FindQuotes</con:sourceStep><con:sourcePath>declare namespace ns1='https://qa-internal.dev.ssi-cloud.com/rest/api/dell/app.quotes::find';
//ns1:Response[1]/ns1:data[1]/ns1:app.quote[1]/ns1:e[1]/ns1:displayName[1]</con:sourcePath><con:targetType>QuoteName</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:targetPath xsi:nil="true"/><con:type>XPATH</con:type><con:targetTransferType>XPATH</con:targetTransferType><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="restrequest" name="FindActivities" id="d35a4d7e-07ba-4b13-8635-1b61efc9caa9"><con:settings/><con:config service="FindActivities" resourcePath="/rest/api/dell/core.activities::getrhpactivities" methodName="Core.activities::getrhpactivities" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="FindActivities" id="ec32ed71-dac8-4f9f-8863-509201de0075" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Cookie" value="${#TestSuite#Cookie}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://${#TestSuite#serverName}.ssi-cloud.com</con:endpoint><con:request>{"params":{"sort":{"systemProperties.createdOn":-1},"start":0,"limit":50,"columns":["relatedObjects"]},"origin":{"component":"Duplo_TimelineStream","url":"#tab/core.activities"},"inversesummary":false,"type":"app.quote","key":"${#TestCase#QuoteID}","filter":{"crudBased":false},"configParams":{"includeNotes":true}}</con:request><con:originalUri>https://qa-internal.dev.ssi-cloud.com/rest/api/dell/core.activities::getrhpactivities</con:originalUri><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="Property Transfer-requestedTime" id="5fc06d81-8ae1-437f-8899-b6c338da42e8"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>requestedTime</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>FindActivities</con:sourceStep><con:sourcePath>declare namespace ns1='https://qa-internal.dev.ssi-cloud.com/rest/api/dell/core.activities::getrhpactivities';
//ns1:Response[1]/ns1:data[1]/ns1:core.activity[1]/ns1:e[1]/ns1:context[1]/ns1:amount[1]/ns1:normalizedAmount[1]/ns1:convertedOn[1]</con:sourcePath><con:targetType>requestedTime</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:targetPath/><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="delay" name="Delay" id="33bdb4a9-7167-436e-9a0f-3717f928b9cd"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:testStep type="restrequest" name="Create Quote Input" id="b979a330-c079-49ea-a1df-d30b48a43388" disabled="true"><con:settings/><con:config service="Complete Quote" resourcePath="/rest/api/${#TestSuite#tenant}/app.quotes/${#TestCase#QuoteID}::getCreateQuoteInput" methodName="Quote Input" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create Quote Input" mediaType="application/json" postQueryString="false" id="90c1a4a6-e6ad-41a7-b401-21ced1e594b8"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Cookie" value="${#TestSuite#Cookie}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://${#TestSuite#serverName}.ssi-cloud.com</con:endpoint><con:request>{"detail":{"_id":"${#TestCase#QuoteID}","type":"app.quote","displayName":"${#TestCase#QuoteName}"},"selections":[],"origin":{"url":"#detail/app.quotes/${#TestCase#QuoteID}"}}</con:request><con:originalUri>https://pe-internal.dev.ssi-cloud.com/rest/api//app.quotes/::getCreateQuoteInput</con:originalUri><con:credentials><con:username>${#TestSuite#loginId}</con:username><con:password>passwordone</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Complete Quote" id="2bc17e00-50b8-403b-9a02-664d421d241f"><con:settings/><con:config service="Complete Quote" resourcePath="/rest/api/${#TestSuite#tenant}/app.quotes/${#TestCase#QuoteID}::createQuote" methodName="Complete Quote" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Complete Quote" mediaType="application/json" postQueryString="false" id="9b044755-d0bc-491c-bc19-a4996549688b"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Cookie" value="${#TestSuite#Cookie}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://${#TestSuite#serverName}.ssi-cloud.com</con:endpoint><con:request>{"amount":{"code":{"displayName":"${#TestCase#currencyDisplayName1}","name":"${#TestCase#currencyName1}","type":"core.lookup","key":"${#TestCase#coreLookUpKey}"},"amount":"${#TestCase#amount}","type":"core.currency","normalizedAmount":{"amount":"${#TestCase#amount2}","rate":"${#TestCase#rate}","code":{"key":"50ac018e1f9c0c00000001c7","displayName":"USD","type":"core.lookup","name":"usd"},"convertedOn":"2016-05-02T08:45:56.610Z"}},"notes":[],"isAutoCompleted":false,"documents":[],"resellerQuotes":[],"_id":"","type":"app.create.quote.input","priority":{"displayName":"Medium","name":"medium","type":"app.lookup","key":"50ac01a41f9c0c0000000a61"},"creationDate":"2016-05-04T12:16:59.662Z","expirationDate":"2016-06-03T00:00:00.000Z","quote":"${#TestCase#QuoteID}","displayName":"${#TestCase#QuoteName}","quoteNumber":"q1234324","inversesummary":true,"extinversesummary":true,"origin":{}}</con:request><con:originalUri>https://pe-internal.dev.ssi-cloud.com/rest/api//app.quotes/::createQuote</con:originalUri><con:credentials><con:username>${#TestSuite#loginId}</con:username><con:password>passwordone</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="Transfer Quote Number" id="ec949244-62b3-478c-9cfa-2c9cae37136e" disabled="true"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" entitize="false" transferToAll="false" useXQuery="false" transferChildNodes="false"><con:name>quoteNumber</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Complete Quote</con:sourceStep><con:sourcePath>declare namespace ns1='https://${#TestSuite#serverName}.ssi-cloud.com/rest/api/${#TestSuite#tenant}/app.quotes/${#TestSuite#QuoteID}::createQuote';
//ns1:Response[1]/ns1:data[1]/ns1:core.activity[1]/ns1:e[1]/ns1:context[1]/ns1:quoteNumber[1]</con:sourcePath><con:targetType>quoteNumber</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:targetPath/><con:type>XPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>completedDate</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Complete Quote</con:sourceStep><con:sourcePath>$.data.app.opportunity[0].targetAmount.normalizedAmount.convertedOn</con:sourcePath><con:targetType>result</con:targetType><con:targetStep>Groovy Script-TAT Calculations</con:targetStep><con:targetPath/><con:type>JSONPATH</con:type><con:targetTransferType>XPATH</con:targetTransferType><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>convertedOn</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Complete Quote</con:sourceStep><con:sourcePath>$.data.app.opportunity[0].amount.normalizedAmount.convertedOn</con:sourcePath><con:targetType>result</con:targetType><con:targetStep>Groovy Script-TAT Calculations</con:targetStep><con:targetPath/><con:type>JSONPATH</con:type><con:targetTransferType>XPATH</con:targetTransferType><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="restrequest" name="QuoteDetails-Completed" id="8eb403d7-9e0c-4086-b6d3-2365030780ac"><con:settings/><con:config service="QuoteDetails" resourcePath="/rest/api/dell/app.quotes::find" methodName="App.quotes::find" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="QuoteDetails-Completed" id="73cce1c1-ad05-4f68-83e5-e387a9e63e66" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Cookie" value="${#TestSuite#Cookie}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://${#TestSuite#serverName}.ssi-cloud.com</con:endpoint><con:request>{"inversesummary":true,"extinversesummary":true,"filter":{"_id":"${#TestCase#QuoteID}"},"params":{"start":0,"limit":1},"origin":{"component":"AvalonCollection","url":"#tab/app.quotes/vq=STATUS%3A%20%22Completed%22%20CREATED-ON%3A%20%22%3E04-24-2016%22"}}</con:request><con:originalUri>https://qa-internal.dev.ssi-cloud.com/rest/api/dell/app.quotes::find</con:originalUri><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters>
  <con:entry key="inversesummary" value="true"/>
  <con:entry key="extinversesummary" value="true"/>
</con:parameters><con:parameterOrder><con:entry>inversesummary</con:entry><con:entry>extinversesummary</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="Property Transfer-TurnaroundTime" id="e7b8d595-4ed7-45c3-ae92-cd1c044ce29a"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>ChangeDate</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>QuoteDetails-Completed</con:sourceStep><con:sourcePath>declare namespace ns1='https://qa-internal.dev.ssi-cloud.com/rest/api/dell/app.quotes::find';
//ns1:Response[1]/ns1:data[1]/ns1:app.quote[1]/ns1:e[1]/ns1:flows[1]/ns1:quoteStages[1]/ns1:transitions[1]/ns1:e[3]/ns1:changeDate[1]</con:sourcePath><con:targetType>ChangeDate</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TimeGap</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>QuoteDetails-Completed</con:sourceStep><con:sourcePath>declare namespace ns1='https://qa-internal.dev.ssi-cloud.com/rest/api/dell/app.quotes::find';
//ns1:Response[1]/ns1:data[1]/ns1:app.quote[1]/ns1:e[1]/ns1:flows[1]/ns1:quoteStages[1]/ns1:transitions[1]/ns1:e[3]/ns1:timeGap[1]</con:sourcePath><con:targetType>TimeGap</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false"><con:name>TatTotal</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>QuoteDetails-Completed</con:sourceStep><con:sourcePath>declare namespace ns1='https://qa-internal.dev.ssi-cloud.com/rest/api/dell/app.quotes::find';
//ns1:Response[1]/ns1:data[1]/ns1:app.quote[1]/ns1:e[1]/ns1:extensions[1]/ns1:master[1]/ns1:tatTotal[1]/ns1:value[1]</con:sourcePath><con:targetType>TatTotal</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:targetPath/><con:type>XPATH</con:type><con:targetTransferType>XPATH</con:targetTransferType><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TatNet</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>QuoteDetails-Completed</con:sourceStep><con:sourcePath>declare namespace ns1='https://qa-internal.dev.ssi-cloud.com/rest/api/dell/app.quotes::find';
//ns1:Response[1]/ns1:data[1]/ns1:app.quote[1]/ns1:e[1]/ns1:extensions[1]/ns1:master[1]/ns1:tatNet[1]/ns1:value[1]</con:sourcePath><con:targetType>TatNet</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script-FormatRequestedDate" id="92972a7c-8252-4725-be18-64f827a0fee5"><con:settings/><con:config><script>import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.text.DateFormat;
import java.util.Date;
import java.util.TimeZone;


def requestedTime = context.expand( '${#TestCase#requestedTime}' )
log.info requestedTime

String string = requestedTime;
String defaultTimezone = TimeZone.getDefault().getID();
SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ");
SimpleDateFormat output = new SimpleDateFormat("yyyy-MM-dd");
//Date d = sdf.parse(time);

Date date = sdf.parse(string.replaceAll("Z", "+0000"));
String nTime = output.format(date);
log.info("string: " + string);
log.info("date: " + date);
log.info("nTime: " + nTime);
testRunner.testCase.setPropertyValue( "FormatedRequestedDate", nTime.toString());</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script- FormatChangeDate" id="18b80ef4-ea91-401a-b97e-16990d08b600"><con:settings/><con:config><script>import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.text.DateFormat;
import java.util.Date;
import java.util.TimeZone;
def changeDate = context.expand( '${#TestCase#ChangeDate}' )

String string = changeDate;
//String defaultTimezone = TimeZone.getDefault().getID();
SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ");
SimpleDateFormat output = new SimpleDateFormat("yyyy-MM-dd");
//Date d = sdf.parse(time);

Date date = sdf.parse(string.replaceAll("Z", "+0000"));
String nTime = output.format(date);
log.info("string: " + string);
log.info("date: " + date);
log.info("nTime: " + nTime);
testRunner.testCase.setPropertyValue( "FormatedChangeDate", nTime.toString());</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script 5" id="84108142-f487-43bd-a3b2-04a75b8f8c30"><con:settings/><con:config><script><![CDATA[import java.text.SimpleDateFormat;
import java.util.Date;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.text.DateFormat;
import java.util.TimeZone;
import java.util.concurrent.TimeUnit;

def changeDate = context.expand( '${#TestCase#ChangeDate}' )
def requestedTime = context.expand( '${#TestCase#requestedTime}' )
log.info requestedTime
log.info changeDate
def timeDiffMilliesFromDate = context.expand( '${#TestCase#TimeDiffMilliesFromDate}' )


 Long timeDiffMilliesFromDate1 = Long.valueOf(timeDiffMilliesFromDate);
//String string = requestedTime;
//String string1 = changeDate;

SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ");
SimpleDateFormat output = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS");


//requested Date
Date date = sdf.parse(requestedTime.replaceAll("Z", "+0000"));
String nTime = output.format(date);
myDate = Date.parse("yyyy-MM-dd'T'HH:mm:ss.SSS", nTime) ;
//log.info("string: " + string);
log.info("date: " + nTime);




//change Date
Date date1 = sdf.parse(changeDate.replaceAll("Z", "+0000"));
log.info("date1: " + date1);

String nTime1 = output.format(date1);
myDate1 = Date.parse("yyyy-MM-dd'T'HH:mm:ss.SSS", nTime1) ;
log.info("myDate1: " + myDate1);
log.info("date1: " + nTime1);

DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS");
//get current date time with Date()
Date date2 = new Date();
log.info("CurrentDate: "+ dateFormat.format(date2));

// Get calendar set to current date and time
Calendar c = Calendar.getInstance();
 	    c.set(Calendar.HOUR_OF_DAY, 0);
         c.set(Calendar.MINUTE, 0);
         c.set(Calendar.SECOND, 0);
         c.set(Calendar.MILLISECOND, 0);
         
         log.info c.getTime();


    
t2=(dateFormat.format(c.getTime()))
t3=(dateFormat.parse(t2))
Timeinhours=(myDate1 - t3);
log.info ("Time: " + Timeinhours);


getTimeDiff(date,date1)

getDurationBreakdown(timeDiffMilliesFromDate1)




def getTimeDiff(Date dateOne, Date dateTwo) {
            String diff = "";
            long timeDiff = Math.abs(dateOne.getTime() - dateTwo.getTime());
            log.info ("TimeDiff : " + timeDiff);
            testRunner.testCase.setPropertyValue( "TimeDiffMilliesFromDate", timeDiff.toString())
              return timeDiff;
    }

def String getDurationBreakdown(long millies)
    {
        if(millies < 0)
        {
            throw new IllegalArgumentException("Duration must be greater than zero!");
        }

        long days = TimeUnit.MILLISECONDS.toDays(millies);
        millies -= TimeUnit.DAYS.toMillis(days);
        long hours = TimeUnit.MILLISECONDS.toHours(millies);
        millies -= TimeUnit.HOURS.toMillis(hours);
        long minutes = TimeUnit.MILLISECONDS.toMinutes(millies);
        millies -= TimeUnit.MINUTES.toMillis(minutes);
        long seconds = TimeUnit.MILLISECONDS.toSeconds(millies);

        StringBuilder sb = new StringBuilder(64);

        sb.append(hours);
        sb.append(" Hours ");
      

        if (minutes==0 && seconds>0){
        	 minutes=minutes+1
        	 sb.append(minutes);
        	 sb.append(" Minutes ");
        	 seconds=0
        	 sb.append(seconds);
           sb.append(" Seconds");
        }
       else if (minutes>0 && seconds>0 && seconds<=30){
       	minutes=minutes-1
	      sb.append(minutes);
        	 sb.append(" Minutes ");
        	 seconds=0
        	 sb.append(seconds);
           sb.append(" Seconds");
        }
        else if (minutes>0 && seconds>30){
        	minutes=minutes+1
        	 sb.append(minutes);
        	 sb.append(" Minutes ");
        	 seconds=0
        	 sb.append(seconds);
           sb.append(" Seconds");
        	}
            
log.info(sb.toString())
       testRunner.testCase.setPropertyValue( "MilliesFromDate", sb.toString());
    }]]></script></con:config></con:testStep><con:testStep type="groovy" name="BusinessDay Calculation" id="872f7f51-7dd2-472c-8d0b-df25d5aeff59"><con:settings/><con:config><script><![CDATA[import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.text.DateFormat;
import java.util.Date;
import java.util.TimeZone;
import java.util.*
import org.joda.time.DateTime;

def changeDate = context.expand( '${#TestCase#ChangeDate}' )
def formatedRequestedDate = context.expand( '${#TestCase#FormatedRequestedDate}' )
def formatedChangeDate = context.expand( '${#TestCase#FormatedChangeDate}' )

SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd");
String dateInString = formatedRequestedDate
log.info dateInString
Date date = formatter.parse(dateInString);
log.info(date);
log.info(formatter.format(date));
def projectContext = context.testCase.testSuite.project.context
projectContext.date = date






String dateInString1 = formatedChangeDate		
		
Date date1 = formatter.parse(dateInString1);
log.info(date1);
log.info(formatter.format(date1));

projectContext.date1 = date1

def date3 = projectContext.date1
def date2 = projectContext.date


days(date2,date3)

/*
SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ");
SimpleDateFormat output = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS");
//Date d = sdf.parse(time);



Date Changedate = sdf.parse(changeDate.replaceAll("Z", "+0000"));
String nTime = output.format(Changedate);

DateTime dateTime = new DateTime();
Calendar c = Calendar.getInstance();
	    c.setTime(new Date());
	    c.set(Calendar.HOUR_OF_DAY, 0);
         c.set(Calendar.MINUTE, 0);
         c.set(Calendar.SECOND, 0);
         c.set(Calendar.MILLISECOND, 0);

Date myDate = c.getTime();
log.info ("myDate::" + myDate);

String datediff= (nTime - myDate)
log.info ("datediff::" + datediff)



DateFormat sdf21 = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss"); 
Date date21 = sdf21.parse(datediff);
log.info ("Days :- " +date21.getDay()); 
log.info ("Hours :- " +date21.getHours()); 
log.info ("Min :- " + date21.getMinutes()); 
log.info ("Sec :- " + date21.getSeconds()); 

 StringBuilder sb = new StringBuilder(64);
        sb.append(date21.getHours());
        sb.append(" Hours ");
 if (date21.getMinutes()==0 && seconds>0){
        	 minutes=date21.getMinutes()+1
        	 sb.append(minutes);
        	 sb.append(" Minutes ");
        	 seconds=0
        	 sb.append(seconds);
           sb.append(" Seconds");
        }
       else if (date21.getMinutes()>0 && date21.getSeconds()>0 && date21.getSeconds()<=30){
	      sb.append(date21.getMinutes());
        	 sb.append(" Minutes ");
        	 seconds=0
        	 sb.append(seconds);
           sb.append(" Seconds");
        }
        else if (date21.getMinutes()>0 && date21.getSeconds()>30){
        	minutes=date21.getMinutes()+1
        	 sb.append(minutes);
        	 sb.append(" Minutes ");
        	 seconds=0
        	 sb.append(seconds);
           sb.append(" Seconds");
        	}

log.info("DateDiffAfterCal :- " +sb.toString())
testRunner.testCase.setPropertyValue( "DateDiffAfterCal", sb.toString());

*/




//Business Days Calculation

 long days(Date start, Date end){
    //Ignore argument check

    Calendar c1 = Calendar.getInstance();
    c1.setTime(start);
    int w1 = c1.get(Calendar.DAY_OF_WEEK);
    c1.add(Calendar.DAY_OF_WEEK, -w1);

    Calendar c2 = Calendar.getInstance();
    c2.setTime(end);
    int w2 = c2.get(Calendar.DAY_OF_WEEK);
    c2.add(Calendar.DAY_OF_WEEK, -w2);

    //end Saturday to start Saturday 
    long days = (c2.getTimeInMillis()-c1.getTimeInMillis())/(1000*60*60*24);
    long daysWithoutWeekendDays = days-(days*2/7);

    // Adjust days to add on (w2) and days to subtract (w1) so that Saturday
    // and Sunday are not included
    if (w1 == Calendar.SUNDAY && w2 != Calendar.SATURDAY) {
        w1 = Calendar.MONDAY;
    } else if (w1 == Calendar.SATURDAY && w2 != Calendar.SUNDAY) {
        w1 = Calendar.FRIDAY;
    } 

    if (w2 == Calendar.SUNDAY) {
        w2 = Calendar.MONDAY;
    } else if (w2 == Calendar.SATURDAY) {
        w2 = Calendar.FRIDAY;
    }
    testRunner.testCase.setPropertyValue( "BusinessDays", (daysWithoutWeekendDays-w1+w2-1).toString());
    return daysWithoutWeekendDays-w1+w2-1;
}
]]></script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script-TAT Calculations" id="bc9381c1-2684-4782-ab1d-1f6f5773bbbc"><con:settings/><con:config><script><![CDATA[import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.TimeZone;
import java.util.concurrent.TimeUnit;
def quoteID = context.expand( '${#TestCase#QuoteID}' )
def timeZone = context.expand( '${#TestCase#TimeZone}' )
def requestedTime = context.expand( '${#TestCase#requestedTime}' )
def changeDate = context.expand( '${#TestCase#ChangeDate}' )
def timeGap = context.expand( '${#TestCase#TimeGap}' )
def long millies =timeGap.toLong()
def turnaroundTime = context.expand( '${#TestCase#TurnaroundTime}' )
def tatNet = context.expand( '${#TestCase#TatNet}' )
def tatTotal = context.expand( '${#TestCase#TatTotal}' )
def long minutes1 = tatTotal.toLong()
def long tatTotalmillies = minutes1 * 60 * 1000;
def long tatNetmillies = minutes1 * 60 * 1000;
def businessDays = context.expand( '${#TestCase#BusinessDays}' )
def dateDiffAfterCal = context.expand( '${#TestCase#DateDiffAfterCal}' )
def milliesFromDate = context.expand( '${#TestCase#MilliesFromDate}' )


def FinalTATCal = businessDays + " Days " + milliesFromDate
log.info (" FinalTATCal: " + FinalTATCal)
testRunner.testCase.setPropertyValue( "FinalTATCal", FinalTATCal.toString());

//getWorkingDaysBetweenTwoDates( requestedTime,endDate)

getDurationBreakdown(millies)

getDurationBreakdownMinutes(tatTotalmillies)
getDurationBreakdownMinutes1(tatNetmillies)


def String getDurationBreakdown(long millies)
    {
        if(millies < 0)
        {
            throw new IllegalArgumentException("Duration must be greater than zero!");
        }

        long days = TimeUnit.MILLISECONDS.toDays(millies);
        millies -= TimeUnit.DAYS.toMillis(days);
        long hours = TimeUnit.MILLISECONDS.toHours(millies);
        millies -= TimeUnit.HOURS.toMillis(hours);
        long minutes = TimeUnit.MILLISECONDS.toMinutes(millies);
        millies -= TimeUnit.MINUTES.toMillis(minutes);
        long seconds = TimeUnit.MILLISECONDS.toSeconds(millies);

        StringBuilder sb = new StringBuilder(64);
   	   sb.append(days);
        sb.append(" Days ");
        sb.append(hours);
        sb.append(" Hours ");
      

        if (minutes==0 && seconds>0){
        	 minutes=minutes+1
        	 sb.append(minutes);
        	 sb.append(" Minutes ");
        	 seconds=0
        	 sb.append(seconds);
           sb.append(" Seconds");
        }
       else if (minutes>0 && seconds>0 && seconds<=30){
	      sb.append(minutes);
        	 sb.append(" Minutes ");
        	 seconds=0
        	 sb.append(seconds);
           sb.append(" Seconds");
        }
        else if (minutes>0 && seconds>30){
        	minutes=minutes+1
        	 sb.append(minutes);
        	 sb.append(" Minutes ");
        	 seconds=0
        	 sb.append(seconds);
           sb.append(" Seconds");
        	}
              
log.info(sb.toString())
       testRunner.testCase.setPropertyValue( "TatfromRestTimegap", sb.toString());
    }

def String getDurationBreakdownMinutes(long tatTotalmillies)
    {
        if(tatTotalmillies < 0)
        {
            throw new IllegalArgumentException("Duration must be greater than zero!");
        }

        long days = TimeUnit.MILLISECONDS.toDays(tatTotalmillies);
        tatTotalmillies -= TimeUnit.DAYS.toMillis(days);
        long hours = TimeUnit.MILLISECONDS.toHours(tatTotalmillies);
        tatTotalmillies -= TimeUnit.HOURS.toMillis(hours);
        long minutes = TimeUnit.MILLISECONDS.toMinutes(tatTotalmillies);
        tatTotalmillies -= TimeUnit.MINUTES.toMillis(minutes);
        long seconds = TimeUnit.MILLISECONDS.toSeconds(tatTotalmillies);

        StringBuilder sb = new StringBuilder(64);
        sb.append(days);
        sb.append(" Days ");
        sb.append(hours);
        sb.append(" Hours ");
        sb.append(minutes);
        sb.append(" Minutes "); 
        sb.append(seconds);
        sb.append(" Seconds");
        
        log.info(sb.toString())
        testRunner.testCase.setPropertyValue( "TatfromTatTotal", sb.toString());
    }

def String getDurationBreakdownMinutes1(long tatNetmillies)
    {
        if(tatNetmillies < 0)
        {
            throw new IllegalArgumentException("Duration must be greater than zero!");
        }

        long days = TimeUnit.MILLISECONDS.toDays(tatNetmillies);
        tatNetmillies -= TimeUnit.DAYS.toMillis(days);
        long hours = TimeUnit.MILLISECONDS.toHours(tatNetmillies);
        tatNetmillies -= TimeUnit.HOURS.toMillis(hours);
        long minutes = TimeUnit.MILLISECONDS.toMinutes(tatNetmillies);
        tatNetmillies -= TimeUnit.MINUTES.toMillis(minutes);
        long seconds = TimeUnit.MILLISECONDS.toSeconds(tatNetmillies);

        StringBuilder sb = new StringBuilder(64);
        sb.append(days);
        sb.append(" Days ");
        sb.append(hours);
        sb.append(" Hours ");
        sb.append(minutes);
        sb.append(" Minutes "); 
        sb.append(seconds);
        sb.append(" Seconds");
        
        log.info(sb.toString())
        testRunner.testCase.setPropertyValue( "tatNetmillies", sb.toString());
    }


    ]]></script></con:config></con:testStep><con:testStep type="groovy" name="Assertion For TatTotal and TatNet" id="6ed59a66-0b40-4ad3-8422-8510d25e6af4"><con:settings/><con:config><script>def tatfromTatTotal = context.expand( '${#TestCase#TatfromTatTotal}' )
def tatfromRestTimegap = context.expand( '${#TestCase#TatfromRestTimegap}' )
def tatNetmillies = context.expand( '${#TestCase#tatNetmillies}' )
def finalTATCal = context.expand( '${#TestCase#FinalTATCal}' )




assert tatfromTatTotal==finalTATCal
assert tatNetmillies==finalTATCal</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script" id="46c3e139-1d88-49a2-9bcc-b5327dad5d65" disabled="true"><con:settings/><con:config><script><![CDATA[import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.text.DateFormat;
import java.util.Date;
import java.util.TimeZone;
import java.util.concurrent.TimeUnit;

def changeDate = context.expand( '${#TestCase#ChangeDate}' )
def requestedTime = context.expand( '${#TestCase#requestedTime}' )
//log.info requestedTime
//log.info changeDate

//String string = requestedTime;
//String string1 = changeDate;

SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ");
SimpleDateFormat output = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS");


//requested Date
Date date = sdf.parse(requestedTime.replaceAll("Z", "+0000"));
String nTime = output.format(date);
myDate = Date.parse("yyyy-MM-dd'T'HH:mm:ss.SSS", nTime) ;
//log.info("string: " + string);
log.info("date: " + nTime);




//change Date
Date date1 = sdf.parse(changeDate.replaceAll("Z", "+0000"));
String nTime1 = output.format(date1);
myDate1 = Date.parse("yyyy-MM-dd'T'HH:mm:ss.SSS", nTime1) ;
log.info("myDate1: " + myDate1);
log.info("date: " + nTime1);

days(myDate,myDate1);



long days(Date start, Date end){
    //Ignore argument check

    Calendar c1 = Calendar.getInstance();
    c1.setTime(start);
   /* c1.set(Calendar.HOUR_OF_DAY, 0);
    c1.set(Calendar.MINUTE, 0);
    c1.set(Calendar.SECOND, 0);
    c1.set(Calendar.MILLISECOND, 0);*/
    
    int w1 = c1.get(Calendar.DAY_OF_WEEK);
    c1.add(Calendar.DAY_OF_WEEK, -w1);

    Calendar c2 = Calendar.getInstance();
    c2.setTime(end);
      
    int w2 = c2.get(Calendar.DAY_OF_WEEK);
    c2.add(Calendar.DAY_OF_WEEK, -w2);

    //end Saturday to start Saturday 
    long days = (c2.getTimeInMillis()-c1.getTimeInMillis())/(1000*60*60*24);
    long daysWithoutWeekendDays = days-(days*2/7);

    // Adjust days to add on (w2) and days to subtract (w1) so that Saturday
    // and Sunday are not included
    if (w1 == Calendar.SUNDAY && w2 != Calendar.SATURDAY) {
        w1 = Calendar.MONDAY;
    } else if (w1 == Calendar.SATURDAY && w2 != Calendar.SUNDAY) {
        w1 = Calendar.FRIDAY;
    } 

    if (w2 == Calendar.SUNDAY) {
        w2 = Calendar.MONDAY;
    } else if (w2 == Calendar.SATURDAY) {
        w2 = Calendar.FRIDAY;
    }
log.info (daysWithoutWeekendDays-w1+w2)
    return daysWithoutWeekendDays-w1+w2;
}

DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS");
//get current date time with Date()
Date date2 = new Date();
log.info(dateFormat.format(date2));
//log.info firstDayOfWeekTimestamp
// Get calendar set to current date and time
Calendar c = Calendar.getInstance();
 	    c.set(Calendar.HOUR_OF_DAY, 0);
         c.set(Calendar.MINUTE, 0);
         c.set(Calendar.SECOND, 0);
         c.set(Calendar.MILLISECOND, 0);
         
         log.info c.getTime();


    
t2=(dateFormat.format(c.getTime()))
t2=(dateFormat.parse(t2))
Timeinhours=(myDate1 - t2);
log.info ("Time: " + Timeinhours);

getDurationBreakdown(Timeinhours)


def String getDurationBreakdown(long Timeinhours)
    {
        if(Timeinhours < 0)
        {
            throw new IllegalArgumentException("Duration must be greater than zero!");
        }

        long days = TimeUnit.MILLISECONDS.toDays(Timeinhours);
        Timeinhours -= TimeUnit.DAYS.toMillis(days);
        long hours = TimeUnit.MILLISECONDS.toHours(Timeinhours);
        Timeinhours -= TimeUnit.HOURS.toMillis(hours);
        long minutes = TimeUnit.MILLISECONDS.toMinutes(Timeinhours);
        Timeinhours -= TimeUnit.MINUTES.toMillis(minutes);
        long seconds = TimeUnit.MILLISECONDS.toSeconds(Timeinhours);

        StringBuilder sb = new StringBuilder(64);
       
        sb.append(hours);
        sb.append(" Hours ");
      

        if (minutes==0 && seconds>0){
        	 minutes=minutes+1
        	 sb.append(minutes);
        	 sb.append(" Minutes ");
        	 seconds=0
        	 sb.append(seconds);
           sb.append(" Seconds");
        }
       else if (minutes>0 && seconds>0 && seconds<=30){
	      sb.append(minutes);
        	 sb.append(" Minutes ");
        	 seconds=0
        	 sb.append(seconds);
           sb.append(" Seconds");
        }
        else if (minutes>0 && seconds>30){
        	minutes=minutes+1
        	 sb.append(minutes);
        	 sb.append(" Minutes ");
        	 seconds=0
        	 sb.append(seconds);
           sb.append(" Seconds");
        	}
              
log.info(sb.toString())


    }


]]></script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script 2" id="6c301fad-d40a-4fa5-ab33-e64d2f38b446" disabled="true"><con:settings/><con:config><script>import java.util.Calendar;
import java.text.SimpleDateFormat;
def changeDate = context.expand( '${#TestCase#ChangeDate}' )
def requestedTime = context.expand( '${#TestCase#requestedTime}' )

SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ");
SimpleDateFormat output = new SimpleDateFormat("yyyy-MM-dd");


Date date = sdf.parse(requestedTime.replaceAll("Z", "+0000"));
String nTime = output.format(date);
def myDate = Date.parse("yyyy-MM-dd", nTime) as Date;
//Date nTime = output.format(myDate);

//log.info("string: " + string);
log.info("date: " + nTime);


Date date1 = sdf.parse(changeDate.replaceAll("Z", "+0000"));
String nTime1 = output.format(date1);
def myDate1 = Date.parse("yyyy-MM-dd", nTime1) as Date;
//log.info("string: " + string1);
log.info("date: " + nTime1);

WeekdayTest(myDate,myDate1)


long WeekdayTest(Date startdate,Date enddate)
{
 
 
    SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
    try
    {
      //Date start = sdf.parse(startdate);
      Calendar start = Calendar.getInstance();
      start.setTime(sdf.parse(startdate));
      //Date end = sdf.parse(enddate);
      Calendar end = Calendar.getInstance();
      end.setTime(sdf.parse(enddate));
      int workingDays = 0;
      while(!start.after(end))//removed ; (semi-colon)
      {
        //int day = start.getDay();
        int day = start.get(Calendar.DAY_OF_WEEK);
        //if ((day != Calendar.SATURDAY) || (day != Calendar.SUNDAY)) if it's sunday, != to Saturday is true
        if ((day != Calendar.SATURDAY) &amp;&amp; (day != Calendar.SUNDAY))
        workingDays++;
        //log.info(workingDays);//moved
        start.add(Calendar.DATE, 1);//removed comment tags
      }
      log.info(workingDays);
    }
    catch(Exception e)
    {
      e.printStackTrace();
    }
  }
</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script 3" id="1c4dc8f3-d9bd-4715-ae6d-55d58105e044" disabled="true"><con:settings/><con:config><script>import lotus.domino.*; 
import java.util.*; 
import java.text.*; 
import java.math.*; 
import java.util.Calendar;
import java.text.SimpleDateFormat;
import java.text.DateFormat;
import java.util.Date;
import java.util.TimeZone;

def changeDate = context.expand( '${#TestCase#ChangeDate}' )
def requestedTime = context.expand( '${#TestCase#requestedTime}' )

SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ");
SimpleDateFormat output = new SimpleDateFormat("yyyy-MM-dd");


Date date = sdf.parse(requestedTime.replaceAll("Z", "+0000"));
String nTime = output.format(date);
log.info("date: " + nTime);


Date date1 = sdf.parse(changeDate.replaceAll("Z", "+0000"));
String nTime1 = output.format(date1);
log.info("date: " + nTime1);




public class CalcBusinessDays  { 

public void NotesMain() { 
Date startTime = null
Date endTime = null; 
String startTimeStr, endTimeStr, result; 

try { 
Session session = getSession(); 
AgentContext agentContext = session.getAgentContext(); 

startTimeStr = nTime; 
endTimeStr = nTime1; 
startTime = session.createDateTime(startTimeStr); 
endTime = session.createDateTime(endTimeStr); 
result = diffInWeekdays(startTime, endTime, startTimeStr, 
endTimeStr); 
System.out.println("Result = " + result); 

} catch(Exception e) { 
e.printStackTrace(); 
} 
} 

public String diffInWeekdays(DateTime startTime, DateTime endTime, String 
startTimeStr, String endTimeStr) { 
String res = ""; 
try { 
Date firstDate = null, secondDate = null; 
int diffInt = endTime.timeDifference(startTime); 
int diffIntDays = (diffInt / 86400 + 1); 
BigInteger sev = BigInteger.valueOf(7); 
BigInteger minusTwo = BigInteger.valueOf(-2); 
BigInteger bis = BigInteger.valueOf(getWeekday(firstDate = 
dateConvert(startTimeStr))); 
BigInteger bie = BigInteger.valueOf(getWeekday(secondDate = 
dateConvert(endTimeStr))); 
int strtDay = bis.mod(sev).intValue(); 
int endDay = bie.mod(sev).intValue(); 
int max = minusTwo.max(BigInteger.valueOf(strtDay * -1)).intValue(); 
int min = BigInteger.valueOf(1).min(bie.mod(sev)).intValue(); 
int result = (diffIntDays - endDay + strtDay - 8) * 5 / 7 - max - min 
+ 5 - strtDay + endDay; 
//o.println("result =\t" + result); 
res = Integer.toString(result); 
} catch (Exception e) { 
e.printStackTrace(); 
} 
return res; 
} 

public Date dateConvert(String dt) { 
SimpleDateFormat sdf = new SimpleDateFormat("mm/dd/yyyy"); 
ParsePosition pos = new ParsePosition(0); 
Date covDate = sdf.parse(dt, pos); 
return covDate; 
} 

public int getWeekday(Date cdt) { 
Calendar cal = Calendar.getInstance(); 
cal.setTime(cdt); 
return cal.get(Calendar.DAY_OF_WEEK); 
} 

}</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script 4" id="7546b60a-9924-4548-9ef5-9a2d8e4ee819" disabled="true"><con:settings/><con:config><script>import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.text.DateFormat;
import java.util.Date;
import java.util.TimeZone;

def changeDate = context.expand( '${#TestCase#ChangeDate}' )
def requestedTime = context.expand( '${#TestCase#requestedTime}' )

String startDateString = requestedTime;
    DateFormat df = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ"); 
    Date startDate;
//SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ");
//SimpleDateFormat output = new SimpleDateFormat("yyyy-MM-dd");
    
    
        startDate = df.parse(startDateString);
        String newDateString = df.format(startDate);
        log.info(newDateString);
   </script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script 6" id="484716fd-9363-4f97-8af0-5b2128e7d225"><con:settings/><con:config><script>import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.text.DateFormat;
import java.util.Date;
import java.util.TimeZone;

def requestedTime = context.expand( '${#TestCase#requestedTime}' )
def changeDate = context.expand( '${#TestCase#ChangeDate}' )

SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ");

String string = requestedTime;
Date date = sdf.parse(string.replaceAll("Z", "+0000"));

String string1 = changeDate;
Date date1 = sdf.parse(string1.replaceAll("Z", "+0000"));












getWorkingDaysBetweenTwoDates(date, date1)


def getWorkingDaysBetweenTwoDates(Date startDate, Date endDate) {
    Calendar startCal = Calendar.getInstance();
    startCal.setTime(startDate);        

    Calendar endCal = Calendar.getInstance();
    endCal.setTime(endDate);

    int workDays = 0;

    //Return 0 if start and end are the same
    if (startCal.getTimeInMillis() == endCal.getTimeInMillis()) {
        return 0;
    }

    if (startCal.getTimeInMillis() > endCal.getTimeInMillis()) {
        startCal.setTime(endDate);
        endCal.setTime(startDate);
    }





    while (startCal.getTimeInMillis() &lt; endCal.getTimeInMillis()) //excluding end date 
    {
       //excluding start date
        startCal.add(Calendar.DAY_OF_MONTH, 1);
        if (startCal.get(Calendar.DAY_OF_WEEK) != Calendar.SATURDAY &amp;&amp; startCal.get(Calendar.DAY_OF_WEEK) != Calendar.SUNDAY) {
            ++workDays;
            continue
        }
    } 
    
    log.info workDays
    return workDays;
}</script></con:config></con:testStep><con:testStep type="delay" name="Delay 3" id="cd1f68d9-28c0-4f42-bc0c-990d2252e1ba"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:properties><con:property><con:name>amount</con:name><con:value>1000</con:value></con:property><con:property><con:name>amount2</con:name><con:value>1087.67</con:value></con:property><con:property><con:name>ChangeDate</con:name><con:value>2016-06-02T14:19:30.693Z</con:value></con:property><con:property><con:name>completedDate</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>coreLookUpKey</con:name><con:value>50ac01a21f9c0c00000007d9</con:value></con:property><con:property><con:name>coreLookUpKEY2</con:name><con:value>50ac018e1f9c0c00000001c7</con:value></con:property><con:property><con:name>CreatedOnDate</con:name><con:value>2016-05-10T00:00:00.000Z</con:value></con:property><con:property><con:name>currency</con:name><con:value>GBP</con:value></con:property><con:property><con:name>currencyDisplayName1</con:name><con:value>EUR</con:value></con:property><con:property><con:name>currencyDisplayName2</con:name><con:value>USD</con:value></con:property><con:property><con:name>currencyName1</con:name><con:value>eur</con:value></con:property><con:property><con:name>currencyName2</con:name><con:value>usd</con:value></con:property><con:property><con:name>FormatedChangeDate</con:name><con:value>2016-06-02</con:value></con:property><con:property><con:name>FormatedRequestedDate</con:name><con:value>2016-05-10</con:value></con:property><con:property><con:name>FormatedTime</con:name><con:value/></con:property><con:property><con:name>QuoteID</con:name><con:value>5731be97e4b08fde9a0ed8f8</con:value></con:property><con:property><con:name>QuoteName</con:name><con:value>Q-APOS-ADT FIRE &amp; SECURITY PLC_GB7595878-ENTERPRISE-FY17Q2-1-V1</con:value></con:property><con:property><con:name>quoteNumber</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rate</con:name><con:value>1</con:value></con:property><con:property><con:name>requestedTime</con:name><con:value>2016-05-10T10:57:28.539Z</con:value></con:property><con:property><con:name>TatfromRestTimegap</con:name><con:value>23 Days 3 Hours 21 Minutes 0 Seconds</con:value></con:property><con:property><con:name>TatfromTatTotal</con:name><con:value>17 Days 3 Hours 21 Minutes 0 Seconds</con:value></con:property><con:property><con:name>TatNet</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">24681</con:value></con:property><con:property><con:name>tatNetmillies</con:name><con:value>17 Days 3 Hours 21 Minutes 0 Seconds</con:value></con:property><con:property><con:name>TatTotal</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">24681</con:value></con:property><con:property><con:name>TimeGap</con:name><con:value>1999284515</con:value></con:property><con:property><con:name>TimeZone</con:name><con:value>UTC+5:30</con:value></con:property><con:property><con:name>TimeZoneKey</con:name><con:value>56e36ae3e4b02186a22b0dbe</con:value></con:property><con:property><con:name>TurnaroundTime</con:name><con:value>1597</con:value></con:property><con:property><con:name>BusinessDays</con:name><con:value>17</con:value></con:property><con:property><con:name>DateDiffAfterCal</con:name><con:value>11 Hours 4 Minutes 0 Seconds</con:value></con:property><con:property><con:name>FinalTATCal</con:name><con:value>17 Days 3 Hours 21 Minutes 0 Seconds</con:value></con:property><con:property><con:name>TimeDiffMilliesFromDate</con:name><con:value>1999322154</con:value></con:property><con:property><con:name>MilliesFromDate</con:name><con:value>3 Hours 21 Minutes 0 Seconds</con:value></con:property><con:property><con:name>QuoteCount</con:name><con:value>14</con:value></con:property><con:property><con:name>QuoteIDs</con:name><con:value>[5731be97e4b08fde9a0ed8f8, 5731be97e4b08fde9a0ed8f8, 5731be97e4b08fde9a0ed8f8, 5731be97e4b08fde9a0ed8f8, 5731be97e4b08fde9a0ed8f8, 5731be97e4b08fde9a0ed8f8, 5731be97e4b08fde9a0ed8f8, 5731be97e4b08fde9a0ed8f8, 5731be97e4b08fde9a0ed8f8, 5731be97e4b08fde9a0ed8f8, 5731be97e4b08fde9a0ed8f8, 5731be97e4b08fde9a0ed8f8, 5731be97e4b08fde9a0ed8f8]</con:value></con:property><con:property><con:name>i</con:name><con:value>1</con:value></con:property><con:property><con:name>flag</con:name><con:value>true</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>565b2dc4-7449-4b6f-81e5-769876332c1d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f7082c85-4cad-4583-8916-c4ddebc80bdf</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a9cb2192-c985-42b1-aa03-c50fb66513c5</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>4ac99e45-c8c2-4ccc-a51b-76cb2e646806</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c7fdb326-e063-4c74-9aad-0acf499d4dd7</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>75db7e36-b76d-4d6b-bebb-a7f8597414ac</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>75a66777-ac12-46da-b588-95f8e4a2fbe1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b3c9e5f4-2c4c-4317-8690-671eb1d10547</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>36de390e-18b9-4a86-8bd5-ed217f0f77e6</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b39da542-5b76-4092-a9e3-218fd95a7312</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>45a71677-842e-4025-96f3-f8b1d61d32e2</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e6af9544-c8ae-40d3-a064-77deeb7a0673</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>064218e9-140f-4057-8c20-770e7de29981</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>bf79a040-59cc-48d2-9cc2-96c9b65264af</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>84108142-f487-43bd-a3b2-04a75b8f8c30</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>eae831b7-6f90-4592-975b-9728236cc09c</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>693a596b-d976-44cb-8ce2-8220710ab521</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>05503d7d-cc78-46e8-9155-809ee44ca432</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>3328f2ff-1698-41b1-954d-d6d4fd1196f3</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b0aaf993-c41a-4388-9ab4-d6f42a4defee</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>316e5fa2-37e9-451c-a491-6ffd530944fa</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>10b7671e-4603-48a1-b2ab-e8581543104b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>4732fbfc-2ac6-4378-9541-fda5205029fe</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>8764318a-63cb-47da-a5d0-31195f054f5e</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase id="8ccbccfd-0642-4d6d-8d82-d184e61da831" discardOkResults="true" failOnError="true" failTestCaseOnErrors="true" keepSession="false" name="Tasks-ClosedUnsuccessfully-Requested during weekday, Completed during weekday; (BUT there is one or more weekends in between Request and Completion)" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="Find Cookie" id="5ccd755a-db9c-40e4-a901-faf018a7f499" disabled="true"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>c0ce29f2-7cb0-4efc-a1f0-d98a032504a6</con:targetTestCase><con:properties><con:property><con:name>qaDevCookies</con:name><con:value>[avalon.sid=s%3A54cb1cf0e4b004ec636c4d71.OKyf7Hynz6NWePZzjLl5L9azOOkbtfD5ExcpJE%2FUL48</con:value></con:property></con:properties><con:returnProperties><con:entry>qaDevCookies</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="calltestcase" name="Fetch Selling Period" id="70f1d91b-6161-451b-8668-841008279daf"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>26ebacc5-4fed-4ce3-9eb3-6e4f6e53ecc4</con:targetTestCase><con:properties><con:property><con:name>server</con:name><con:value>sqa</con:value></con:property><con:property><con:name>oppid</con:name><con:value>56d6e2e8e4b0557cd660417d</con:value></con:property><con:property><con:name>oppname</con:name><con:value>APOS-INGRAM MICRO INC_US136358960-CLIENT-FY18Q2-10</con:value></con:property></con:properties><con:returnProperties><con:entry>server</con:entry><con:entry>oppid</con:entry><con:entry>oppname</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script -CreatedOnDate" id="edc8f2a4-ef26-4ba9-846c-c4eed6bc3240"><con:settings/><con:config><script>import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.text.DateFormat;
import java.util.Date;
import java.util.TimeZone;
import java.util.*
import org.joda.time.DateTime;

DateTime dateTime = new DateTime();
long firstDayOfWeekTimestamp = dateTime.withDayOfWeek(1).getMillis();
log.info firstDayOfWeekTimestamp
// Get calendar set to current date and time
Calendar c = Calendar.getInstance();
	    c.setTime(new Date());
	    c.set(Calendar.HOUR_OF_DAY, 0);
         c.set(Calendar.MINUTE, 0);
         c.set(Calendar.SECOND, 0);
         c.set(Calendar.MILLISECOND, 0);
        
       
// Set the calendar to MONDAY of the current week
c.set(Calendar.DAY_OF_WEEK, Calendar.MONDAY); 



// substract 7 days
// If we give 7 there it will give 8 days back
c.set(Calendar.DAY_OF_MONTH, c.get(Calendar.DAY_OF_MONTH)-20);

// convert to date
Date myDate = c.getTime();

// Print dates of the current week starting on SUNDAY
DateFormat df = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ");
for (int i = 0; i &lt; 1; i++) {
    log.info(df.format(c.getTime()));
 DateFormat df1 = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS");
 log.info(df1.format(c.getTime()));
    //c.add(Calendar.DATE, 1);
    testRunner.testCase.setPropertyValue( "CreatedOnDate", (df1.format(c.getTime()).toString()+"Z"));
}</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script-FIndQuotesRequest" id="642d672e-e250-433b-9486-afce79bf68ae" disabled="true"><con:settings/><con:config><script>import groovy.json.*
def serverName = context.expand( '${#TestSuite#serverName}' )
def tenant = context.expand( '${#TestSuite#tenant}' )
def createdOnDate = context.expand( '${#TestCase#requestedTime}' )

if (tenant=="dell" &amp;&amp; serverName =="pe-internal.dev")
{

                def jsonText='''{"filter":{"flows.quoteStages.state.name":"requested","flows.quoteStages.transitions":{"$elemMatch":{"changeDate":{"$gte":"${#TestCase#requestedTime}"},"toState":"requested"}},"isBase":false,"isDraft":false},"params":{"sort":{"systemProperties.createdOn":1},"start":0,"limit":50,"columns":["_id","type","systemProperties","displayName","requestReason","flows.quoteStages.state","flows.quoteStages.target","relationships.requestedBy","relationships.assignee","expirationDate","flows.quoteStages.transitions","dueDate","amount.normalizedAmount","relationships.customer","tags","flows.quoteStages.transitions","flows.quoteStages.transitions"]},"origin":{"component":"AvalonGridDuplo","url":"#tab/app.quotes/vq=STATUS%3A%20%22Requested%22%20REQUEST-DATE%${#TestCase#requestedTime}%"},"inversesummary":false}'''
}
else
{
                def jsonText='''{"filter":{"flows.quoteStages.state.name":"requested","systemProperties.createdOn":{"$gt":"${#TestCase#requestedTime}"},"isBase":false,"isDraft":false},"params":{"sort":{"dueDate":1},"start":0,"limit":50,"columns":["_id","type","systemProperties","displayName","requestReason","flows.quoteStages.state","flows.quoteStages.target","relationships.requestedBy","relationships.assignee","expirationDate","flows.quoteStages.transitions","dueDate","amount.normalizedAmount","relationships.customer","tags","flows.quoteStages.transitions","flows.quoteStages.transitions"]},"origin":{"component":"AvalonGridDuplo","url":"#tab/app.quotes/vq=STATUS%3A%20%22Requested%7CStaged%7COn%20Hold%22%20CREATED-ON%3A%20%22%3E04-24-2016%22"},"inversesummary":false}'''
}




//{"filter":{"flows.quoteStages.state.name":"requested","systemProperties.createdOn":{"$gt":"${#TestCase#requestedTime}"},"isBase":false,"isDraft":false},"params":{"sort":{"systemProperties.createdOn":1},"start":0,"limit":50,"columns":["_id","type","systemProperties","displayName","requestReason","flows.quoteStages.state","flows.quoteStages.target","relationships.requestedBy","relationships.assignee","expirationDate","flows.quoteStages.transitions","dueDate","amount.normalizedAmount","relationships.customer","tags","flows.quoteStages.transitions","flows.quoteStages.transitions"]},"origin":{"component":"AvalonGridDuplo","url":"#tab/app.quotes/vq=STATUS%3A%20%22Requested%22%20CREATED-ON%3A%20%22%3E04-14-2016%22"},"inversesummary":false}</script></con:config></con:testStep><con:testStep type="restrequest" name="FindTask" id="a50f0755-6b46-41b7-9287-362968a66fb8"><con:settings/><con:config service="FindTask" resourcePath="/rest/api/${#TestSuite#tenant}/app.tasks::find" methodName="App.tasks::find" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="FindTask" id="72d7ffb4-c9d1-4bee-8c95-65eb37ae1f09" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Cookie" value="${#TestSuite#Cookie}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://${#TestSuite#serverName}.ssi-cloud.com</con:endpoint><con:request>{"filter":{"tags":{"$nin":[{"$regex":"^TAT_TEST"},{"$regex":"^Functional_QA"}]},"flows.taskStatus.state.name":"open","systemProperties.createdOn":{"$gte":"${#TestCase#CreatedOnDate}"}},"params":{"sort":{"systemProperties.createdOn":1},"start":0,"limit":50,"columns":["_id","type","systemProperties","displayName","taskType","dueDate","flows.taskStatus.state","flows.taskStatus.target","priority","relationships.assignee","relationships.requestedBy","systemProperties.createdOn"]},"origin":{"component":"AvalonGridDuplo"},"inversesummary":false}</con:request><con:originalUri>https://pe-internal.dev.ssi-cloud.com/rest/api/dell/app.tasks::find</con:originalUri><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="Property Transfer-TaskID" id="f779ea39-4c7f-4fda-8a93-b5b7e3f51a25"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TaskID</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>FindTask</con:sourceStep><con:sourcePath>declare namespace ns1='https://pe-internal.dev.ssi-cloud.com/rest/api/dell/app.tasks::find';
//ns1:Response[1]/ns1:data[1]/ns1:app.task[1]/ns1:e[1]/ns1:_id[1]</con:sourcePath><con:targetType>TaskID</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:targetPath/><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TaskDisplayName</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>FindTask</con:sourceStep><con:sourcePath>declare namespace ns1='https://pe-internal.dev.ssi-cloud.com/rest/api/dell/app.tasks::find';
//ns1:Response[1]/ns1:data[1]/ns1:app.task[1]/ns1:e[1]/ns1:displayName[1]</con:sourcePath><con:targetType>TaskDisplayName</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="restrequest" name="TaskDetails" id="5c4950ae-c9e7-4692-ac54-51828f3571fc"><con:settings/><con:config service="TaskDetails" resourcePath="/rest/api/${#TestSuite#tenant}/app.tasks::find" methodName="App.tasks::find" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="TaskDetails" id="a283c0b1-fe82-48ae-a333-6e53781e3cc8" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Cookie" value="${#TestSuite#Cookie}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://${#TestSuite#serverName}.ssi-cloud.com</con:endpoint><con:request>{"inversesummary":true,"filter":{"_id":"${#TestCase#TaskID}"},"params":{"start":0,"limit":1},"origin":{"component":"AvalonCollection"}}</con:request><con:originalUri>https://pe-internal.dev.ssi-cloud.com/rest/api/dell/app.tasks::find</con:originalUri><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters><entry key="inversesummary" value="true" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>inversesummary</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="Property Transfer-TimeZone" id="5961e14b-6edc-481e-a5d0-869841ad7f0c"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="true" transferChildNodes="false"><con:name>TimeZone</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>TaskDetails</con:sourceStep><con:sourcePath>declare namespace ns1='https://pe-internal.dev.ssi-cloud.com/rest/api/dell/app.tasks::find';
//ns1:Response[1]/ns1:data[1]/ns1:app.task[1]/ns1:e[1]/ns1:extensions[1]/ns1:master[1]/ns1:requestedTimeZone[1]/ns1:value[1]/ns1:displayName[1]</con:sourcePath><con:targetType>TimeZone</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:targetPath/><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="restrequest" name="FindActivities" id="90325f80-7070-41df-af6e-186d24068fdb"><con:settings/><con:config service="FindActivities" resourcePath="/rest/api/dell/core.activities::getrhpactivities" methodName="Core.activities::getrhpactivities" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="FindActivities" id="ec32ed71-dac8-4f9f-8863-509201de0075" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Cookie" value="${#TestSuite#Cookie}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://${#TestSuite#serverName}.ssi-cloud.com</con:endpoint><con:request>{"params":{"sort":{"systemProperties.createdOn":-1},"start":0,"limit":50,"columns":["relatedObjects"]},"origin":{"component":"Duplo_TimelineStream","url":"#tab/core.activities"},"inversesummary":false,"type":"app.task","key":"${#TestCase#TaskID}","filter":{"crudBased":false},"configParams":{"includeNotes":true}}</con:request><con:originalUri>https://qa-internal.dev.ssi-cloud.com/rest/api/dell/core.activities::getrhpactivities</con:originalUri><con:credentials><con:username>maria.gomez@dell.com</con:username><con:password>passwordone</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="Property Transfer-RequestedDateTime" id="fbe7b1e2-f4cb-405b-8580-514a626c73ff"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>RequestedTime</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>FindActivities</con:sourceStep><con:sourcePath>declare namespace ns1='https://qa-internal.dev.ssi-cloud.com/rest/api/dell/core.activities::getrhpactivities';
//ns1:Response[1]/ns1:data[1]/ns1:core.activity[1]/ns1:e[1]/ns1:systemProperties[1]/ns1:createdOn[1]</con:sourcePath><con:targetType>requestedTime</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:targetPath/><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="restrequest" name="ClosedUnsuccessfully-Task" id="f09da870-841a-4d5f-b8a5-d03b8dba5ad5"><con:settings/><con:config service="CloseUnsuccessfully" resourcePath="/rest/api/${#TestSuite#tenant}/app.tasks/${#TestCase#TaskID}::closeUnsuccessfullyTask" methodName="5732d41ce4b0e839c0ec0e36::closeUnsuccessfullyTask" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="ClosedUnsuccessfully-Task" id="c78b4682-ba1c-479a-9b40-cc1203002368" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Cookie" value="${#TestSuite#Cookie}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://${#TestSuite#serverName}.ssi-cloud.com</con:endpoint><con:request>{"notes":[{"relationships":[],"inverseSummary":{},"extensions":{"master":{},"tenant":{},"type":false},"externalIds":[],"dq":[],"tags":[],"type":"core.note","text":"APITesting","attachment":[],"notes":[]}],"_id":"","type":"app.task.closeunsuccessfully.input","closeUnsuccessfullyReason":{"displayName":"Other","name":"other","type":"app.lookup","key":"51a67a6316a8afd0f000c6e9"},"inversesummary":true,"extinversesummary":true,"origin":{"url":"#detail/app.tasks/${#TestCase#TaskID}"}}</con:request><con:originalUri>https://sqa-internal.dev.ssi-cloud.com/rest/api/dell/app.tasks/573437e4e4b0291987c26f02::closeUnsuccessfullyTask</con:originalUri><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters>
  <con:entry key="inversesummary" value="true"/>
  <con:entry key="extinversesummary" value="true"/>
</con:parameters><con:parameterOrder><con:entry>inversesummary</con:entry><con:entry>extinversesummary</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="CompleteTask" id="f782289c-be89-420a-952f-bd8a960efbd6" disabled="true"><con:settings/><con:config service="CompleteTask" resourcePath="/rest/api/${#TestSuite#tenant}/app.tasks/${#TestCase#TaskID}::completeTask" methodName="511a69f263165f8e0f05266e::completeTask" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CompleteTask" id="b101cbcc-5363-41ee-bc9f-5eb57ab80861" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Cookie" value="${#TestSuite#Cookie}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://${#TestSuite#serverName}.ssi-cloud.com</con:endpoint><con:request>{"detail":{"_id":"${#TestCase#TaskID}","type":"app.task","displayName":"${#TestCase#TaskDisplayName}"},"selections":[],"inversesummary":true,"extinversesummary":true,"origin":{}}</con:request><con:originalUri>https://pe-internal.dev.ssi-cloud.com/rest/api/dell/app.tasks/::completeTask</con:originalUri><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters>
  <con:entry key="inversesummary" value="true"/>
  <con:entry key="extinversesummary" value="true"/>
</con:parameters><con:parameterOrder><con:entry>inversesummary</con:entry><con:entry>extinversesummary</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="TaskDetails-Completed" id="271e94b6-4f1e-4005-bfba-f4da09b10101"><con:settings/><con:config service="TaskDetails" resourcePath="/rest/api/${#TestSuite#tenant}/app.tasks::find" methodName="App.tasks::find" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="TaskDetails-Completed" id="a283c0b1-fe82-48ae-a333-6e53781e3cc8" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Cookie" value="${#TestSuite#Cookie}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://${#TestSuite#serverName}.ssi-cloud.com</con:endpoint><con:request>{"inversesummary":true,"filter":{"_id":"${#TestCase#TaskID}"},"params":{"start":0,"limit":1},"origin":{"component":"AvalonCollection","url":"#tab/app.tasks"}}</con:request><con:originalUri>https://qa-internal.dev.ssi-cloud.com/rest/api/dell/app.tasks::find</con:originalUri><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters><entry key="inversesummary" value="true" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>inversesummary</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="Property Transfer-CompletedDate" id="cdabd7eb-bff2-49c3-b77e-16fefbdb1948"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>CompletedDate</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>TaskDetails-Completed</con:sourceStep><con:sourcePath>declare namespace ns1='https://qa-internal.dev.ssi-cloud.com/rest/api/dell/app.tasks::find';
//ns1:Response[1]/ns1:data[1]/ns1:app.task[1]/ns1:e[1]/ns1:flows[1]/ns1:taskStatus[1]/ns1:transitions[1]/ns1:e[2]/ns1:changeDate[1]</con:sourcePath><con:targetType>ChangeDate</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:targetPath/><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TatTotal</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>TaskDetails-Completed</con:sourceStep><con:sourcePath>declare namespace ns1='https://qa-internal.dev.ssi-cloud.com/rest/api/dell/app.tasks::find';
//ns1:Response[1]/ns1:data[1]/ns1:app.task[1]/ns1:e[1]/ns1:extensions[1]/ns1:master[1]/ns1:tatTotal[1]/ns1:value[1]</con:sourcePath><con:targetType>TatTotal</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TatNet</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>TaskDetails-Completed</con:sourceStep><con:sourcePath>declare namespace ns1='https://qa-internal.dev.ssi-cloud.com/rest/api/dell/app.tasks::find';
//ns1:Response[1]/ns1:data[1]/ns1:app.task[1]/ns1:e[1]/ns1:extensions[1]/ns1:master[1]/ns1:tatNet[1]/ns1:value[1]</con:sourcePath><con:targetType>TatNet</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script-TatCalculations" id="59a6b907-f6ea-4217-aca0-0d336a8a7dcc" disabled="true"><con:settings/><con:config><script><![CDATA[import java.text.SimpleDateFormat;
import java.util.Date;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.text.DateFormat;
import java.util.TimeZone;
import java.util.concurrent.TimeUnit;
import java.lang.Long

def createdOnDate = context.expand( '${#TestCase#requestedTime}' )
def completedDate = context.expand( '${#TestCase#ChangeDate}' )

String string = createdOnDate;
String string1 = completedDate;


SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ");
SimpleDateFormat output = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS");

//requested Date
Date date = sdf.parse(createdOnDate.replaceAll("Z", "+0000"));
String nTime = output.format(date);

myDate = Date.parse("yyyy-MM-dd'T'HH:mm:ss.SSS", nTime) ;
//log.info("string: " + string);
log.info("date: " + nTime);

//change Date
Date date1 = sdf.parse(completedDate.replaceAll("Z", "+0000"));
log.info("date1: " + date1);

String nTime1 = output.format(date1);
myDate1 = Date.parse("yyyy-MM-dd'T'HH:mm:ss.SSS", nTime1) ;
log.info("myDate1: " + myDate1);
log.info("date: " + nTime1);


use(groovy.time.TimeCategory) {
    def duration = date1 - date
    log.info ("Timediff::" + duration)
    log.info "Days: ${duration.days}, Hours: ${duration.hours},Minutes: ${duration.minutes},Seconds: ${duration.seconds}"
    testRunner.testCase.setPropertyValue( "Timediff", duration.toString());
     def minutes=0
     def seconds=0

   StringBuilder sb = new StringBuilder(64);
        sb.append(duration.days);
        sb.append(" Days ");
        sb.append(duration.hours);
        sb.append(" Hours ");
      

        if (duration.minutes==0 && duration.seconds>0){
           minutes=duration.minutes+1
        	 sb.append(duration.minutes);
        	 sb.append(" Minutes ");
        	 seconds=0
        	 sb.append(seconds);
           sb.append(" Seconds");
        }
       else if (duration.minutes>0 && duration.seconds>0 && duration.seconds<=30){
	      sb.append(duration.minutes);
        	 sb.append(" Minutes ");
        	 seconds=0
        	 sb.append(seconds);
           sb.append(" Seconds");
        }
        else if (duration.minutes>0 && duration.seconds>30){
        	minutes=duration.minutes+1
        	 sb.append(minutes);
        	 sb.append(" Minutes ");
        	seconds=0
        	 sb.append(seconds);
           sb.append(" Seconds");
        	}
              
log.info("sbTime::" + sb.toString())
 testRunner.testCase.setPropertyValue( "TimediffAfterCal", sb.toString());

    
}





/*
DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS");
//get current date time with Date()
Date date2 = new Date();
log.info(dateFormat.format(date2));
//log.info firstDayOfWeekTimestamp
// Get calendar set to current date and time
Calendar c = Calendar.getInstance();
 	    c.set(Calendar.HOUR_OF_DAY, 0);
         c.set(Calendar.MINUTE, 0);
         c.set(Calendar.SECOND, 0);
         c.set(Calendar.MILLISECOND, 0);
         
         log.info c.getTime();

    
t2=(dateFormat.format(c.getTime()))
t3=(dateFormat.parse(t2))
Timeinhours=(t3 - myDate1);
log.info ("Time: " + Timeinhours)




//DateDifferentExample(nTime,nTime1)





Long DateDifferentExample(String dateStart,String dateStop) {

		//HH converts hour in 24 hours format (0-23), day calculation
		SimpleDateFormat format = new SimpleDateFormat("MM/dd/yyyy HH:mm:ss.SSS");

		Date d1 = null;
		Date d2 = null;

	
			d1 = format.parse(dateStart);
			d2 = format.parse(dateStop);

			//in milliseconds
			long diff = d2.getTime() - d1.getTime();

			 long days = TimeUnit.MILLISECONDS.toDays(diff);
        diff -= TimeUnit.DAYS.toMillis(days);
        long hours = TimeUnit.MILLISECONDS.toHours(diff);
        diff -= TimeUnit.HOURS.toMillis(hours);
        long minutes = TimeUnit.MILLISECONDS.toMinutes(diff);
        diff -= TimeUnit.MINUTES.toMillis(minutes);
        long seconds = TimeUnit.MILLISECONDS.toSeconds(diff);

        StringBuilder sb = new StringBuilder(64);
   
        sb.append(hours);
        sb.append(" Hours ");
        sb.append(minutes);
        sb.append(" Minutes "); 
        sb.append(seconds);
        sb.append(" Seconds");
        
        log.info("sbT::"+ sb.toString())
        testRunner.testCase.setPropertyValue( "tatNetmillies", sb.toString());

			log.info(diffDays + " days, ");
			log.info(diffHours + " hours, ");
			log.info(diffMinutes + " minutes, ");
			log.info(diffSeconds + " seconds.");

		
	}
*/
]]></script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script-TAT Calculations" id="b9cc715c-9010-4d4a-9901-c445047865ff" disabled="true"><con:settings/><con:config><script><![CDATA[import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.TimeZone;
import java.util.concurrent.TimeUnit;
def quoteID = context.expand( '${#TestCase#QuoteID}' )
def timeZone = context.expand( '${#TestCase#TimeZone}' )
def requestedTime = context.expand( '${#TestCase#requestedTime}' )
def changeDate = context.expand( '${#TestCase#ChangeDate}' )


def turnaroundTime = context.expand( '${#TestCase#TurnaroundTime}' )
def tatNet = context.expand( '${#TestCase#TatNet}' )
def tatTotal = context.expand( '${#TestCase#TatTotal}' )
def long minutes1 = tatTotal.toLong()
def long tatTotalmillies = minutes1 * 60 * 1000;
def long tatNetmillies = minutes1 * 60 * 1000;

//getWorkingDaysBetweenTwoDates( requestedTime,endDate)

//getDurationBreakdown(millies)

getDurationBreakdownMinutes(tatTotalmillies)
getDurationBreakdownMinutes1(tatNetmillies)


/*def String getDurationBreakdown(long millies)
    {
        if(millies < 0)
        {
            throw new IllegalArgumentException("Duration must be greater than zero!");
        }

        long days = TimeUnit.MILLISECONDS.toDays(millies);
        millies -= TimeUnit.DAYS.toMillis(days);
        long hours = TimeUnit.MILLISECONDS.toHours(millies);
        millies -= TimeUnit.HOURS.toMillis(hours);
        long minutes = TimeUnit.MILLISECONDS.toMinutes(millies);
        millies -= TimeUnit.MINUTES.toMillis(minutes);
        long seconds = TimeUnit.MILLISECONDS.toSeconds(millies);

        StringBuilder sb = new StringBuilder(64);
        sb.append(days);
        sb.append(" Days ");
        sb.append(hours);
        sb.append(" Hours ");
      

        if (minutes==0 && seconds>0){
        	 minutes=minutes+1
        	 sb.append(minutes);
        	 sb.append(" Minutes ");
        	 seconds=0
        	 sb.append(seconds);
           sb.append(" Seconds");
        }
       else if (minutes>0 && seconds>0 && seconds<=30){
	      sb.append(minutes);
        	 sb.append(" Minutes ");
        	 seconds=0
        	 sb.append(seconds);
           sb.append(" Seconds");
        }
        else if (minutes>0 && seconds>30){
        	minutes=minutes+1
        	 sb.append(minutes);
        	 sb.append(" Minutes ");
        	 seconds=0
        	 sb.append(seconds);
           sb.append(" Seconds");
        	}
              
log.info(sb.toString())
       testRunner.testCase.setPropertyValue( "TatfromRestTimegap", sb.toString());
    }*/

def String getDurationBreakdownMinutes(long tatTotalmillies)
    {
        if(tatTotalmillies < 0)
        {
            throw new IllegalArgumentException("Duration must be greater than zero!");
        }

        long days = TimeUnit.MILLISECONDS.toDays(tatTotalmillies);
        tatTotalmillies -= TimeUnit.DAYS.toMillis(days);
        long hours = TimeUnit.MILLISECONDS.toHours(tatTotalmillies);
        tatTotalmillies -= TimeUnit.HOURS.toMillis(hours);
        long minutes = TimeUnit.MILLISECONDS.toMinutes(tatTotalmillies);
        tatTotalmillies -= TimeUnit.MINUTES.toMillis(minutes);
        long seconds = TimeUnit.MILLISECONDS.toSeconds(tatTotalmillies);

        StringBuilder sb = new StringBuilder(64);
        sb.append(days);
        sb.append(" Days ");
        sb.append(hours);
        sb.append(" Hours ");
        sb.append(minutes);
        sb.append(" Minutes "); 
        sb.append(seconds);
        sb.append(" Seconds");
        
        log.info(sb.toString())
        testRunner.testCase.setPropertyValue( "TatfromTatTotal", sb.toString());
    }

def String getDurationBreakdownMinutes1(long tatNetmillies)
    {
        if(tatNetmillies < 0)
        {
            throw new IllegalArgumentException("Duration must be greater than zero!");
        }

        long days = TimeUnit.MILLISECONDS.toDays(tatNetmillies);
        tatNetmillies -= TimeUnit.DAYS.toMillis(days);
        long hours = TimeUnit.MILLISECONDS.toHours(tatNetmillies);
        tatNetmillies -= TimeUnit.HOURS.toMillis(hours);
        long minutes = TimeUnit.MILLISECONDS.toMinutes(tatNetmillies);
        tatNetmillies -= TimeUnit.MINUTES.toMillis(minutes);
        long seconds = TimeUnit.MILLISECONDS.toSeconds(tatNetmillies);

        StringBuilder sb = new StringBuilder(64);
        sb.append(days);
        sb.append(" Days ");
        sb.append(hours);
        sb.append(" Hours ");
        sb.append(minutes);
        sb.append(" Minutes "); 
        sb.append(seconds);
        sb.append(" Seconds");
        
        log.info(sb.toString())
        testRunner.testCase.setPropertyValue( "tatNetmillies", sb.toString());
    }




    ]]></script></con:config></con:testStep><con:testStep type="groovy" name="Assertion For TatTotal and TatNet" id="d0c8a2d2-a514-47b3-bb4c-5ac638639ff3" disabled="true"><con:settings/><con:config><script>def tatfromTatTotal = context.expand( '${#TestCase#TatfromTatTotal}' )
def tatfromRestTimegap = context.expand( '${#TestCase#TatfromRestTimegap}' )
def tatNetmillies = context.expand( '${#TestCase#tatNetmillies}' )
def timediffAfterCal = context.expand( '${#TestCase#TimediffAfterCal}' )




assert tatfromTatTotal==timediffAfterCal
assert tatNetmillies==timediffAfterCal</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script 5" id="b4b15431-eca8-4b87-8d9e-cb8c7f7f0a98" disabled="true"><con:settings/><con:config><script>import java.text.SimpleDateFormat;
import java.util.Date;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.text.DateFormat;
import java.util.TimeZone;
import java.util.concurrent.TimeUnit;
import java.lang.Long
def createdOnDate = context.expand( '${#TestCase#requestedTime}' )
def completedDate = context.expand( '${#TestCase#ChangeDate}' )

//log.info createdOnDate
//log.info completedDate

//String string = createdOnDate;
//String string1 = completedDate;

SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ");
SimpleDateFormat output = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS");

//createdOnDate
Date date = sdf.parse(createdOnDate.replaceAll("Z", "+0000"));
String nTime = output.format(date);
myDate = Date.parse("yyyy-MM-dd'T'HH:mm:ss.SSS", nTime) ;
//log.info("string: " + string);
log.info("date: " + nTime);

//completedDate
Date date1 = sdf.parse(completedDate.replaceAll("Z", "+0000"));
log.info("date1: " + date1);

String nTime1 = output.format(date1);
myDate1 = Date.parse("yyyy-MM-dd'T'HH:mm:ss.SSS", nTime1) ;
log.info("myDate1: " + myDate1);
log.info("date: " + nTime1);

DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS");
//get current date time with Date()
Date date2 = new Date();
log.info(dateFormat.format(date2));
//log.info firstDayOfWeekTimestamp
// Get calendar set to current date and time
Calendar c = Calendar.getInstance();
 	    c.set(Calendar.HOUR_OF_DAY, 0);
         c.set(Calendar.MINUTE, 0);
         c.set(Calendar.SECOND, 0);
         c.set(Calendar.MILLISECOND, 0);
         
         log.info c.getTime();


    
t2=(dateFormat.format(c.getTime()))
t3=(dateFormat.parse(t2))
Timeinhours=(myDate1 - t3);
log.info ("Time: " + Timeinhours);


DateDifferentExample(nTime1,t2)





Long DateDifferentExample(String dateStart,String dateStop) {

		//HH converts hour in 24 hours format (0-23), day calculation
		SimpleDateFormat format = new SimpleDateFormat("MM/dd/yyyy HH:mm:ss");

		Date d1 = null;
		Date d2 = null;

		try {
			d1 = format.parse(dateStart);
			d2 = format.parse(dateStop);

			//in milliseconds
			long diff = d2.getTime() - d1.getTime();

			long diffSeconds = diff / 1000 % 60;
			long diffMinutes = diff / (60 * 1000) % 60;
			long diffHours = diff / (60 * 60 * 1000) % 24;
			long diffDays = diff / (24 * 60 * 60 * 1000);

			log.info(diffDays + " days, ");
			log.info(diffHours + " hours, ");
			log.info(diffMinutes + " minutes, ");
			log.info(diffSeconds + " seconds.");

		} catch (Exception e) {
			e.printStackTrace();
		}

	}

</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script" id="40440fc4-4b48-42e7-b1d9-05032954493a" disabled="true"><con:settings/><con:config><script>import java.text.SimpleDateFormat;
import java.util.Date;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.text.DateFormat;
import java.util.TimeZone;
import java.util.concurrent.TimeUnit;
import java.lang.Long

def createdOnDate = context.expand( '${#TestCase#requestedTime}' )
def completedDate = context.expand( '${#TestCase#ChangeDate}' )


SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ");
SimpleDateFormat output = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS");

//createdOnDate
Date date = sdf.parse(createdOnDate.replaceAll("Z", "+0000"));

//completedDate
Date date1 = sdf.parse(completedDate.replaceAll("Z", "+0000"));


days(date,date1)


 Long days(Date start, Date end){
    //Ignore argument check

    Calendar c1 = Calendar.getInstance();
    c1.setTime(start);
    int w1 = c1.get(Calendar.DAY_OF_WEEK);
    c1.add(Calendar.DAY_OF_WEEK, -w1);

    Calendar c2 = Calendar.getInstance();
    c2.setTime(end);
    int w2 = c2.get(Calendar.DAY_OF_WEEK);
    c2.add(Calendar.DAY_OF_WEEK, -w2);

    //end Saturday to start Saturday 
    long days = (c2.getTimeInMillis()-c1.getTimeInMillis())/(1000*60*60*24);
    long daysWithoutWeekendDays = days-(days*2/7);

    // Adjust days to add on (w2) and days to subtract (w1) so that Saturday
    // and Sunday are not included
    if (w1 == Calendar.SUNDAY &amp;&amp; w2 != Calendar.SATURDAY) {
        w1 = Calendar.MONDAY;
    } else if (w1 == Calendar.SATURDAY &amp;&amp; w2 != Calendar.SUNDAY) {
        w1 = Calendar.FRIDAY;
    } 

    if (w2 == Calendar.SUNDAY) {
        w2 = Calendar.MONDAY;
    } else if (w2 == Calendar.SATURDAY) {
        w2 = Calendar.FRIDAY;
    }
   log.info("days: " + (daysWithoutWeekendDays-w1+w2));
    //return daysWithoutWeekendDays-w1+w2;
}</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script-FormatRequestedDate" id="3a64e82e-5a10-41b0-889d-d191715d97a6"><con:settings/><con:config><script>import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.text.DateFormat;
import java.util.Date;
import java.util.TimeZone;


def requestedTime = context.expand( '${#TestCase#requestedTime}' )
log.info requestedTime

String string = requestedTime;
String defaultTimezone = TimeZone.getDefault().getID();
SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ");
SimpleDateFormat output = new SimpleDateFormat("yyyy-MM-dd");
//Date d = sdf.parse(time);

Date date = sdf.parse(string.replaceAll("Z", "+0000"));
String nTime = output.format(date);
log.info("string: " + string);
log.info("date: " + date);
log.info("nTime: " + nTime);
testRunner.testCase.setPropertyValue( "FormatedRequestedDate", nTime.toString());</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script- FormatChangeDate" id="de1d7d95-8a76-4ece-8124-2a7321f6f983"><con:settings/><con:config><script>import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.text.DateFormat;
import java.util.Date;
import java.util.TimeZone;
def changeDate = context.expand( '${#TestCase#ChangeDate}' )

String string = changeDate;
//String defaultTimezone = TimeZone.getDefault().getID();
SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ");
SimpleDateFormat output = new SimpleDateFormat("yyyy-MM-dd");
//Date d = sdf.parse(time);

Date date = sdf.parse(string.replaceAll("Z", "+0000"));
String nTime = output.format(date);
log.info("string: " + string);
log.info("date: " + date);
log.info("nTime: " + nTime);
testRunner.testCase.setPropertyValue( "FormatedChangeDate", nTime.toString());</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script 52" id="bffa7c07-88a8-40f1-b4f0-d7330910114c"><con:settings/><con:config><script>import java.text.SimpleDateFormat;
import java.util.Date;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.text.DateFormat;
import java.util.TimeZone;
import java.util.concurrent.TimeUnit;

def changeDate = context.expand( '${#TestCase#ChangeDate}' )
def requestedTime = context.expand( '${#TestCase#requestedTime}' )
log.info requestedTime
log.info changeDate

SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ");
SimpleDateFormat output = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS");

//requested Date
Date date = sdf.parse(requestedTime.replaceAll("Z", "+0000"));
String nTime = output.format(date);
myDate = Date.parse("yyyy-MM-dd'T'HH:mm:ss.SSS", nTime) ;
//log.info("string: " + string);
log.info("date: " + nTime);

//change Date
Date date1 = sdf.parse(changeDate.replaceAll("Z", "+0000"));
log.info("date1: " + date1);

String nTime1 = output.format(date1);
myDate1 = Date.parse("yyyy-MM-dd'T'HH:mm:ss.SSS", nTime1) ;
log.info("myDate1: " + myDate1);
log.info("date1: " + nTime1);

getTimeDiff(date,date1)

def getTimeDiff(Date dateOne, Date dateTwo) {
            String diff = "";
            long timeDiff = Math.abs(dateOne.getTime() - dateTwo.getTime());
            log.info ("TimeDiff : " + timeDiff);
            testRunner.testCase.setPropertyValue( "TimeDiffMilliesFromDate", timeDiff.toString())
              return timeDiff;
    }

</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script 51" id="6bdbdfa8-063f-453a-8ddc-a95dd24aa38b"><con:settings/><con:config><script><![CDATA[import java.text.SimpleDateFormat;
import java.util.Date;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.text.DateFormat;
import java.util.TimeZone;
import java.util.concurrent.TimeUnit;

def timeDiffMilliesFromDate = context.expand( '${#TestCase#TimeDiffMilliesFromDate}' )

Long timeDiffMilliesFromDate1 = Long.valueOf(timeDiffMilliesFromDate);

getDurationBreakdown(timeDiffMilliesFromDate1)


def String getDurationBreakdown(long millies)
    {
        if(millies < 0)
        {
            throw new IllegalArgumentException("Duration must be greater than zero!");
        }

        long days = TimeUnit.MILLISECONDS.toDays(millies);
        millies -= TimeUnit.DAYS.toMillis(days);
        long hours = TimeUnit.MILLISECONDS.toHours(millies);
        millies -= TimeUnit.HOURS.toMillis(hours);
        long minutes = TimeUnit.MILLISECONDS.toMinutes(millies);
        millies -= TimeUnit.MINUTES.toMillis(minutes);
        long seconds = TimeUnit.MILLISECONDS.toSeconds(millies);

        StringBuilder sb = new StringBuilder(64);

      
        sb.append(hours);
        sb.append(" Hours ");
       if (minutes==0 && seconds>0){
        	 minutes=minutes+1
        	 sb.append(minutes);
        	 sb.append(" Minutes ");
        	 seconds=0
        	 sb.append(seconds);
           sb.append(" Seconds");
        }
       else if (minutes>0 && seconds>0 && seconds<=30){
       	minutes=minutes
	      sb.append(minutes);
        	 sb.append(" Minutes ");
        	 seconds=0
        	 sb.append(seconds);
           sb.append(" Seconds");
        }
        else if (minutes>0 && seconds>30){
        	minutes=minutes+1
        	 sb.append(minutes);
        	 sb.append(" Minutes ");
        	 seconds=0
        	 sb.append(seconds);
           sb.append(" Seconds");
        	}
            
log.info(sb.toString())
       testRunner.testCase.setPropertyValue( "MilliesFromDate", sb.toString());
    }]]></script></con:config></con:testStep><con:testStep type="groovy" name="BusinessDay Calculation" id="6693aa1c-2be8-4658-9a42-648b27124c92"><con:settings/><con:config><script>import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.text.DateFormat;
import java.util.Date;
import java.util.TimeZone;
import java.util.*
import org.joda.time.DateTime;

def changeDate = context.expand( '${#TestCase#ChangeDate}' )
def formatedRequestedDate = context.expand( '${#TestCase#FormatedRequestedDate}' )
def formatedChangeDate = context.expand( '${#TestCase#FormatedChangeDate}' )

SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd");
String dateInString = formatedRequestedDate
log.info dateInString
Date date = formatter.parse(dateInString);
log.info(date);
log.info(formatter.format(date));
def projectContext = context.testCase.testSuite.project.context
projectContext.date = date


String dateInString1 = formatedChangeDate		
		
Date date1 = formatter.parse(dateInString1);
log.info(date1);
log.info(formatter.format(date1));

projectContext.date1 = date1

def date3 = projectContext.date1
def date2 = projectContext.date


days(date2,date3)




//Business Days Calculation

 long days(Date start, Date end){
    //Ignore argument check

    Calendar c1 = Calendar.getInstance();
    c1.setTime(start);
    int w1 = c1.get(Calendar.DAY_OF_WEEK);
    c1.add(Calendar.DAY_OF_WEEK, -w1);

    Calendar c2 = Calendar.getInstance();
    c2.setTime(end);
    int w2 = c2.get(Calendar.DAY_OF_WEEK);
    c2.add(Calendar.DAY_OF_WEEK, -w2);

    //end Saturday to start Saturday 
    long days = (c2.getTimeInMillis()-c1.getTimeInMillis())/(1000*60*60*24);
    long daysWithoutWeekendDays = days-(days*2/7);

    // Adjust days to add on (w2) and days to subtract (w1) so that Saturday
    // and Sunday are not included
    if (w1 == Calendar.SUNDAY &amp;&amp; w2 != Calendar.SATURDAY) {
        w1 = Calendar.MONDAY;
    } else if (w1 == Calendar.SATURDAY &amp;&amp; w2 != Calendar.SUNDAY) {
        w1 = Calendar.FRIDAY;
    } 

    if (w2 == Calendar.SUNDAY) {
        w2 = Calendar.MONDAY;
    } else if (w2 == Calendar.SATURDAY) {
        w2 = Calendar.FRIDAY;
    }
    testRunner.testCase.setPropertyValue( "BusinessDays", (daysWithoutWeekendDays-w1+w2-1).toString());
    return daysWithoutWeekendDays-w1+w2-1;
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script-TAT Calculations1" id="946eee70-c153-49e2-a348-84c9cf29db5d"><con:settings/><con:config><script><![CDATA[import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.TimeZone;
import java.util.concurrent.TimeUnit;
def quoteID = context.expand( '${#TestCase#QuoteID}' )
def timeZone = context.expand( '${#TestCase#TimeZone}' )
def requestedTime = context.expand( '${#TestCase#requestedTime}' )
def changeDate = context.expand( '${#TestCase#ChangeDate}' )
def timeGap = context.expand( '${#TestCase#TimeGap}' )
//def long millies =timeGap.toLong()
def turnaroundTime = context.expand( '${#TestCase#TurnaroundTime}' )
def tatNet = context.expand( '${#TestCase#TatNet}' )
def tatTotal = context.expand( '${#TestCase#TatTotal}' )
def long minutes1 = tatTotal.toLong()
def long tatTotalmillies = minutes1 * 60 * 1000;
def long tatNetmillies = minutes1 * 60 * 1000;
def businessDays = context.expand( '${#TestCase#BusinessDays}' )
def dateDiffAfterCal = context.expand( '${#TestCase#DateDiffAfterCal}' )
def milliesFromDate = context.expand( '${#TestCase#MilliesFromDate}' )


def FinalTATCal = businessDays + " Days " + milliesFromDate
log.info (" FinalTATCal: " + FinalTATCal)
testRunner.testCase.setPropertyValue( "FinalTATCal", FinalTATCal.toString());

//getWorkingDaysBetweenTwoDates( requestedTime,endDate)

//getDurationBreakdown(millies)

getDurationBreakdownMinutes(tatTotalmillies)
getDurationBreakdownMinutes1(tatNetmillies)


def String getDurationBreakdown(long millies)
    {
        if(millies < 0)
        {
            throw new IllegalArgumentException("Duration must be greater than zero!");
        }

        long days = TimeUnit.MILLISECONDS.toDays(millies);
        millies -= TimeUnit.DAYS.toMillis(days);
        long hours = TimeUnit.MILLISECONDS.toHours(millies);
        millies -= TimeUnit.HOURS.toMillis(hours);
        long minutes = TimeUnit.MILLISECONDS.toMinutes(millies);
        millies -= TimeUnit.MINUTES.toMillis(minutes);
        long seconds = TimeUnit.MILLISECONDS.toSeconds(millies);

        StringBuilder sb = new StringBuilder(64);
   	   sb.append(days);
        sb.append(" Days ");
        sb.append(hours);
        sb.append(" Hours ");
      

        if (minutes==0 && seconds>0){
        	 minutes=minutes+1
        	 sb.append(minutes);
        	 sb.append(" Minutes ");
        	 seconds=0
        	 sb.append(seconds);
           sb.append(" Seconds");
        }
       else if (minutes>0 && seconds>0 && seconds<=30){
	      sb.append(minutes);
        	 sb.append(" Minutes ");
        	 seconds=0
        	 sb.append(seconds);
           sb.append(" Seconds");
        }
        else if (minutes>0 && seconds>30){
        	minutes=minutes+1
        	 sb.append(minutes);
        	 sb.append(" Minutes ");
        	 seconds=0
        	 sb.append(seconds);
           sb.append(" Seconds");
        	}
              
log.info(sb.toString())
       testRunner.testCase.setPropertyValue( "TatfromRestTimegap", sb.toString());
    }

def String getDurationBreakdownMinutes(long tatTotalmillies)
    {
        if(tatTotalmillies < 0)
        {
            throw new IllegalArgumentException("Duration must be greater than zero!");
        }

        long days = TimeUnit.MILLISECONDS.toDays(tatTotalmillies);
        tatTotalmillies -= TimeUnit.DAYS.toMillis(days);
        long hours = TimeUnit.MILLISECONDS.toHours(tatTotalmillies);
        tatTotalmillies -= TimeUnit.HOURS.toMillis(hours);
        long minutes = TimeUnit.MILLISECONDS.toMinutes(tatTotalmillies);
        tatTotalmillies -= TimeUnit.MINUTES.toMillis(minutes);
        long seconds = TimeUnit.MILLISECONDS.toSeconds(tatTotalmillies);

        StringBuilder sb = new StringBuilder(64);
        sb.append(days);
        sb.append(" Days ");
        sb.append(hours);
        sb.append(" Hours ");
        sb.append(minutes);
        sb.append(" Minutes "); 
        sb.append(seconds);
        sb.append(" Seconds");
        
        log.info(sb.toString())
        testRunner.testCase.setPropertyValue( "TatfromTatTotal", sb.toString());
    }

def String getDurationBreakdownMinutes1(long tatNetmillies)
    {
        if(tatNetmillies < 0)
        {
            throw new IllegalArgumentException("Duration must be greater than zero!");
        }

        long days = TimeUnit.MILLISECONDS.toDays(tatNetmillies);
        tatNetmillies -= TimeUnit.DAYS.toMillis(days);
        long hours = TimeUnit.MILLISECONDS.toHours(tatNetmillies);
        tatNetmillies -= TimeUnit.HOURS.toMillis(hours);
        long minutes = TimeUnit.MILLISECONDS.toMinutes(tatNetmillies);
        tatNetmillies -= TimeUnit.MINUTES.toMillis(minutes);
        long seconds = TimeUnit.MILLISECONDS.toSeconds(tatNetmillies);

        StringBuilder sb = new StringBuilder(64);
        sb.append(days);
        sb.append(" Days ");
        sb.append(hours);
        sb.append(" Hours ");
        sb.append(minutes);
        sb.append(" Minutes "); 
        sb.append(seconds);
        sb.append(" Seconds");
        
        log.info(sb.toString())
        testRunner.testCase.setPropertyValue( "tatNetmillies", sb.toString());
    }


    ]]></script></con:config></con:testStep><con:testStep type="groovy" name="Assertion For TatTotal and TatNet1" id="9c6cfdea-d81b-435d-98ff-be932940cadb"><con:settings/><con:config><script>def tatfromTatTotal = context.expand( '${#TestCase#TatfromTatTotal}' )
def tatNetmillies = context.expand( '${#TestCase#tatNetmillies}' )
def finalTATCal = context.expand( '${#TestCase#FinalTATCal}' )




assert tatfromTatTotal==finalTATCal
assert tatNetmillies==finalTATCal</script></con:config></con:testStep><con:properties><con:property><con:name>ChangeDate</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2016-06-03T06:58:41.286Z</con:value></con:property><con:property><con:name>requestedTime</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2016-05-12T07:59:32.576Z</con:value></con:property><con:property><con:name>TaskDisplayName</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Task547</con:value></con:property><con:property><con:name>TaskID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">573437e4e4b0291987c26f02</con:value></con:property><con:property><con:name>TatfromTatTotal</con:name><con:value>15 Days 22 Hours 59 Minutes 0 Seconds</con:value></con:property><con:property><con:name>TatNet</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">22979</con:value></con:property><con:property><con:name>tatNetmillies</con:name><con:value>15 Days 22 Hours 59 Minutes 0 Seconds</con:value></con:property><con:property><con:name>TatTotal</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">22979</con:value></con:property><con:property><con:name>TimeZone</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">UTC+5:30</con:value></con:property><con:property><con:name>FormatedRequestedDate</con:name><con:value>2016-05-12</con:value></con:property><con:property><con:name>FormatedChangeDate</con:name><con:value>2016-06-03</con:value></con:property><con:property><con:name>BusinessDays</con:name><con:value>15</con:value></con:property><con:property><con:name>TimeDiffMilliesFromDate</con:name><con:value>1897148710</con:value></con:property><con:property><con:name>MilliesFromDate</con:name><con:value>22 Hours 59 Minutes 0 Seconds</con:value></con:property><con:property><con:name>FinalTATCal</con:name><con:value>15 Days 22 Hours 59 Minutes 0 Seconds</con:value></con:property><con:property><con:name>CreatedOnDate</con:name><con:value>2016-05-10T00:00:00.000Z</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>6bda5a34-450f-427a-af64-6c06a948395d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c7cd9b4b-e847-484c-aef7-6b7380700d73</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f24e4578-6c82-46aa-963a-5be8c0cac063</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>ef6b8989-f85b-439f-b50a-064ecf6480d4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>08492c3e-1c05-4fb7-ac4f-4644aa99fe2d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>cd7dda61-054f-4b73-8ef1-a81f73dcfb35</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>34f3dc72-65dc-4452-98c0-80d30fcc8a99</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>57943d99-acef-449a-8b70-95e104a77695</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>4d5d7995-e8a5-421f-aa2d-99cf10aea469</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f09da870-841a-4d5f-b8a5-d03b8dba5ad5</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase id="594800c2-f20a-48b2-8016-cfbda7f65893" discardOkResults="true" failOnError="true" failTestCaseOnErrors="true" keepSession="false" name="Bookings-ClosedUnsuccessfully-Requested during weekday, Completed during weekday; (BUT there is one or more weekends in between Request and Completion)" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="Find Cookie" id="82ad761d-c0cc-49e6-af43-afafb6d8196a" disabled="true"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>73aca830-7e01-4286-ab3b-cac4c2c3e8ab</con:targetTestCase><con:properties><con:property><con:name>qaDevCookies</con:name><con:value>[avalon.sid=s%3A54cb1cf0e4b004ec636c4d71.OKyf7Hynz6NWePZzjLl5L9azOOkbtfD5ExcpJE%2FUL48</con:value></con:property></con:properties><con:returnProperties><con:entry>qaDevCookies</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="calltestcase" name="Fetch SalesRep-selling period" id="705c37d6-e9e4-4e0e-93b1-657c637db2f5"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>73aca830-7e01-4286-ab3b-cac4c2c3e8ab</con:targetTestCase><con:properties><con:property><con:name>qaDevCookies</con:name><con:value>[avalon.sid=s%3A54cb1cf0e4b004ec636c4d71.OKyf7Hynz6NWePZzjLl5L9azOOkbtfD5ExcpJE%2FUL48</con:value></con:property></con:properties><con:returnProperties><con:entry>qaDevCookies</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script -CreatedOnDate" id="f9e2e870-f174-4e87-8a4c-c9632d9f3a5a"><con:settings/><con:config><script>import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.text.DateFormat;
import java.util.Date;
import java.util.TimeZone;
import java.util.*
import org.joda.time.DateTime;

DateTime dateTime = new DateTime();
long firstDayOfWeekTimestamp = dateTime.withDayOfWeek(1).getMillis();
log.info firstDayOfWeekTimestamp
// Get calendar set to current date and time
Calendar c = Calendar.getInstance();
	    c.setTime(new Date());
	    c.set(Calendar.HOUR_OF_DAY, 0);
         c.set(Calendar.MINUTE, 0);
         c.set(Calendar.SECOND, 0);
         c.set(Calendar.MILLISECOND, 0);
        
       
// Set the calendar to MONDAY of the current week
c.set(Calendar.DAY_OF_WEEK, Calendar.MONDAY); 



// substract 7 days
// If we give 7 there it will give 8 days back
c.set(Calendar.DAY_OF_MONTH, c.get(Calendar.DAY_OF_MONTH)-6);

// convert to date
Date myDate = c.getTime();

// Print dates of the current week starting on SUNDAY
DateFormat df = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ");
for (int i = 0; i &lt; 1; i++) {
    log.info(df.format(c.getTime()));
 DateFormat df1 = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS");
 log.info(df1.format(c.getTime()));
    //c.add(Calendar.DATE, 1);
    testRunner.testCase.setPropertyValue( "CreatedOnDate", (df1.format(c.getTime()).toString()+"Z"));
}</script></con:config></con:testStep><con:testStep type="restrequest" name="FindBooking" id="75574611-1fbf-4d4c-a022-4880cda81878"><con:settings/><con:config service="FindBooking" resourcePath="/rest/api/${#TestSuite#tenant}/app.bookings::find" methodName="App.bookings::find" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="FindBooking" id="d5f2a138-3d23-467a-9912-55909aa3fc9d" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Cookie" value="${#TestSuite#Cookie}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://${#TestSuite#serverName}.ssi-cloud.com</con:endpoint><con:request>{"filter":{"tags":{"$nin":[{"$regex":"^TAT_TEST"},{"$regex":"^Functional_QA"}]},"flows.bookingStages.state.name":"pending","systemProperties.createdOn":{"$gte":"${#TestCase#requestedTime}"},"extensions.master.targetPeriod.value.name":"${#TestSuite#targetPeriod}"},"params":{"sort":{"systemProperties.createdOn":1},"start":0,"limit":50,"columns":["_id","type","systemProperties","displayName","relationships.assignee","relationships.requestedBy","flows.bookingStages.transitions","dueDate","flows.bookingStages.transitions","flows.bookingStages.state","flows.bookingStages.target","soDate","amount.normalizedAmount"]},"origin":{},"inversesummary":false}</con:request><con:originalUri>https://pe-internal.dev.ssi-cloud.com/rest/api/pe-internal.dev/app.bookings::find</con:originalUri><con:credentials><con:username>${#TestSuite#loginID}</con:username><con:password>passwordone</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="Property Transfer-BookingID" id="1ef951bc-024e-4f5d-b69f-cbfd6abe13e3"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>BookingID</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>FindBooking</con:sourceStep><con:sourcePath>declare namespace ns1='https://pe-internal.dev.ssi-cloud.com/rest/api/pe-internal.dev/app.bookings::find';
//ns1:Response[1]/ns1:data[1]/ns1:app.booking[1]/ns1:e[1]/ns1:_id[1]</con:sourcePath><con:targetType>BookingID</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:targetPath/><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>BookingDisplayName</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>FindBooking</con:sourceStep><con:sourcePath>declare namespace ns1='https://pe-internal.dev.ssi-cloud.com/rest/api/pe-internal.dev/app.bookings::find';
//ns1:Response[1]/ns1:data[1]/ns1:app.booking[1]/ns1:e[1]/ns1:displayName[1]</con:sourcePath><con:targetType>BookingDisplayName</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>BookingCount</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>FindBooking</con:sourceStep><con:sourcePath>declare namespace ns1='https://pe-internal.dev.ssi-cloud.com/rest/api/pe-internal.dev/app.bookings::find';
//ns1:Response[1]/ns1:recordCount[1]/ns1:app.booking[1]</con:sourcePath><con:targetType>BookingCount</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="BookingID" id="d2c7d455-aea8-4165-a423-8c689d4b061b"><con:settings/><con:config><script>import groovy.json.JsonSlurper
import com.eviware.soapui.support.XmlHolder
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
def holder = groovyUtils.getXmlHolder(testRunner.testCase.testSteps["FindBooking"].testRequest.response.getContentAsXml());
def bookingCount = context.expand( '${#TestCase#BookingCount}' )

log.info bookingCount
def responseAsXml = context.expand( '${FindBooking#ResponseAsXml#declare namespace ns1=\'https://pe-internal.dev.ssi-cloud.com/rest/api/pe-internal.dev/app.bookings::find\'; //ns1:Response[1]/ns1:data[1]/ns1:app.booking[1]/ns1:e[1]/ns1:_id[1]}' )




def BookingIDs=[]

                def i=1
                def j=1             
                for(node in holder["//ns1:Response[1]/ns1:data[1]/ns1:app.booking[1]/ns1:e[${i}]"])
                {              
								   
               rate = holder.getNodeValue("ns1:Response[1]/ns1:data[1]/ns1:app.booking[1]/ns1:e[${i}]/ns1:amount[1]/ns1:normalizedAmount[1]/ns1:rate[1]")   
               //affinityOrg= holder.getNodeValue("ns1:Response[1]/ns1:data[1]/ns1:app.quote[1]/ns1:e[${i}]/ns1:relationships[1]/ns1:e[2]/ns1:target[1]/ns1:relationships[1]/ns1:affinityOrganization[1]/ns1:targets[1]/ns1:e[1]/ns1:extensions[1]/ns1:tenant[1]/ns1:l0AffinityId[1]/ns1:value[1]")
          
              log.info rate
              //log.info affinityOrg
              if(rate!=null){
              //	 if(rate!=null&amp;&amp; affinityOrg != null){
              	
          									   
                                id = holder.getNodeValue("ns1:Response[1]/ns1:data[1]/ns1:app.booking[1]/ns1:e[${i}]/ns1:_id[1]" )
                                BookingIDs.add(id)                              
                                i=i+1
                                log.info i
                                if(i==bookingCount.toInteger())
                                break;
                }}
testRunner.testCase.setPropertyValue( "rate", rate.toString() ) 
testRunner.testCase.setPropertyValue( "BookingIDs", BookingIDs.toString())
testRunner.testCase.setPropertyValue( "bookingCount", i.toString())
log.info BookingIDs.toString()
def count=0
testRunner.testCase.setPropertyValue( "i", count.toString() )
def flag=false
testRunner.testCase.setPropertyValue( "flag",flag.toString())

</script></con:config></con:testStep><con:testStep type="groovy" name="Counter" id="41ac72d0-ba68-414f-90de-70fada9d1cc2"><con:settings/><con:config><script>def i = context.expand( '${#TestCase#i}' )
log.info i

def bookingID = context.expand( '${#TestCase#BookingIDs#$[${#TestCase#i}]}' )

log.info bookingID
testRunner.testCase.setPropertyValue( "bookingID", bookingID.toString() )
</script></con:config></con:testStep><con:testStep type="restrequest" name="BookingDetails" id="433b654f-0384-4531-bea3-9d290d928e2b"><con:settings/><con:config service="BookingDetails" resourcePath="/rest/api/${#TestSuite#tenant}/app.bookings::find" methodName="App.bookings::find" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="BookingDetails" id="c7ef5e26-ae51-43f1-9688-846d741a3a69" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Cookie" value="${#TestSuite#Cookie}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://${#TestSuite#serverName}.ssi-cloud.com</con:endpoint><con:request>{"inversesummary":true,"extinversesummary":true,"filter":{"_id":"${#TestCase#BookingID}","type":"app.booking/sales"},"params":{"start":0,"limit":1},"origin":{"component":"AvalonCollection","url":"#tab/app.bookings/"}}</con:request><con:originalUri>https://pe-internal.dev.ssi-cloud.com/rest/api/delll/app.bookings::find</con:originalUri><con:credentials><con:username>maria.gomez@dell.com</con:username><con:password>passwordone</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters>
  <con:entry key="inversesummary" value="true"/>
  <con:entry key="extinversesummary" value="true"/>
</con:parameters><con:parameterOrder><con:entry>inversesummary</con:entry><con:entry>extinversesummary</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="Property Transfer-TimeZone1" id="d38b1121-c5b9-435e-847d-e353882f04ba"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TimeZone</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>BookingDetails</con:sourceStep><con:sourcePath>declare namespace ns1='https://pe-internal.dev.ssi-cloud.com/rest/api/delll/app.bookings::find';
//ns1:Response[1]/ns1:data[1]/ns1:app.booking[1]/ns1:e[1]/ns1:extensions[1]/ns1:master[1]/ns1:requestedTimeZone[1]/ns1:value[1]/ns1:displayName[1]</con:sourcePath><con:targetType>TimeZone</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:targetPath/><con:type>XPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false" disabled="true"><con:name>TimeZoneKey</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>BookingDetails</con:sourceStep><con:sourcePath>declare namespace ns1='https://qa-internal.dev.ssi-cloud.com/rest/api/dell/app.quotes::find';
//ns1:Response[1]/ns1:data[1]/ns1:app.quote[1]/ns1:e[1]/ns1:extensions[1]/ns1:master[1]/ns1:requestedTimeZone[1]/ns1:value[1]/ns1:key[1]</con:sourcePath><con:targetType>TimeZoneKey</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false" disabled="true"><con:name>amount1</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>QuoteDetails</con:sourceStep><con:sourcePath>declare namespace ns1='https://qa-internal.dev.ssi-cloud.com/rest/api/dell/app.quotes::find';
//ns1:Response[1]/ns1:data[1]/ns1:app.quote[1]/ns1:e[1]/ns1:amount[1]/ns1:amount[1]</con:sourcePath><con:targetType>amount</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false" disabled="true"><con:name>corelookupKey</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>QuoteDetails</con:sourceStep><con:sourcePath>declare namespace ns1='https://qa-internal.dev.ssi-cloud.com/rest/api/dell/app.quotes::find';
//ns1:Response[1]/ns1:data[1]/ns1:app.quote[1]/ns1:e[1]/ns1:amount[1]/ns1:code[1]/ns1:key[1]</con:sourcePath><con:targetType>coreLookUpKey</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false" disabled="true"><con:name>coreLookUpKEY2</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>QuoteDetails</con:sourceStep><con:sourcePath>declare namespace ns1='https://qa-internal.dev.ssi-cloud.com/rest/api/dell/app.quotes::find';
//ns1:Response[1]/ns1:data[1]/ns1:app.quote[1]/ns1:e[1]/ns1:amount[1]/ns1:normalizedAmount[1]/ns1:code[1]/ns1:key[1]</con:sourcePath><con:targetType>coreLookUpKEY2</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false" disabled="true"><con:name>currencyName1</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>QuoteDetails</con:sourceStep><con:sourcePath>declare namespace ns1='https://qa-internal.dev.ssi-cloud.com/rest/api/dell/app.quotes::find';
//ns1:Response[1]/ns1:data[1]/ns1:app.quote[1]/ns1:e[1]/ns1:amount[1]/ns1:code[1]/ns1:name[1]</con:sourcePath><con:targetType>currencyName1</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="true" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false"><con:name>currencyDisplayName1</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>QuoteDetails</con:sourceStep><con:sourcePath>declare namespace ns1='https://qa-internal.dev.ssi-cloud.com/rest/api/dell/app.quotes::find';
//ns1:Response[1]/ns1:data[1]/ns1:app.quote[1]/ns1:e[1]/ns1:amount[1]/ns1:code[1]/ns1:displayName[1]</con:sourcePath><con:targetType>currencyDisplayName1</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:targetPath xsi:nil="true"/><con:type>XPATH</con:type><con:targetTransferType>XPATH</con:targetTransferType><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="true" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false"><con:name>currencyDisplayName2</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>QuoteDetails</con:sourceStep><con:sourcePath>declare namespace ns1='https://qa-internal.dev.ssi-cloud.com/rest/api/dell/app.quotes::find';
//ns1:Response[1]/ns1:data[1]/ns1:app.quote[1]/ns1:e[1]/ns1:amount[1]/ns1:normalizedAmount[1]/ns1:code[1]/ns1:displayName[1]</con:sourcePath><con:targetType>currencyDisplayName2</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:targetPath xsi:nil="true"/><con:type>XPATH</con:type><con:targetTransferType>XPATH</con:targetTransferType><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false" disabled="true"><con:name>CurrencyName2</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>QuoteDetails</con:sourceStep><con:sourcePath>declare namespace ns1='https://qa-internal.dev.ssi-cloud.com/rest/api/dell/app.quotes::find';
//ns1:Response[1]/ns1:data[1]/ns1:app.quote[1]/ns1:e[1]/ns1:amount[1]/ns1:normalizedAmount[1]/ns1:code[1]/ns1:name[1]</con:sourcePath><con:targetType>currencyName2</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false" disabled="true"><con:name>amount2</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>QuoteDetails</con:sourceStep><con:sourcePath>declare namespace ns1='https://qa-internal.dev.ssi-cloud.com/rest/api/dell/app.quotes::find';
//ns1:Response[1]/ns1:data[1]/ns1:app.quote[1]/ns1:e[1]/ns1:amount[1]/ns1:normalizedAmount[1]/ns1:amount[1]</con:sourcePath><con:targetType>amount2</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="Counter++" id="dd975454-e613-4622-b2c1-9e80d972de89"><con:settings/><con:config><script>import groovy.json.JsonSlurper
import com.eviware.soapui.support.XmlHolder
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
def holder = groovyUtils.getXmlHolder(testRunner.testCase.testSteps["BookingDetails"].testRequest.response.getContentAsXml());
def flag = context.expand( '${#TestCase#flag}' )                                






                          timeZone=holder.getNodeValue("//ns1:Response[1]/ns1:data[1]/ns1:app.booking[1]/ns1:e[1]/ns1:extensions[1]/ns1:master[1]/ns1:requestedTimeZone[1]/ns1:value[1]/ns1:displayName[1]")
                        //  isrevised=holder.getNodeValue("//ns1:Response[1]/ns1:data[1]/ns1:app.quote[1]/ns1:e[1]/ns1:isRevised[1]")
                          
                                
                                log.info ("Timezone: " + timeZone)
                              //  log.info isrevised
                        
                                if(timeZone != null ){
                            
                                flag==true
                                testRunner.testCase.setPropertyValue( "flag","true")                   
                                }
                                else
                                {
                                	testRunner.testCase.setPropertyValue( "flag","false")   
                                }
                                log.info flag
               
def i = context.expand( '${#TestCase#i}' )
log.info i
def c = i.toInteger()+1
testRunner.testCase.setPropertyValue( "i", c.toString() )
</script></con:config></con:testStep><con:testStep type="groovy" name="Counter Check" id="db7cb44b-8cb3-4ff3-ab55-31776cd72a86"><con:settings/><con:config><script>def i = context.expand( '${#TestCase#i}' )
def bookingCount = context.expand( '${#TestCase#BookingCount}' )

def flag = context.expand( '${#TestCase#flag}' )
log.info i
log.info bookingCount
log.info flag
if((i.toInteger()&lt;bookingCount.toInteger())&amp;&amp; (flag=="false"))
{
   testRunner.gotoStepByName( "Counter" )
}
else if ((i.toInteger()==bookingCount.toInteger())&amp;&amp; (flag=="false"))
{
	testRunner.gotoStepByName( "Delay 3" );
	log.info ("Test Case Fail : DATA NOT FOUND")
	def DATA_NOT_FOUND="DATA NOT FOUND"
	return DATA_NOT_FOUND
	
    
}
else 
{
    testRunner.gotoStepByName( "Delay 2" )
}</script></con:config></con:testStep><con:testStep type="delay" name="Delay 2" id="81bd4215-d8aa-4915-9a9d-6300f4b0c5e0"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:testStep type="restrequest" name="FindActivities" id="0bcb16e5-b22a-46c9-be95-1e7a09f555bc"><con:settings/><con:config service="FindActivities" resourcePath="/rest/api/dell/core.activities::getrhpactivities" methodName="Core.activities::getrhpactivities" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="FindActivities" id="ec32ed71-dac8-4f9f-8863-509201de0075" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Cookie" value="${#TestSuite#Cookie}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://${#TestSuite#serverName}.ssi-cloud.com</con:endpoint><con:request>{"params":{"sort":{"systemProperties.createdOn":-1},"start":0,"limit":50,"columns":["relatedObjects"]},"origin":{"component":"Duplo_TimelineStream","url":"#tab/core.activities"},"inversesummary":false,"type":"app.booking/sales","key":"${#TestCase#BookingID}","filter":{"crudBased":false},"configParams":{"includeNotes":true}}</con:request><con:originalUri>https://qa-internal.dev.ssi-cloud.com/rest/api/dell/core.activities::getrhpactivities</con:originalUri><con:credentials><con:username>maria.gomez@dell.com</con:username><con:password>passwordone</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="Property Transfer-CreatedOnDate" id="b04f8443-9ae9-47e8-af9e-e5b4705c7de3"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>requestedtime</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>FindActivities</con:sourceStep><con:sourcePath>declare namespace ns1='https://qa-internal.dev.ssi-cloud.com/rest/api/dell/core.activities::getrhpactivities';
//ns1:Response[1]/ns1:data[1]/ns1:core.activity[1]/ns1:e[1]/ns1:systemProperties[1]/ns1:createdOn[1]</con:sourcePath><con:targetType>requestedTime</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:targetPath/><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script-Booking Complusory Fields" id="1d7cab88-615e-44ff-b8c5-c0c192ebbec1"><con:settings/><con:config><script>import org.openqa.selenium.By
import org.openqa.selenium.*
import org.openqa.selenium.WebDriver
import org.openqa.selenium.WebElement
import org.openqa.selenium.chrome.ChromeDriver
import org.openqa.selenium.firefox.FirefoxDriver;
import org.openqa.selenium.support.ui.ExpectedCondition
import org.openqa.selenium.support.ui.WebDriverWait
import org.openqa.selenium.OutputType
import org.apache.commons.io.FileUtils
import org.openqa.selenium.interactions.Actions;
import org.openqa.selenium.Keys
import org.openqa.selenium.firefox.FirefoxProfile;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.openqa.selenium.support.ui.Select;
import org.openqa.selenium.WebDriverException;
import java.lang.Numberjava.lang.*
import groovy.json.*
import java.awt.AWTException;
import java.awt.Robot;
import java.awt.Toolkit;
import java.awt.event.KeyEvent;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.text.DateFormat;
import java.util.Date;
import java.util.TimeZone;
import java.util.*
import org.joda.time.DateTime;
import groovy.transform.Field


def tenant = context.expand( '${#TestSuite#tenant}' )
def loginID = context.expand( '${#TestSuite#loginID}' )
//def salesRepEmail = context.expand( '${#Project#salesRepEmail}' )
def password = context.expand( '${#TestSuite#password}' )
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def projectDir = groovyUtils.projectPath
def resultDir = new File(projectDir);
def serverName = context.expand( '${#TestSuite#serverName}' )
def version = context.expand( '${#Project#version}' )
def bookingID = context.expand( '${#TestCase#BookingID}' )
def id="id"
url="https://"+serverName+".ssi-cloud.com"


//Setting firefox profile to download file
FirefoxProfile  fp = new FirefoxProfile();
fp.setPreference("browser.download.folderList",2);
fp.setPreference("browser.download.manager.showWhenStarting",false);
fp.setPreference("browser.download.dir", projectDir);
fp.setPreference("browser.helperApps.neverAsk.openFile", "application/octet-stream");
fp.setPreference("browser.helperApps.neverAsk.saveToDisk", "application/octet-stream");

WebDriver driver = new FirefoxDriver(fp)
/*
//Initiate Chrome WebDriver
System.setProperty("webdriver.chrome.driver", "C:/Users/ankits.rajput/Downloads/chromedriver.exe");
log.info(System.getProperty("webdriver.chrome.driver"));
	
 WebDriver driver=new ChromeDriver()
*/

 //BY Using this we can use driver object in other methods 
 def projectContext = context.testCase.testSuite.project.context
 projectContext.driver = driver
 driver.manage().deleteAllCookies();


try
{
           // Url to be opened	
           driver.get(url) 

           // Apllying wait
           WebDriverWait wait = new WebDriverWait(driver, 100); 

           //Username 
           wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath("//input[@id='userid']")));   
           driver.findElement(By.xpath("//input[@id='userid']")).sendKeys(loginID);

		//password
		driver.findElement(By.xpath("//input[@id='password']")).sendKeys(password);

		//version
		WebElement mySelectElm = driver.findElement(By.id("platformVersion")); 
		Select mySelect = new Select(mySelectElm);
		mySelect.selectByVisibleText(version);
		
		//submit button
		driver.findElement(By.xpath("//input[@id='xsubmit']")).click();
		
		//maximize windows
		driver.manage().window().maximize();
		Thread.sleep(5000); 

         //Clicking on Bookings Tab
          wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath("//div[4]/div[14]/div/div/div")));   
		WebElement table = driver.findElement(By.xpath("//div[4]/div[14]/div/div/div"));
		List&lt;WebElement> rows1 = table.findElements(By.xpath("//li[@class='av_tab']"));
		java.util.Iterator&lt;WebElement> i = rows1.iterator();

		while(i.hasNext()) {
  		WebElement row = i.next();
  		       
              if ( row.getText()=="BOOKINGS"){
              row.click();
              break;}
           
		}
         search_by(id,bookingID)
         
           driver.findElement(By.xpath(".//*[@id='1']/td[2]/span")).click();

  		Thread.sleep(8000); 

Boolean isPresent = driver.findElements(By.xpath("//tbody/tr/td[@class='sectionFormLayoutCol']/div/div/div/div/div/ul/li[19]/div/div[@data-widget-path='amount']")).size() > 0
if (isPresent==true){
	Thread.sleep(5000); 
     driver.quit();
   testRunner.gotoStepByName( "Counter" )
}



  		 
     // Line Item Amount
 		//Boolean isPresent = driver.findElements(By.xpath("//tbody/tr/td[@class='sectionFormLayoutCol']/div/div/div/div/div/ul/li[19]/div/div[@data-widget-path='amount']")).size() > 0
		@Field amt=0
		@Field amt1=0
		
		if (isPresent==true){
		wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath("//tbody/tr/td[@class='sectionFormLayoutCol']/div/div/div/div/div/ul/li[19]/div/div[@data-widget-path='amount']")));   
       	amt= driver.findElement(By.xpath("//tbody/tr/td[@class='sectionFormLayoutCol']/div/div/div/div/div/ul/li[19]/div/div[@data-widget-path='amount']")).getText();
       	log.info ("amt: " + amt);
		log.info ("size" +amt.size());
		amt1 = amt.substring(0, amt.length() - 3);
          log.info ("amt1:" +amt1);
       	}
       	else{
       	wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath("//tbody/tr/td[@class='sectionFormLayoutCol']/div/div/div/div/div/ul/li[19]/div/div[@data-widget-path='amount_amount']")));   
       	amt= driver.findElement(By.xpath("//tbody/tr/td[@class='sectionFormLayoutCol']/div/div/div/div/div/ul/li[19]/div/div[@data-widget-path='amount_amount']")).getText();
       	
		log.info ("amt: " + amt);
		log.info ("size" +amt.size());
		amt1 = amt.substring(0, amt.length() - 3);
          log.info ("amt1:" +amt1);}
// PoAmount
		wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath("//tbody/tr/td[@class='sectionFormLayoutCol']/div/div/div/div/div/ul/li[6]/div/input[@class='widget_currency-amount']")));   
		driver.findElement(By.xpath("//tbody/tr/td[@class='sectionFormLayoutCol']/div/div/div/div/div/ul/li[6]/div/input[@class='widget_currency-amount']")).clear()
       	driver.findElement(By.xpath("//tbody/tr/td[@class='sectionFormLayoutCol']/div/div/div/div/div/ul/li[6]/div/input[@class='widget_currency-amount']")).sendKeys(amt1);
		Thread.sleep(2000); 


// PoAmount Currency
          String last3;
          	if (amt == null || amt.length() &lt; 3) {
  			  last3 = amt;
  			  log.info ("last: " + last3);
			} else {
 			   last3 = amt.substring(amt.length() - 3);
 			   log.info ("last3: " + last3);
			}

		Thread.sleep(1000); 
          Select dropdown = new Select(driver.findElement(By.xpath("//tbody/tr/td[@class='sectionFormLayoutCol']/div/div/div/div/div/ul/li[6]/div/select[@class='widget_currency-code required']")));
          dropdown.selectByVisibleText(last3);


//PoNumber
 Random random1 = new Random();
      
String randomInteger1 = random1.nextInt(50000).toString();
     // int randomInteger = random.nextInt();
      log.info("SoNumber: " + randomInteger1);
 


		wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath("//tbody/tr/td[1]/div/div/div/div[1]/div/ul/li[4]/input")));  
		driver.findElement(By.xpath("//tbody/tr/td[1]/div/div/div/div[1]/div/ul/li[4]/input")).clear() 
       	driver.findElement(By.xpath("//tbody/tr/td[1]/div/div/div/div[1]/div/ul/li[4]/input")).sendKeys(randomInteger1);
		Thread.sleep(2000); 

 //PoDate

 DateFormat dateFormat23 = new SimpleDateFormat("d"); 
            Date date23 = new Date();

            String today1 = dateFormat23.format(date23); 

  driver.findElement(By.xpath("//tbody/tr/td[@class='sectionFormLayoutCol']/div/div/div/div/div/ul/li[9]/div/div[@class='trigger_by_button']")).click();
  
  WebElement dateWidget1 = driver.findElement(By.xpath(".//*[@id='ui-datepicker-div']/table/tbody"));
  List rows11=dateWidget1.findElements(By.tagName("tr"));
  List columns11=dateWidget1.findElements(By.tagName("td"));
  
  for (WebElement cell: columns11){
  
   if (cell.getText().equals(today1)){
   cell.click();
   break;
   }}

//SoAmount
		wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath("//tbody/tr/td[@class='sectionFormLayoutCol']/div/div/div/div/div/ul/li[12]/div/input[@class='widget_currency-amount']")));
		driver.findElement(By.xpath("//tbody/tr/td[@class='sectionFormLayoutCol']/div/div/div/div/div/ul/li[12]/div/input[@class='widget_currency-amount']")).clear();   
       	driver.findElement(By.xpath("//tbody/tr/td[@class='sectionFormLayoutCol']/div/div/div/div/div/ul/li[12]/div/input[@class='widget_currency-amount']")).sendKeys(amt1);
		Thread.sleep(2000); 


// SoAmount Currency
          
		Thread.sleep(1000); 
          Select dropdown1 = new Select(driver.findElement(By.xpath("//tbody/tr/td[@class='sectionFormLayoutCol']/div/div/div/div/div/ul/li[12]/div/select[@class='widget_currency-code']")));
          dropdown1.selectByVisibleText(last3);

 //SoDate

 DateFormat dateFormat2 = new SimpleDateFormat("d"); 
            Date date2 = new Date();

            String today = dateFormat2.format(date2); 

  driver.findElement(By.xpath("//tbody/tr/td[@class='sectionFormLayoutCol']/div/div/div/div/div/ul/li[14]/div/div[@class='trigger_by_button']")).click();
  
  WebElement dateWidget = driver.findElement(By.xpath(".//*[@id='ui-datepicker-div']/table/tbody"));
  List rows=dateWidget.findElements(By.tagName("tr"));
  List columns=dateWidget.findElements(By.tagName("td"));
  
  for (WebElement cell: columns){
  
   if (cell.getText().equals(today)){
   cell.click();
    break;
   }}


//SoNumber
 Random random = new Random();
      
String randomInteger = random.nextInt(40000).toString();
     // int randomInteger = random.nextInt();
      log.info(" SoNumber: " + randomInteger);
 


		wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath("//tbody/tr/td[1]/div/div/div/div[1]/div/ul/li[11]/input")));   
       	driver.findElement(By.xpath("//tbody/tr/td[1]/div/div/div/div[1]/div/ul/li[11]/input")).sendKeys(randomInteger);
		Thread.sleep(2000); 



//savebtn
           driver.findElement(By.xpath("//button[@id='saveBtn']")).click();

		Thread.sleep(5000); 
          driver.quit();
          
}

catch(Exception e)
{
log.info "Exception encountered : " + e.message
}


def WebElement clear_search() {
	  def projectContext = context.testCase.testSuite.project.context
  	  def driver = projectContext.driver
  	  WebDriverWait wait = new WebDriverWait(driver, 200); 
       wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath("//div[@class='VS-icon VS-icon-cancel VS-cancel-search-box']"))); 
	  ele=driver.findElement(By.xpath("//div[@class='VS-icon VS-icon-cancel VS-cancel-search-box']"));
	return ele;
	}




def rClick() {

	 try {
	     robot = new Robot();
	     robot.keyPress(KeyEvent.VK_ENTER);
	     robot.keyRelease(KeyEvent.VK_ENTER);
	 }  catch (Exception e) {
	     e.printStackTrace();
	     throw new WebDriverException("Unable to perform Click Operation");
	 }
	 robot = null;
	}



def search_by(String val1, String val2) throws InterruptedException {
	def projectContext = context.testCase.testSuite.project.context
  	def driver = projectContext.driver
	clear_search().click();
	Thread.sleep(1000);
	WebDriverWait wait = new WebDriverWait(driver, 200); 
     wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath("//input[@class='ui-autocomplete-input']")));
	driver.findElement(By.xpath("//input[@class='ui-autocomplete-input']")).sendKeys(val1);
	Thread.sleep(1000);
	rClick();
	wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath("//input[contains(@class,'search_facet_input VS-interface ui-autocomplete-input')]")));
	driver.findElement(By.xpath("//input[contains(@class,'search_facet_input VS-interface ui-autocomplete-input')]")).sendKeys(val2);
	Thread.sleep(1000);
	rClick();
	Thread.sleep(3000);
}






def search_with_two_criteria(String val1, String val2,String val3, String val4) throws InterruptedException {
	clear_search().click();
	driver.findElement(By.xpath("//input[@class='ui-autocomplete-input']")).sendKeys(val1);
	driver.findElement(By.xpath("//input[contains(@class,'input VS-interface ui-autocomplete-input')]")).sendKeys(val2);
	Thread.sleep(1000);
	rClick();
	driver.findElement(By.xpath("//div[@class='VS-search-inner']/div[3]/input")).sendKeys(val3);
	driver.findElement(By.xpath("//div[@class='VS-search-inner']/div[4]/div[2]/input")).sendKeys(val4);
	Thread.sleep(1000);
	rClick();
	Thread.sleep(3000);
}


def selectDropDownValue(String ValueToSelect) 
{
    def projectContext = context.testCase.testSuite.project.context
    def driver = projectContext.driver
    webelement findDropDownValue=driver.findElements(By.xpath("//tbody/tr/td[@class='sectionFormLayoutCol']/div/div/div/div/div/ul/li[6]/div/select[@class='widget_currency-code required']"))    //this will find that dropdown 

    wait.until(ExpectedConditions.visibilityOf(findDropDownValue));    // wait till that dropdown appear

    super.highlightElement(findDropDownValue);   // highlight that dropdown     

    new Select(findDropDownValue).selectByValue(ValueToSelect);    //select that option which u had passed as argument
}</script></con:config></con:testStep><con:testStep type="delay" name="Delay" id="5a171da7-c1e2-4c4f-b925-ce79d617b749"><con:settings/><con:config><delay>50000</delay></con:config></con:testStep><con:testStep type="restrequest" name="CloseUnsuccessfully-Booking" id="00f146c5-d1e2-4310-9cf4-ce8ae6c13618"><con:settings/><con:config service="CloseUnsuccessfully-Booking" resourcePath="/rest/api/${#TestSuite#tenant}/app.bookings/${#TestCase#BookingID}::closeUnsuccessfullyBooking" methodName="::closeUnsuccessfullyBooking" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CloseUnsuccessfully-Booking" id="58a18a3b-a2c4-4c98-8eaa-8a20a6729b97" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Cookie" value="${#TestSuite#Cookie}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://${#TestSuite#serverName}.ssi-cloud.com</con:endpoint><con:request>{"note":{"systemProperties":{"transId":[],"expiredOn":"9999-01-01T00:00:00.000Z"},"relationships":[],"notes":[],"attachment":[],"keywords":[],"externalIds":[],"dq":[],"tags":[]},"_id":"","type":"app.booking.closeunsuccessfully.input","closeUnsuccessfullyReason":{"displayName":"Other","name":"other","type":"app.lookup","key":"51a67a6316a8afd0f000c6e9"},"notes":[],"inversesummary":true,"extinversesummary":true,"origin":{"url":"#detail/app.bookings/${#TestCase#BookingID}"}}</con:request><con:originalUri>https://sqa-internal.dev.ssi-cloud.com/rest/api/dell/app.bookings/574fe866e4b03ef4f31c33ff::closeUnsuccessfullyBooking</con:originalUri><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters>
  <con:entry key="inversesummary" value="true"/>
  <con:entry key="extinversesummary" value="true"/>
</con:parameters><con:parameterOrder><con:entry>inversesummary</con:entry><con:entry>extinversesummary</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="BookingDetails-ClosedUnsuccessfully" id="777de81b-480b-48d2-85fe-5bc022cfb573"><con:settings/><con:config service="BookingDetails" resourcePath="/rest/api/${#TestSuite#tenant}/app.bookings::find" methodName="App.bookings::find" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="BookingDetails-ClosedUnsuccessfully" id="c7ef5e26-ae51-43f1-9688-846d741a3a69" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Cookie" value="${#TestSuite#Cookie}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://${#TestSuite#serverName}.ssi-cloud.com</con:endpoint><con:request>{"inversesummary":true,"extinversesummary":true,"filter":{"_id":"${#TestCase#BookingID}","type":"app.booking/sales"},"params":{"start":0,"limit":1},"origin":{"component":"AvalonCollection","url":"#tab/app.bookings/"}}</con:request><con:originalUri>https://sqa-internal.dev.ssi-cloud.com/rest/api/dell/app.bookings::find</con:originalUri><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters>
  <con:entry key="inversesummary" value="true"/>
  <con:entry key="extinversesummary" value="true"/>
</con:parameters><con:parameterOrder><con:entry>inversesummary</con:entry><con:entry>extinversesummary</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="Property Transfer-CompletedDate" id="e2201fc4-5419-414f-b62f-771b8170f1b4"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>CompletedDate</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>BookingDetails-ClosedUnsuccessfully</con:sourceStep><con:sourcePath>declare namespace ns1='https://sqa-internal.dev.ssi-cloud.com/rest/api/dell/app.bookings::find';
//ns1:Response[1]/ns1:data[1]/ns1:app.booking[1]/ns1:e[1]/ns1:amount[1]/ns1:normalizedAmount[1]/ns1:convertedOn[1]</con:sourcePath><con:targetType>ChangeDate</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:targetPath/><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TatTotal</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>BookingDetails-ClosedUnsuccessfully</con:sourceStep><con:sourcePath>declare namespace ns1='https://sqa-internal.dev.ssi-cloud.com/rest/api/dell/app.bookings::find';
//ns1:Response[1]/ns1:data[1]/ns1:app.booking[1]/ns1:e[1]/ns1:extensions[1]/ns1:master[1]/ns1:tatTotal[1]/ns1:value[1]</con:sourcePath><con:targetType>TatTotal</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TatNet</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>BookingDetails-ClosedUnsuccessfully</con:sourceStep><con:sourcePath>declare namespace ns1='https://sqa-internal.dev.ssi-cloud.com/rest/api/dell/app.bookings::find';
//ns1:Response[1]/ns1:data[1]/ns1:app.booking[1]/ns1:e[1]/ns1:extensions[1]/ns1:master[1]/ns1:tatNet[1]/ns1:value[1]</con:sourcePath><con:targetType>TatNet</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script-FormatRequestedDate" id="c160561c-dc5c-496e-b196-a5c876c3726c"><con:settings/><con:config><script>import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.text.DateFormat;
import java.util.Date;
import java.util.TimeZone;


def requestedTime = context.expand( '${#TestCase#requestedTime}' )
log.info requestedTime

String string = requestedTime;
String defaultTimezone = TimeZone.getDefault().getID();
SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ");
SimpleDateFormat output = new SimpleDateFormat("yyyy-MM-dd");
//Date d = sdf.parse(time);

Date date = sdf.parse(string.replaceAll("Z", "+0000"));
String nTime = output.format(date);
log.info("string: " + string);
log.info("date: " + date);
log.info("nTime: " + nTime);
testRunner.testCase.setPropertyValue( "FormatedRequestedDate", nTime.toString());</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script- FormatChangeDate" id="86fbdcf2-d233-427e-a23a-13a53f16a00e"><con:settings/><con:config><script>import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.text.DateFormat;
import java.util.Date;
import java.util.TimeZone;
def changeDate = context.expand( '${#TestCase#ChangeDate}' )

String string = changeDate;
//String defaultTimezone = TimeZone.getDefault().getID();
SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ");
SimpleDateFormat output = new SimpleDateFormat("yyyy-MM-dd");
//Date d = sdf.parse(time);

Date date = sdf.parse(string.replaceAll("Z", "+0000"));
String nTime = output.format(date);
log.info("string: " + string);
log.info("date: " + date);
log.info("nTime: " + nTime);
testRunner.testCase.setPropertyValue( "FormatedChangeDate", nTime.toString());</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script 52" id="cc54a25d-5019-4bf4-8e49-c327ac9efea8"><con:settings/><con:config><script>import java.text.SimpleDateFormat;
import java.util.Date;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.text.DateFormat;
import java.util.TimeZone;
import java.util.concurrent.TimeUnit;

def changeDate = context.expand( '${#TestCase#ChangeDate}' )
def requestedTime = context.expand( '${#TestCase#requestedTime}' )
log.info requestedTime
log.info changeDate

SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ");
SimpleDateFormat output = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS");

//requested Date
Date date = sdf.parse(requestedTime.replaceAll("Z", "+0000"));
String nTime = output.format(date);
myDate = Date.parse("yyyy-MM-dd'T'HH:mm:ss.SSS", nTime) ;
//log.info("string: " + string);
log.info("date: " + nTime);

//change Date
Date date1 = sdf.parse(changeDate.replaceAll("Z", "+0000"));
log.info("date1: " + date1);

String nTime1 = output.format(date1);
myDate1 = Date.parse("yyyy-MM-dd'T'HH:mm:ss.SSS", nTime1) ;
log.info("myDate1: " + myDate1);
log.info("date1: " + nTime1);

getTimeDiff(date,date1)

def getTimeDiff(Date dateOne, Date dateTwo) {
            String diff = "";
            long timeDiff = Math.abs(dateOne.getTime() - dateTwo.getTime());
            log.info ("TimeDiff : " + timeDiff);
            testRunner.testCase.setPropertyValue( "TimeDiffMilliesFromDate", timeDiff.toString())
              return timeDiff;
    }

</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script 51" id="1cc3745b-ac0a-4ab3-a4fb-7850b455475c"><con:settings/><con:config><script><![CDATA[import java.text.SimpleDateFormat;
import java.util.Date;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.text.DateFormat;
import java.util.TimeZone;
import java.util.concurrent.TimeUnit;

def changeDate = context.expand( '${#TestCase#ChangeDate}' )
def requestedTime = context.expand( '${#TestCase#requestedTime}' )
log.info requestedTime
log.info changeDate
def timeDiffMilliesFromDate = context.expand( '${#TestCase#TimeDiffMilliesFromDate}' )


Long timeDiffMilliesFromDate1 = Long.valueOf(timeDiffMilliesFromDate);
//String string = requestedTime;
//String string1 = changeDate;

SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ");
SimpleDateFormat output = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS");


//requested Date
Date date = sdf.parse(requestedTime.replaceAll("Z", "+0000"));
String nTime = output.format(date);
myDate = Date.parse("yyyy-MM-dd'T'HH:mm:ss.SSS", nTime) ;
//log.info("string: " + string);
log.info("date: " + nTime);




//change Date
Date date1 = sdf.parse(changeDate.replaceAll("Z", "+0000"));
log.info("date1: " + date1);

String nTime1 = output.format(date1);
myDate1 = Date.parse("yyyy-MM-dd'T'HH:mm:ss.SSS", nTime1) ;
log.info("myDate1: " + myDate1);
log.info("date1: " + nTime1);

DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS");
//get current date time with Date()
Date date2 = new Date();
log.info("CurrentDate: "+ dateFormat.format(date2));

// Get calendar set to current date and time
Calendar c = Calendar.getInstance();
 	    c.set(Calendar.HOUR_OF_DAY, 0);
         c.set(Calendar.MINUTE, 0);
         c.set(Calendar.SECOND, 0);
         c.set(Calendar.MILLISECOND, 0);
         
         log.info c.getTime();


    
t2=(dateFormat.format(c.getTime()))
t3=(dateFormat.parse(t2))
Timeinhours=(myDate1 - t3);
log.info ("Time: " + Timeinhours);


getTimeDiff(date,date1)

getDurationBreakdown(timeDiffMilliesFromDate1)




def getTimeDiff(Date dateOne, Date dateTwo) {
            String diff = "";
            long timeDiff = Math.abs(dateOne.getTime() - dateTwo.getTime());
            log.info ("TimeDiff : " + timeDiff);
            testRunner.testCase.setPropertyValue( "TimeDiffMilliesFromDate", timeDiff.toString())
              return timeDiff;
    }

def String getDurationBreakdown(long millies)
    {
        if(millies < 0)
        {
            throw new IllegalArgumentException("Duration must be greater than zero!");
        }

        long days = TimeUnit.MILLISECONDS.toDays(millies);
        millies -= TimeUnit.DAYS.toMillis(days);
        long hours = TimeUnit.MILLISECONDS.toHours(millies);
        millies -= TimeUnit.HOURS.toMillis(hours);
        long minutes = TimeUnit.MILLISECONDS.toMinutes(millies);
        millies -= TimeUnit.MINUTES.toMillis(minutes);
        long seconds = TimeUnit.MILLISECONDS.toSeconds(millies);

        StringBuilder sb = new StringBuilder(64);

        sb.append(hours);
        sb.append(" Hours ");
      

        if (minutes==0 && seconds>0){
        	 minutes=minutes+1
        	 sb.append(minutes);
        	 sb.append(" Minutes ");
        	 seconds=0
        	 sb.append(seconds);
           sb.append(" Seconds");
        }
       else if (minutes>0 && seconds>0 && seconds<=30){
       	minutes=minutes-1
	      sb.append(minutes);
        	 sb.append(" Minutes ");
        	 seconds=0
        	 sb.append(seconds);
           sb.append(" Seconds");
        }
        else if (minutes>0 && seconds>30){
        	minutes=minutes+1
        	 sb.append(minutes);
        	 sb.append(" Minutes ");
        	 seconds=0
        	 sb.append(seconds);
           sb.append(" Seconds");
        	}
            
log.info(sb.toString())
       testRunner.testCase.setPropertyValue( "MilliesFromDate", sb.toString());
    }]]></script></con:config></con:testStep><con:testStep type="groovy" name="BusinessDay Calculation" id="4783a1b1-3d0f-4dc5-be85-da52ca41901d"><con:settings/><con:config><script><![CDATA[import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.text.DateFormat;
import java.util.Date;
import java.util.TimeZone;
import java.util.*
import org.joda.time.DateTime;

def changeDate = context.expand( '${#TestCase#ChangeDate}' )
def formatedRequestedDate = context.expand( '${#TestCase#FormatedRequestedDate}' )
def formatedChangeDate = context.expand( '${#TestCase#FormatedChangeDate}' )

SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd");
String dateInString = formatedRequestedDate
log.info dateInString
Date date = formatter.parse(dateInString);
log.info(date);
log.info(formatter.format(date));
def projectContext = context.testCase.testSuite.project.context
projectContext.date = date






String dateInString1 = formatedChangeDate		
		
Date date1 = formatter.parse(dateInString1);
log.info(date1);
log.info(formatter.format(date1));

projectContext.date1 = date1

def date3 = projectContext.date1
def date2 = projectContext.date


days(date2,date3)

/*
SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ");
SimpleDateFormat output = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS");
//Date d = sdf.parse(time);



Date Changedate = sdf.parse(changeDate.replaceAll("Z", "+0000"));
String nTime = output.format(Changedate);

DateTime dateTime = new DateTime();
Calendar c = Calendar.getInstance();
	    c.setTime(new Date());
	    c.set(Calendar.HOUR_OF_DAY, 0);
         c.set(Calendar.MINUTE, 0);
         c.set(Calendar.SECOND, 0);
         c.set(Calendar.MILLISECOND, 0);

Date myDate = c.getTime();
log.info ("myDate::" + myDate);

String datediff= (nTime - myDate)
log.info ("datediff::" + datediff)



DateFormat sdf21 = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss"); 
Date date21 = sdf21.parse(datediff);
log.info ("Days :- " +date21.getDay()); 
log.info ("Hours :- " +date21.getHours()); 
log.info ("Min :- " + date21.getMinutes()); 
log.info ("Sec :- " + date21.getSeconds()); 

 StringBuilder sb = new StringBuilder(64);
        sb.append(date21.getHours());
        sb.append(" Hours ");
 if (date21.getMinutes()==0 && seconds>0){
        	 minutes=date21.getMinutes()+1
        	 sb.append(minutes);
        	 sb.append(" Minutes ");
        	 seconds=0
        	 sb.append(seconds);
           sb.append(" Seconds");
        }
       else if (date21.getMinutes()>0 && date21.getSeconds()>0 && date21.getSeconds()<=30){
	      sb.append(date21.getMinutes());
        	 sb.append(" Minutes ");
        	 seconds=0
        	 sb.append(seconds);
           sb.append(" Seconds");
        }
        else if (date21.getMinutes()>0 && date21.getSeconds()>30){
        	minutes=date21.getMinutes()+1
        	 sb.append(minutes);
        	 sb.append(" Minutes ");
        	 seconds=0
        	 sb.append(seconds);
           sb.append(" Seconds");
        	}

log.info("DateDiffAfterCal :- " +sb.toString())
testRunner.testCase.setPropertyValue( "DateDiffAfterCal", sb.toString());

*/




//Business Days Calculation

 long days(Date start, Date end){
    //Ignore argument check

    Calendar c1 = Calendar.getInstance();
    c1.setTime(start);
    int w1 = c1.get(Calendar.DAY_OF_WEEK);
    c1.add(Calendar.DAY_OF_WEEK, -w1);

    Calendar c2 = Calendar.getInstance();
    c2.setTime(end);
    int w2 = c2.get(Calendar.DAY_OF_WEEK);
    c2.add(Calendar.DAY_OF_WEEK, -w2);

    //end Saturday to start Saturday 
    long days = (c2.getTimeInMillis()-c1.getTimeInMillis())/(1000*60*60*24);
    long daysWithoutWeekendDays = days-(days*2/7);

    // Adjust days to add on (w2) and days to subtract (w1) so that Saturday
    // and Sunday are not included
    if (w1 == Calendar.SUNDAY && w2 != Calendar.SATURDAY) {
        w1 = Calendar.MONDAY;
    } else if (w1 == Calendar.SATURDAY && w2 != Calendar.SUNDAY) {
        w1 = Calendar.FRIDAY;
    } 

    if (w2 == Calendar.SUNDAY) {
        w2 = Calendar.MONDAY;
    } else if (w2 == Calendar.SATURDAY) {
        w2 = Calendar.FRIDAY;
    }
    testRunner.testCase.setPropertyValue( "BusinessDays", (daysWithoutWeekendDays-w1+w2).toString());
    return daysWithoutWeekendDays-w1+w2;
}
]]></script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script-TAT Calculations1" id="4d7e66ec-3f3e-4e8e-acad-17d0a3a5bea8"><con:settings/><con:config><script><![CDATA[import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.TimeZone;
import java.util.concurrent.TimeUnit;
def quoteID = context.expand( '${#TestCase#QuoteID}' )
def timeZone = context.expand( '${#TestCase#TimeZone}' )
def requestedTime = context.expand( '${#TestCase#requestedTime}' )
def changeDate = context.expand( '${#TestCase#ChangeDate}' )
def timeGap = context.expand( '${#TestCase#TimeGap}' )
//def long millies =timeGap.toLong()
def turnaroundTime = context.expand( '${#TestCase#TurnaroundTime}' )
def tatNet = context.expand( '${#TestCase#TatNet}' )
def tatTotal = context.expand( '${#TestCase#TatTotal}' )
def long minutes1 = tatTotal.toLong()
def long tatTotalmillies = minutes1 * 60 * 1000;
def long tatNetmillies = minutes1 * 60 * 1000;
def businessDays = context.expand( '${#TestCase#BusinessDays}' )
def dateDiffAfterCal = context.expand( '${#TestCase#DateDiffAfterCal}' )
def milliesFromDate = context.expand( '${#TestCase#MilliesFromDate}' )


def FinalTATCal = businessDays + " Days " + milliesFromDate
log.info (" FinalTATCal: " + FinalTATCal)
testRunner.testCase.setPropertyValue( "FinalTATCal", FinalTATCal.toString());

//getWorkingDaysBetweenTwoDates( requestedTime,endDate)

//getDurationBreakdown(millies)

getDurationBreakdownMinutes(tatTotalmillies)
getDurationBreakdownMinutes1(tatNetmillies)


def String getDurationBreakdown(long millies)
    {
        if(millies < 0)
        {
            throw new IllegalArgumentException("Duration must be greater than zero!");
        }

        long days = TimeUnit.MILLISECONDS.toDays(millies);
        millies -= TimeUnit.DAYS.toMillis(days);
        long hours = TimeUnit.MILLISECONDS.toHours(millies);
        millies -= TimeUnit.HOURS.toMillis(hours);
        long minutes = TimeUnit.MILLISECONDS.toMinutes(millies);
        millies -= TimeUnit.MINUTES.toMillis(minutes);
        long seconds = TimeUnit.MILLISECONDS.toSeconds(millies);

        StringBuilder sb = new StringBuilder(64);
   	   sb.append(days);
        sb.append(" Days ");
        sb.append(hours);
        sb.append(" Hours ");
      

        if (minutes==0 && seconds>0){
        	 minutes=minutes+1
        	 sb.append(minutes);
        	 sb.append(" Minutes ");
        	 seconds=0
        	 sb.append(seconds);
           sb.append(" Seconds");
        }
       else if (minutes>0 && seconds>0 && seconds<=30){
	      sb.append(minutes);
        	 sb.append(" Minutes ");
        	 seconds=0
        	 sb.append(seconds);
           sb.append(" Seconds");
        }
        else if (minutes>0 && seconds>30){
        	minutes=minutes+1
        	 sb.append(minutes);
        	 sb.append(" Minutes ");
        	 seconds=0
        	 sb.append(seconds);
           sb.append(" Seconds");
        	}
              
log.info(sb.toString())
       testRunner.testCase.setPropertyValue( "TatfromRestTimegap", sb.toString());
    }

def String getDurationBreakdownMinutes(long tatTotalmillies)
    {
        if(tatTotalmillies < 0)
        {
            throw new IllegalArgumentException("Duration must be greater than zero!");
        }

        long days = TimeUnit.MILLISECONDS.toDays(tatTotalmillies);
        tatTotalmillies -= TimeUnit.DAYS.toMillis(days);
        long hours = TimeUnit.MILLISECONDS.toHours(tatTotalmillies);
        tatTotalmillies -= TimeUnit.HOURS.toMillis(hours);
        long minutes = TimeUnit.MILLISECONDS.toMinutes(tatTotalmillies);
        tatTotalmillies -= TimeUnit.MINUTES.toMillis(minutes);
        long seconds = TimeUnit.MILLISECONDS.toSeconds(tatTotalmillies);

        StringBuilder sb = new StringBuilder(64);
        sb.append(days);
        sb.append(" Days ");
        sb.append(hours);
        sb.append(" Hours ");
        sb.append(minutes);
        sb.append(" Minutes "); 
        sb.append(seconds);
        sb.append(" Seconds");
        
        log.info(sb.toString())
        testRunner.testCase.setPropertyValue( "TatfromTatTotal", sb.toString());
    }

def String getDurationBreakdownMinutes1(long tatNetmillies)
    {
        if(tatNetmillies < 0)
        {
            throw new IllegalArgumentException("Duration must be greater than zero!");
        }

        long days = TimeUnit.MILLISECONDS.toDays(tatNetmillies);
        tatNetmillies -= TimeUnit.DAYS.toMillis(days);
        long hours = TimeUnit.MILLISECONDS.toHours(tatNetmillies);
        tatNetmillies -= TimeUnit.HOURS.toMillis(hours);
        long minutes = TimeUnit.MILLISECONDS.toMinutes(tatNetmillies);
        tatNetmillies -= TimeUnit.MINUTES.toMillis(minutes);
        long seconds = TimeUnit.MILLISECONDS.toSeconds(tatNetmillies);

        StringBuilder sb = new StringBuilder(64);
        sb.append(days);
        sb.append(" Days ");
        sb.append(hours);
        sb.append(" Hours ");
        sb.append(minutes);
        sb.append(" Minutes "); 
        sb.append(seconds);
        sb.append(" Seconds");
        
        log.info(sb.toString())
        testRunner.testCase.setPropertyValue( "tatNetmillies", sb.toString());
    }


    ]]></script></con:config></con:testStep><con:testStep type="groovy" name="Assertion For TatTotal and TatNet1" id="6bc196be-a9bc-4f3a-8a81-011e2f194521"><con:settings/><con:config><script>def tatfromTatTotal = context.expand( '${#TestCase#TatfromTatTotal}' )
def tatfromRestTimegap = context.expand( '${#TestCase#TatfromRestTimegap}' )
def tatNetmillies = context.expand( '${#TestCase#tatNetmillies}' )
def finalTATCal = context.expand( '${#TestCase#FinalTATCal}' )




assert tatfromTatTotal==finalTATCal
assert tatNetmillies==finalTATCal</script></con:config></con:testStep><con:testStep type="delay" name="Delay 3" id="7f0d7cbc-7d45-47e9-befb-f44b7f22d25f"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:properties><con:property><con:name>ChangeDate</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2016-06-03T09:00:36.843Z</con:value></con:property><con:property><con:name>requestedTime</con:name><con:value>2016-06-02T08:03:51.792Z</con:value></con:property><con:property><con:name>BookingDisplayName</con:name><con:value>B-APOS-TEST_ORG_CHILD_ORG_1-CLIENT-FY16Q2-2-V1</con:value></con:property><con:property><con:name>BookingID</con:name><con:value>574fe866e4b03ef4f31c33ff</con:value></con:property><con:property><con:name>TatfromTatTotal</con:name><con:value>1 Days 0 Hours 57 Minutes 0 Seconds</con:value></con:property><con:property><con:name>TatNet</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1497</con:value></con:property><con:property><con:name>tatNetmillies</con:name><con:value>1 Days 0 Hours 57 Minutes 0 Seconds</con:value></con:property><con:property><con:name>TatTotal</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1497</con:value></con:property><con:property><con:name>Timediff</con:name><con:value>9 days, 2 hours, 2 minutes, 47.355 seconds</con:value></con:property><con:property><con:name>TimediffAfterCal</con:name><con:value>9 Days 2 Hours 3 Minutes 0 Seconds</con:value></con:property><con:property><con:name>TimeGap</con:name><con:value/></con:property><con:property><con:name>TimeZone</con:name><con:value>UTC+5:30</con:value></con:property><con:property><con:name>LineItemAmount</con:name><con:value>122</con:value></con:property><con:property><con:name>SOAmount</con:name><con:value>122</con:value></con:property><con:property><con:name>PaAmount</con:name><con:value>122</con:value></con:property><con:property><con:name>PaCurrencyName</con:name><con:value>usd</con:value></con:property><con:property><con:name>PaCurrencyDisplayName</con:name><con:value>USD</con:value></con:property><con:property><con:name>currentDate</con:name><con:value>2016-05-19T15:13:59.469Z</con:value></con:property><con:property><con:name>BookingCount</con:name><con:value>2</con:value></con:property><con:property><con:name>FormatedRequestedDate</con:name><con:value>2016-06-02</con:value></con:property><con:property><con:name>FormatedChangeDate</con:name><con:value>2016-06-03</con:value></con:property><con:property><con:name>TimeDiffMilliesFromDate</con:name><con:value>89805051</con:value></con:property><con:property><con:name>MilliesFromDate</con:name><con:value>0 Hours 57 Minutes 0 Seconds</con:value></con:property><con:property><con:name>BusinessDays</con:name><con:value>1</con:value></con:property><con:property><con:name>FinalTATCal</con:name><con:value>1 Days 0 Hours 57 Minutes 0 Seconds</con:value></con:property><con:property><con:name>CreatedOnDate</con:name><con:value>2016-05-24T00:00:00.000Z</con:value></con:property><con:property><con:name>OppID</con:name><con:value>56705aeee4b074a913da7861</con:value></con:property><con:property><con:name>rate</con:name><con:value>null</con:value></con:property><con:property><con:name>BookingIDs</con:name><con:value>[574fe866e4b03ef4f31c33ff]</con:value></con:property><con:property><con:name>i</con:name><con:value>2</con:value></con:property><con:property><con:name>flag</con:name><con:value>true</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>6bda5a34-450f-427a-af64-6c06a948395d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c7cd9b4b-e847-484c-aef7-6b7380700d73</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f24e4578-6c82-46aa-963a-5be8c0cac063</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>ef6b8989-f85b-439f-b50a-064ecf6480d4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>08492c3e-1c05-4fb7-ac4f-4644aa99fe2d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>cd7dda61-054f-4b73-8ef1-a81f73dcfb35</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>34f3dc72-65dc-4452-98c0-80d30fcc8a99</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>af1e3118-92db-4292-a3a8-d46858c7e2a4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>72ab2170-83ea-44a7-bf57-9bf834b5cea8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>839f97e6-dc3c-4439-9ab6-dca896301400</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d5324741-f6c2-4fb5-823c-44d9919d4d60</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>1cad318f-6582-4a05-b57e-06db5ca349d4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>3e2a5986-441e-4ce6-9444-ca75f22b31be</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>dd698a1e-a85b-4a85-8a9a-0fb4439bc7d0</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>ab7515cf-65fd-4b93-a34a-5d5346f7fbcb</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>94e7c3fb-e9d7-40d3-9f3b-6ad18779398b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d55002b1-04d0-4afa-ad50-a93aec32c62d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>99475280-ebaa-42e2-8501-5370cfbc574a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>06292811-a34e-4f19-a50e-1cd1f5cf80b4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>765fd2ac-a301-41a9-ba84-64d81532e8a9</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a456b592-e36a-42ca-b00a-08cd1eb05d8e</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>1d0d1aff-788c-4763-ab1a-67ebeee6d69f</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>da9cdd96-5fca-433f-baa5-e3f6dbec676c</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c795f1f3-5216-4c33-a35a-da95c566b251</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>1f081106-6f56-43aa-924b-6e3c78728166</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>00f146c5-d1e2-4310-9cf4-ce8ae6c13618</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>777de81b-480b-48d2-85fe-5bc022cfb573</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase id="fe178e0a-3a42-4fa6-aaee-202fea5639f6" discardOkResults="true" failOnError="true" failTestCaseOnErrors="true" keepSession="false" name="Quotes-ClosedUnsuccessfully-Requested during weekday, Completed during weekday; (BUT there is one or more weekends in between Request and Completion)" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="Find Cookie" id="7301a686-6b0d-44a9-b78a-2f45062da652" disabled="true"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>73aca830-7e01-4286-ab3b-cac4c2c3e8ab</con:targetTestCase><con:properties><con:property><con:name>qaDevCookies</con:name><con:value>[avalon.sid=s%3A54cb1cf0e4b004ec636c4d71.OKyf7Hynz6NWePZzjLl5L9azOOkbtfD5ExcpJE%2FUL48</con:value></con:property></con:properties><con:returnProperties><con:entry>qaDevCookies</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="calltestcase" name="fetch salesRep-SellingPeriod" id="ce848a3f-a8d6-464a-9e49-3a5245d0e4d4"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>26ebacc5-4fed-4ce3-9eb3-6e4f6e53ecc4</con:targetTestCase><con:properties><con:property><con:name>server</con:name><con:value>sqa</con:value></con:property><con:property><con:name>oppid</con:name><con:value>5747dd4de4b0fd8205fde0de</con:value></con:property><con:property><con:name>oppname</con:name><con:value>APOS-TEST_ORG-ENTERPRISE-FY16Q4-2</con:value></con:property></con:properties><con:returnProperties><con:entry>server</con:entry><con:entry>oppid</con:entry><con:entry>oppname</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script -CreatedOnDate" id="f471ab3c-5792-4535-ab99-50f242ae7ca8"><con:settings/><con:config><script>import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.text.DateFormat;
import java.util.Date;
import java.util.TimeZone;
import java.util.*
import org.joda.time.DateTime;

DateTime dateTime = new DateTime();
long firstDayOfWeekTimestamp = dateTime.withDayOfWeek(1).getMillis();
log.info firstDayOfWeekTimestamp
// Get calendar set to current date and time
Calendar c = Calendar.getInstance();
	    c.setTime(new Date());
	    c.set(Calendar.HOUR_OF_DAY, 0);
         c.set(Calendar.MINUTE, 0);
         c.set(Calendar.SECOND, 0);
         c.set(Calendar.MILLISECOND, 0);
        
       
// Set the calendar to MONDAY of the current week
c.set(Calendar.DAY_OF_WEEK, Calendar.MONDAY); 



// substract 7 days
// If we give 7 there it will give 8 days back
c.set(Calendar.DAY_OF_MONTH, c.get(Calendar.DAY_OF_MONTH)-30);

// convert to date
Date myDate = c.getTime();

// Print dates of the current week starting on SUNDAY
DateFormat df = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ");
for (int i = 0; i &lt; 1; i++) {
    log.info(df.format(c.getTime()));
 DateFormat df1 = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS");
 log.info(df1.format(c.getTime()));
    //c.add(Calendar.DATE, 1);
    testRunner.testCase.setPropertyValue( "CreatedOnDate", (df1.format(c.getTime()).toString()+"Z"));
}</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script-FIndQuotesRequest" id="eebc415f-e1d3-4ee0-b428-56f446580260"><con:settings/><con:config><script>import groovy.json.*
def serverName = context.expand( '${#TestSuite#serverName}' )
def tenant = context.expand( '${#TestSuite#tenant}' )
def createdOnDate = context.expand( '${#TestCase#CreatedOnDate}' )

if (tenant=="dell" &amp;&amp; serverName =="pe-internal.dev")
{

                def jsonText='''{"filter":{"flows.quoteStages.state.name":"requested","flows.quoteStages.transitions":{"$elemMatch":{"changeDate":{"$gte":"${#TestCase#CreatedOnDate}"},"toState":"requested"}},"isBase":false,"isDraft":false},"params":{"sort":{"systemProperties.createdOn":1},"start":0,"limit":50,"columns":["_id","type","systemProperties","displayName","requestReason","flows.quoteStages.state","flows.quoteStages.target","relationships.requestedBy","relationships.assignee","expirationDate","flows.quoteStages.transitions","dueDate","amount.normalizedAmount","relationships.customer","tags","flows.quoteStages.transitions","flows.quoteStages.transitions"]},"origin":{"component":"AvalonGridDuplo"},"inversesummary":false}'''
}
else
{
                def jsonText='''{"filter":{"flows.quoteStages.state.name":"requested","systemProperties.createdOn":{"$gt":"${#TestCase#CreatedOnDate}"},"isBase":false,"isDraft":false},"params":{"sort":{"dueDate":1},"start":0,"limit":50,"columns":["_id","type","systemProperties","displayName","requestReason","flows.quoteStages.state","flows.quoteStages.target","relationships.requestedBy","relationships.assignee","expirationDate","flows.quoteStages.transitions","dueDate","amount.normalizedAmount","relationships.customer","tags","flows.quoteStages.transitions","flows.quoteStages.transitions"]},"origin":{},"inversesummary":false}'''
}




//{"filter":{"flows.quoteStages.state.name":"requested","systemProperties.createdOn":{"$gt":"${#TestCase#CreatedOnDate}"},"isBase":false,"isDraft":false},"params":{"sort":{"systemProperties.createdOn":1},"start":0,"limit":50,"columns":["_id","type","systemProperties","displayName","requestReason","flows.quoteStages.state","flows.quoteStages.target","relationships.requestedBy","relationships.assignee","expirationDate","flows.quoteStages.transitions","dueDate","amount.normalizedAmount","relationships.customer","tags","flows.quoteStages.transitions","flows.quoteStages.transitions"]},"origin":{"component":"AvalonGridDuplo","url":"#tab/app.quotes/vq=STATUS%3A%20%22Requested%22%20CREATED-ON%3A%20%22%3E04-14-2016%22"},"inversesummary":false}</script></con:config></con:testStep><con:testStep type="restrequest" name="FindQuotes" id="53ff70c3-1c04-4323-9323-a9699ff1d347"><con:settings/><con:config service="FindQuotes" resourcePath="/rest/api/dell/app.quotes::find" methodName="App.quotes::find" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="FindQuotes" id="0303b810-05fa-4e34-9420-745dad712ec3" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Cookie" value="${#TestSuite#Cookie}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://${#TestSuite#serverName}.ssi-cloud.com</con:endpoint><con:request>{"filter":{"tags":{"$nin":[{"$regex":"^TAT_TEST"},{"$regex":"^Functional_QA"}]},"flows.quoteStages.state.name":"requested","systemProperties.createdOn":{"$gte":"${#TestCase#CreatedOnDate}"},"isBase":false,"isDraft":false},"params":{"sort":{"systemProperties.createdOn":1},"start":0,"limit":150,"columns":["_id","type","systemProperties","displayName","requestReason","flows.quoteStages.state","flows.quoteStages.target","relationships.requestedBy","relationships.assignee","expirationDate","flows.quoteStages.transitions","dueDate","amount.normalizedAmount","relationships.customer","tags","flows.quoteStages.transitions","flows.quoteStages.transitions"]},"origin":{"component":"AvalonGridDuplo"},"inversesummary":false}</con:request><con:originalUri>https://qa-internal.dev.ssi-cloud.com/rest/api/dell/app.quotes::find</con:originalUri><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="Property Transfer-QuoteCount" id="320d6280-5a9f-45f2-ac08-d36bba8ca98d"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>QuoteCount</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>FindQuotes</con:sourceStep><con:sourcePath>declare namespace ns1='https://qa-internal.dev.ssi-cloud.com/rest/api/dell/app.quotes::find';
//ns1:Response[1]/ns1:recordCount[1]/ns1:app.quote[1]</con:sourcePath><con:targetType>QuoteCount</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:targetPath/><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="QuoteID" id="ba89bf0e-c6f9-4154-bd2f-a98664f26912"><con:settings/><con:config><script>import groovy.json.JsonSlurper
import com.eviware.soapui.support.XmlHolder
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
def holder = groovyUtils.getXmlHolder(testRunner.testCase.testSteps["FindQuotes"].testRequest.response.getContentAsXml());
def quoteCount = context.expand( '${#TestCase#QuoteCount}' )

log.info quoteCount


def QuoteIDs=[]

                def i=1
                def j=1
                for(node in holder["//ns1:Response[1]/ns1:data[1]/ns1:app.quote[1]/ns1:e[${i}]"])
                {              

               rate = holder.getNodeValue("ns1:Response[1]/ns1:data[1]/ns1:app.quote[1]/ns1:e[${i}]/ns1:amount[1]/ns1:normalizedAmount[1]/ns1:rate[1]")   
               //affinityOrg= holder.getNodeValue("ns1:Response[1]/ns1:data[1]/ns1:app.quote[1]/ns1:e[${i}]/ns1:relationships[1]/ns1:e[2]/ns1:target[1]/ns1:relationships[1]/ns1:affinityOrganization[1]/ns1:targets[1]/ns1:e[1]/ns1:extensions[1]/ns1:tenant[1]/ns1:l0AffinityId[1]/ns1:value[1]")
          
              log.info rate
              //log.info affinityOrg
              if(rate!=null){
              //	 if(rate!=null&amp;&amp; affinityOrg != null){
              	
          
                                id = holder.getNodeValue("ns1:Response[1]/ns1:data[1]/ns1:app.quote[1]/ns1:e[1]/ns1:_id[1]" )
                                QuoteIDs.add(id)                              
                                i=i+1
                                log.info i
                                if(i==quoteCount.toInteger())
                                break;
                }}
testRunner.testCase.setPropertyValue( "rate", rate.toString() ) 
testRunner.testCase.setPropertyValue( "QuoteIDs", QuoteIDs.toString())
testRunner.testCase.setPropertyValue( "quoteCount", i.toString())
log.info QuoteIDs.toString()
def count=0
testRunner.testCase.setPropertyValue( "i", count.toString() )
def flag=false
testRunner.testCase.setPropertyValue( "flag",flag.toString())

</script></con:config></con:testStep><con:testStep type="groovy" name="Counter" id="e8df9844-579f-49fa-b2b4-a2d99919f52a"><con:settings/><con:config><script>def i = context.expand( '${#TestCase#i}' )
log.info i

def quoteID = context.expand( '${#TestCase#QuoteIDs#$[${#TestCase#i}]}' )
log.info quoteID
testRunner.testCase.setPropertyValue( "quoteID", quoteID.toString() )
</script></con:config></con:testStep><con:testStep type="restrequest" name="QuoteDetails" id="a3479882-9a65-4831-b963-10345a075a1c"><con:settings/><con:config service="QuoteDetails" resourcePath="/rest/api/dell/app.quotes::find" methodName="App.quotes::find" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="QuoteDetails" id="73cce1c1-ad05-4f68-83e5-e387a9e63e66" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Cookie" value="${#TestSuite#Cookie}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://${#TestSuite#serverName}.ssi-cloud.com</con:endpoint><con:request>{"inversesummary":true,"extinversesummary":true,"filter":{"_id":"${#TestCase#QuoteID}"},"params":{"start":0,"limit":1},"origin":{"component":"AvalonCollection","url":"#tab/app.quotes/vq=STATUS%3A%20%22Requested%22%20CREATED-ON%3A%20%22%3E04-14-2016%22"}}</con:request><con:originalUri>https://qa-internal.dev.ssi-cloud.com/rest/api/dell/app.quotes::find</con:originalUri><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters>
  <con:entry key="inversesummary" value="true"/>
  <con:entry key="extinversesummary" value="true"/>
</con:parameters><con:parameterOrder><con:entry>inversesummary</con:entry><con:entry>extinversesummary</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="Property Transfer-TimeZone" id="c60269ee-9503-49e2-95e2-61a7665d8dc6"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TimeZone</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>QuoteDetails</con:sourceStep><con:sourcePath>declare namespace ns1='https://qa-internal.dev.ssi-cloud.com/rest/api/dell/app.quotes::find';
//ns1:Response[1]/ns1:data[1]/ns1:app.quote[1]/ns1:e[1]/ns1:extensions[1]/ns1:master[1]/ns1:requestedTimeZone[1]/ns1:value[1]/ns1:displayName[1]</con:sourcePath><con:targetType>TimeZone</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:targetPath/><con:type>XPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TimeZoneKey</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>QuoteDetails</con:sourceStep><con:sourcePath>declare namespace ns1='https://qa-internal.dev.ssi-cloud.com/rest/api/dell/app.quotes::find';
//ns1:Response[1]/ns1:data[1]/ns1:app.quote[1]/ns1:e[1]/ns1:extensions[1]/ns1:master[1]/ns1:requestedTimeZone[1]/ns1:value[1]/ns1:key[1]</con:sourcePath><con:targetType>TimeZoneKey</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>amount1</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>QuoteDetails</con:sourceStep><con:sourcePath>declare namespace ns1='https://qa-internal.dev.ssi-cloud.com/rest/api/dell/app.quotes::find';
//ns1:Response[1]/ns1:data[1]/ns1:app.quote[1]/ns1:e[1]/ns1:amount[1]/ns1:amount[1]</con:sourcePath><con:targetType>amount</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>corelookupKey</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>QuoteDetails</con:sourceStep><con:sourcePath>declare namespace ns1='https://qa-internal.dev.ssi-cloud.com/rest/api/dell/app.quotes::find';
//ns1:Response[1]/ns1:data[1]/ns1:app.quote[1]/ns1:e[1]/ns1:amount[1]/ns1:code[1]/ns1:key[1]</con:sourcePath><con:targetType>coreLookUpKey</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>coreLookUpKEY2</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>QuoteDetails</con:sourceStep><con:sourcePath>declare namespace ns1='https://qa-internal.dev.ssi-cloud.com/rest/api/dell/app.quotes::find';
//ns1:Response[1]/ns1:data[1]/ns1:app.quote[1]/ns1:e[1]/ns1:amount[1]/ns1:normalizedAmount[1]/ns1:code[1]/ns1:key[1]</con:sourcePath><con:targetType>coreLookUpKEY2</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>currencyName1</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>QuoteDetails</con:sourceStep><con:sourcePath>declare namespace ns1='https://qa-internal.dev.ssi-cloud.com/rest/api/dell/app.quotes::find';
//ns1:Response[1]/ns1:data[1]/ns1:app.quote[1]/ns1:e[1]/ns1:amount[1]/ns1:code[1]/ns1:name[1]</con:sourcePath><con:targetType>currencyName1</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false"><con:name>currencyDisplayName1</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>QuoteDetails</con:sourceStep><con:sourcePath>declare namespace ns1='https://qa-internal.dev.ssi-cloud.com/rest/api/dell/app.quotes::find';
//ns1:Response[1]/ns1:data[1]/ns1:app.quote[1]/ns1:e[1]/ns1:amount[1]/ns1:code[1]/ns1:displayName[1]</con:sourcePath><con:targetType>currencyDisplayName1</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:targetPath xsi:nil="true"/><con:type>XPATH</con:type><con:targetTransferType>XPATH</con:targetTransferType><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false"><con:name>currencyDisplayName2</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>QuoteDetails</con:sourceStep><con:sourcePath>declare namespace ns1='https://qa-internal.dev.ssi-cloud.com/rest/api/dell/app.quotes::find';
//ns1:Response[1]/ns1:data[1]/ns1:app.quote[1]/ns1:e[1]/ns1:amount[1]/ns1:normalizedAmount[1]/ns1:code[1]/ns1:displayName[1]</con:sourcePath><con:targetType>currencyDisplayName2</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:targetPath xsi:nil="true"/><con:type>XPATH</con:type><con:targetTransferType>XPATH</con:targetTransferType><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>CurrencyName2</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>QuoteDetails</con:sourceStep><con:sourcePath>declare namespace ns1='https://qa-internal.dev.ssi-cloud.com/rest/api/dell/app.quotes::find';
//ns1:Response[1]/ns1:data[1]/ns1:app.quote[1]/ns1:e[1]/ns1:amount[1]/ns1:normalizedAmount[1]/ns1:code[1]/ns1:name[1]</con:sourcePath><con:targetType>currencyName2</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>amount2</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>QuoteDetails</con:sourceStep><con:sourcePath>declare namespace ns1='https://qa-internal.dev.ssi-cloud.com/rest/api/dell/app.quotes::find';
//ns1:Response[1]/ns1:data[1]/ns1:app.quote[1]/ns1:e[1]/ns1:amount[1]/ns1:normalizedAmount[1]/ns1:amount[1]</con:sourcePath><con:targetType>amount2</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>requestedTime</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>QuoteDetails</con:sourceStep><con:sourcePath>declare namespace ns1='https://qa-internal.dev.ssi-cloud.com/rest/api/dell/app.quotes::find';
//ns1:Response[1]/ns1:data[1]/ns1:app.quote[1]/ns1:e[1]/ns1:flows[1]/ns1:quoteStages[1]/ns1:transitions[1]/ns1:e[2]/ns1:changeDate[1]</con:sourcePath><con:targetType>requestedTime</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="Counter++" id="cbfed8db-a6f7-49ba-9978-c9a8201e7d3b"><con:settings/><con:config><script>import groovy.json.JsonSlurper
import com.eviware.soapui.support.XmlHolder
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
def holder = groovyUtils.getXmlHolder(testRunner.testCase.testSteps["QuoteDetails"].testRequest.response.getContentAsXml());
def flag = context.expand( '${#TestCase#flag}' )                                
//def timeZone = context.expand( '${#TestCase#TimeZone}' )




                          timeZone=holder.getNodeValue("//ns1:Response[1]/ns1:data[1]/ns1:app.quote[1]/ns1:e[1]/ns1:extensions[1]/ns1:master[1]/ns1:requestedTimeZone[1]/ns1:value[1]/ns1:displayName[1]")
                          isrevised=holder.getNodeValue("//ns1:Response[1]/ns1:data[1]/ns1:app.quote[1]/ns1:e[1]/ns1:isRevised[1]")
                          
                                
                                log.info ("Timezone: " + timeZone)
                                log.info isrevised
                        
                                if(isrevised==null &amp;&amp; timeZone != null )
                                {
                            
                                flag==true
                                testRunner.testCase.setPropertyValue( "flag","true")                   
                                }
                                else
                                {
                                	testRunner.testCase.setPropertyValue( "flag","false")   
                                }
                                log.info flag
               
def i = context.expand( '${#TestCase#i}' )
log.info i
def c = i.toInteger()+1
testRunner.testCase.setPropertyValue( "i", c.toString() )
</script></con:config></con:testStep><con:testStep type="groovy" name="Counter Check" id="ed5285ca-5376-42ca-805f-15984cc2d24f"><con:settings/><con:config><script>def i = context.expand( '${#TestCase#i}' )
def quoteCount = context.expand( '${#TestCase#QuoteCount}' )
def flag = context.expand( '${#TestCase#flag}' )
log.info i
log.info quoteCount
log.info flag
if((i.toInteger()&lt;quoteCount.toInteger())&amp;&amp; (flag=="false"))
{
   testRunner.gotoStepByName( "Counter" )
}
else if ((i.toInteger()==quoteCount.toInteger())&amp;&amp; (flag=="false"))
{
	testRunner.gotoStepByName( "Delay 3" );
	log.info ("Test Case Fail : DATA NOT FOUND")
	def DATA_NOT_FOUND="DATA NOT FOUND"
	return DATA_NOT_FOUND
	
    
}
else 
{
    testRunner.gotoStepByName( "Delay 2" )
}</script></con:config></con:testStep><con:testStep type="delay" name="Delay 2" id="3d3a3f3b-85d2-4e01-ba37-9dce821b2540"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:testStep type="restrequest" name="REST Request-test" id="51861a8b-c4b8-4038-a777-048293ca1554" disabled="true"><con:settings/><con:config service="FindQuotes" resourcePath="/rest/api/dell/app.quotes::find" methodName="App.quotes::find" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="REST Request-test" id="0303b810-05fa-4e34-9420-745dad712ec3" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Cookie" value="${#TestSuite#Cookie}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://qa-internal.dev.ssi-cloud.com</con:endpoint><con:request>{"filter":{"_id":"54925f8ae4b002d9d76bc9c8","isBase":false,"isDraft":false},"params":{"sort":{"dueDate":1},"start":0,"limit":50,"columns":["_id","type","systemProperties","displayName","requestReason","flows.quoteStages.state","flows.quoteStages.target","relationships.requestedBy","relationships.assignee","expirationDate","flows.quoteStages.transitions","dueDate","amount.normalizedAmount","relationships.customer","tags","flows.quoteStages.transitions","flows.quoteStages.transitions"]},"origin":{"component":"AvalonGridDuplo"},"inversesummary":false}</con:request><con:originalUri>https://qa-internal.dev.ssi-cloud.com/rest/api/dell/app.quotes::find</con:originalUri><con:credentials><con:username>maria.gomez@dell.com</con:username><con:password>passwordone</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script-CheckBadData" id="3c677545-f76f-430e-a09b-3cc05da8b96a" disabled="true"><con:settings/><con:config><script>//def responseAsXml = context.expand( '${REST Request-test#ResponseAsXml#declare namespace ns1=\'https://qa-internal.dev.ssi-cloud.com/rest/api/dell/app.quotes::find\'; //ns1:Response[1]/ns1:data[1]/ns1:app.quote[1]/ns1:e[1]/ns1:relationships[1]/ns1:e[2]/ns1:target[1]/ns1:relationships[1]/ns1:affinityOrganization[1]}' )
def responseAsXml = context.expand( '${REST Request-test#ResponseAsXml#declare namespace ns1=\'https://qa-internal.dev.ssi-cloud.com/rest/api/dell/app.quotes::find\'; //ns1:Response[1]/ns1:data[1]/ns1:app.quote[1]/ns1:e[1]/ns1:relationships[1]/ns1:e[2]/ns1:target[1]/ns1:relationships[1]/ns1:affinityOrganization[1]/ns1:targets[1]/ns1:e[1]/ns1:extensions[1]/ns1:tenant[1]/ns1:l0AffinityId[1]/ns1:value[1]}' )
def responseAsXml = context.expand( '${REST Request-test#ResponseAsXml#declare namespace ns1=\'https://qa-internal.dev.ssi-cloud.com/rest/api/dell/app.quotes::find\'; //ns1:Response[1]/ns1:data[1]/ns1:app.quote[1]/ns1:e[1]/ns1:relationships[1]/ns1:e[2]/ns1:target[1]/ns1:relationships[1]/ns1:affinityOrganization[1]}' )
</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script-GetQuoteID" id="1da16ca2-45de-41f7-9ba1-d82544ffcab9" disabled="true"><con:settings/><con:config><script>import groovy.json.JsonSlurper
import com.eviware.soapui.support.XmlHolder
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
def holder = groovyUtils.getXmlHolder(testRunner.testCase.testSteps["FindQuotes"].testRequest.response.getContentAsXml());






                def i=1
                def j=1
                
                for(node in holder["//ns1:Response[1]/ns1:data[1]/ns1:app.quote[1]/ns1:e[${i}]/ns1:_id[1]"])
                {              
          rate = holder.getNodeValue("ns1:Response[1]/ns1:data[1]/ns1:app.quote[1]/ns1:e[${i}]/ns1:amount[1]/ns1:normalizedAmount[1]/ns1:rate[1]")   
          affinityOrg= holder.getNodeValue("//ns1:Response[1]/ns1:data[1]/ns1:app.quote[1]/ns1:e[1]/ns1:relationships[1]/ns1:e[2]/ns1:target[1]/ns1:relationships[1]/ns1:affinityOrganization[1]/ns1:targets[1]/ns1:e[1]/ns1:extensions[1]/ns1:tenant[1]/ns1:l0AffinityId[1]/ns1:value[1]")
          
         //log.info rate
       //  log.info affinityOrg
          if(rate!=null)
          //&amp;&amp; affinityOrg != null)
          { 
          	//if(rate.toFloat()==1)

         // {    
          	 def id = holder.getNodeValue("ns1:Response[1]/ns1:data[1]/ns1:app.quote[1]/ns1:e[${i}]/ns1:_id[1]" )
          	                         //ns1:Response[1]/ns1:data[1]/ns1:app.quote[1]/ns1:e[${i}]/ns1:_id[1]
                     //QuoteID.add(id)
                     log.info id
                     j=j+1
                     testRunner.testCase.setPropertyValue( "QuoteID", id.toString() )
                     }
                       
          
               // testRunner.testCase.setPropertyValue( "QuoteID", id.toString() )
                                
                                i=i+1
                                if(j==2)
                                break;
                }
               // }

testRunner.testCase.setPropertyValue( "rate", rate.toString() )
</script></con:config></con:testStep><con:testStep type="transfer" name="Property Transfer-QuoteID" id="1cabef47-9abd-4347-b9b5-b5636ec92e7a" disabled="true"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>QuoteID</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>FindQuotes</con:sourceStep><con:sourcePath>declare namespace ns1='https://qa-internal.dev.ssi-cloud.com/rest/api/dell/app.quotes::find';
//ns1:Response[1]/ns1:data[1]/ns1:app.quote[1]/ns1:e[1]/ns1:_id[1]</con:sourcePath><con:targetType>QuoteID</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:targetPath/><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="true" useXQuery="false"><con:name>QuoteName</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>FindQuotes</con:sourceStep><con:sourcePath>declare namespace ns1='https://qa-internal.dev.ssi-cloud.com/rest/api/dell/app.quotes::find';
//ns1:Response[1]/ns1:data[1]/ns1:app.quote[1]/ns1:e[1]/ns1:displayName[1]</con:sourcePath><con:targetType>QuoteName</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:targetPath xsi:nil="true"/><con:type>XPATH</con:type><con:targetTransferType>XPATH</con:targetTransferType><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="restrequest" name="FindActivities" id="2891ce82-0d32-44f8-b109-be1402f9ea32"><con:settings/><con:config service="FindActivities" resourcePath="/rest/api/dell/core.activities::getrhpactivities" methodName="Core.activities::getrhpactivities" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="FindActivities" id="ec32ed71-dac8-4f9f-8863-509201de0075" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Cookie" value="${#TestSuite#Cookie}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://${#TestSuite#serverName}.ssi-cloud.com</con:endpoint><con:request>{"params":{"sort":{"systemProperties.createdOn":-1},"start":0,"limit":50,"columns":["relatedObjects"]},"origin":{"component":"Duplo_TimelineStream","url":"#tab/core.activities"},"inversesummary":false,"type":"app.quote","key":"${#TestCase#QuoteID}","filter":{"crudBased":false},"configParams":{"includeNotes":true}}</con:request><con:originalUri>https://qa-internal.dev.ssi-cloud.com/rest/api/dell/core.activities::getrhpactivities</con:originalUri><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="Property Transfer-requestedTime" id="3cffcd7a-90b9-4f4f-bec5-5d313a2bdd46"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>requestedTime</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>FindActivities</con:sourceStep><con:sourcePath>declare namespace ns1='https://qa-internal.dev.ssi-cloud.com/rest/api/dell/core.activities::getrhpactivities';
//ns1:Response[1]/ns1:data[1]/ns1:core.activity[1]/ns1:e[1]/ns1:context[1]/ns1:amount[1]/ns1:normalizedAmount[1]/ns1:convertedOn[1]</con:sourcePath><con:targetType>requestedTime</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:targetPath/><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="delay" name="Delay" id="2deac431-e752-4442-bdd9-56b90677109a"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:testStep type="restrequest" name="Create Quote Input" id="9540e598-579a-45c1-8d8b-9d326ab74d9f" disabled="true"><con:settings/><con:config service="Complete Quote" resourcePath="/rest/api/${#TestSuite#tenant}/app.quotes/${#TestCase#QuoteID}::getCreateQuoteInput" methodName="Quote Input" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create Quote Input" mediaType="application/json" postQueryString="false" id="90c1a4a6-e6ad-41a7-b401-21ced1e594b8"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Cookie" value="${#TestSuite#Cookie}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://${#TestSuite#serverName}.ssi-cloud.com</con:endpoint><con:request>{"detail":{"_id":"${#TestCase#QuoteID}","type":"app.quote","displayName":"${#TestCase#QuoteName}"},"selections":[],"origin":{"url":"#detail/app.quotes/${#TestCase#QuoteID}"}}</con:request><con:originalUri>https://pe-internal.dev.ssi-cloud.com/rest/api//app.quotes/::getCreateQuoteInput</con:originalUri><con:credentials><con:username>${#TestSuite#loginId}</con:username><con:password>passwordone</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="ClosedUnsuccessfully-Quote" id="0f3294fb-dc91-47c1-9bbc-6532018948d9"><con:settings/><con:config service="CloseQuoteUnsuccessfully" resourcePath="/rest/api/${#TestSuite#tenant}/app.quotes/${#TestCase#QuoteID}::closeUnsuccessfullyQuote" methodName="5421080ce4b0b9322bdc9d21::closeUnsuccessfullyQuote" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="ClosedUnsuccessfully-Quote" id="1efd95ed-7346-427a-b642-cba0eb57619e" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Cookie" value="${#TestSuite#Cookie}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://${#TestSuite#serverName}.ssi-cloud.com</con:endpoint><con:request>{"note":{"systemProperties":{"transId":[],"expiredOn":"9999-01-01T00:00:00.000Z"},"relationships":[],"notes":[],"attachment":[],"keywords":[],"externalIds":[],"dq":[],"tags":[]},"_id":"${#TestCase#QuoteID}","type":"app.quote.closeunsuccessfully.input","closeUnsuccessfullyReason":{"displayName":"Other","name":"other","type":"app.lookup","key":"50ac01a51f9c0c0000000aba"},"notes":[],"inversesummary":true,"extinversesummary":true,"origin":{"url":"#detail/app.quotes/${#TestCase#QuoteID}"}}</con:request><con:originalUri>https://sqa-internal.dev.ssi-cloud.com/rest/api/dell/app.quotes/5726d2fbe4b0332fef155bfd::closeUnsuccessfullyQuote</con:originalUri><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters>
  <con:entry key="inversesummary" value="true"/>
  <con:entry key="extinversesummary" value="true"/>
</con:parameters><con:parameterOrder><con:entry>inversesummary</con:entry><con:entry>extinversesummary</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Complete Quote" id="b531a311-6a41-405c-9b89-4bfcc3aa06db" disabled="true"><con:settings/><con:config service="Complete Quote" resourcePath="/rest/api/${#TestSuite#tenant}/app.quotes/${#TestCase#QuoteID}::createQuote" methodName="Complete Quote" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Complete Quote" mediaType="application/json" postQueryString="false" id="9b044755-d0bc-491c-bc19-a4996549688b"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Cookie" value="${#TestSuite#Cookie}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://${#TestSuite#serverName}.ssi-cloud.com</con:endpoint><con:request>{"amount":{"code":{"displayName":"${#TestCase#currencyDisplayName1}","name":"${#TestCase#currencyName1}","type":"core.lookup","key":"${#TestCase#coreLookUpKey}"},"amount":"${#TestCase#amount}","type":"core.currency","normalizedAmount":{"amount":"${#TestCase#amount2}","rate":"${#TestCase#rate}","code":{"key":"50ac018e1f9c0c00000001c7","displayName":"USD","type":"core.lookup","name":"usd"},"convertedOn":"2016-05-02T08:45:56.610Z"}},"notes":[],"isAutoCompleted":false,"documents":[],"resellerQuotes":[],"_id":"","type":"app.create.quote.input","priority":{"displayName":"Medium","name":"medium","type":"app.lookup","key":"50ac01a41f9c0c0000000a61"},"creationDate":"2016-05-04T12:16:59.662Z","expirationDate":"2016-06-03T00:00:00.000Z","quote":"${#TestCase#QuoteID}","displayName":"${#TestCase#QuoteName}","quoteNumber":"q1234324","inversesummary":true,"extinversesummary":true,"origin":{}}</con:request><con:originalUri>https://pe-internal.dev.ssi-cloud.com/rest/api//app.quotes/::createQuote</con:originalUri><con:credentials><con:username>${#TestSuite#loginId}</con:username><con:password>passwordone</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="Transfer Quote Number" id="23a2449d-11d7-4f4c-b972-f1fe26d1cf61" disabled="true"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" entitize="false" transferToAll="false" useXQuery="false" transferChildNodes="false"><con:name>quoteNumber</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Complete Quote</con:sourceStep><con:sourcePath>declare namespace ns1='https://${#TestSuite#serverName}.ssi-cloud.com/rest/api/${#TestSuite#tenant}/app.quotes/${#TestSuite#QuoteID}::createQuote';
//ns1:Response[1]/ns1:data[1]/ns1:core.activity[1]/ns1:e[1]/ns1:context[1]/ns1:quoteNumber[1]</con:sourcePath><con:targetType>quoteNumber</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:targetPath/><con:type>XPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>completedDate</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Complete Quote</con:sourceStep><con:sourcePath>$.data.app.opportunity[0].targetAmount.normalizedAmount.convertedOn</con:sourcePath><con:targetType>result</con:targetType><con:targetStep>Groovy Script-TAT Calculations</con:targetStep><con:targetPath/><con:type>JSONPATH</con:type><con:targetTransferType>XPATH</con:targetTransferType><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>convertedOn</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Complete Quote</con:sourceStep><con:sourcePath>$.data.app.opportunity[0].amount.normalizedAmount.convertedOn</con:sourcePath><con:targetType>result</con:targetType><con:targetStep>Groovy Script-TAT Calculations</con:targetStep><con:targetPath/><con:type>JSONPATH</con:type><con:targetTransferType>XPATH</con:targetTransferType><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="restrequest" name="QuoteDetails-Completed" id="26dd645d-9ff4-49ab-80f2-3a59224ae8d7"><con:settings/><con:config service="QuoteDetails" resourcePath="/rest/api/dell/app.quotes::find" methodName="App.quotes::find" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="QuoteDetails-Completed" id="73cce1c1-ad05-4f68-83e5-e387a9e63e66" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Cookie" value="${#TestSuite#Cookie}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://${#TestSuite#serverName}.ssi-cloud.com</con:endpoint><con:request>{"inversesummary":true,"extinversesummary":true,"filter":{"_id":"${#TestCase#QuoteID}"},"params":{"start":0,"limit":1},"origin":{"component":"AvalonCollection","url":"#tab/app.quotes/vq=STATUS%3A%20%22Completed%22%20CREATED-ON%3A%20%22%3E04-24-2016%22"}}</con:request><con:originalUri>https://qa-internal.dev.ssi-cloud.com/rest/api/dell/app.quotes::find</con:originalUri><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters>
  <con:entry key="inversesummary" value="true"/>
  <con:entry key="extinversesummary" value="true"/>
</con:parameters><con:parameterOrder><con:entry>inversesummary</con:entry><con:entry>extinversesummary</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="Property Transfer-TurnaroundTime" id="d9000f2e-ef18-440e-af43-8dd7ea9826b2"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>ChangeDate</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>QuoteDetails-Completed</con:sourceStep><con:sourcePath>declare namespace ns1='https://qa-internal.dev.ssi-cloud.com/rest/api/dell/app.quotes::find';
//ns1:Response[1]/ns1:data[1]/ns1:app.quote[1]/ns1:e[1]/ns1:flows[1]/ns1:quoteStages[1]/ns1:transitions[1]/ns1:e[3]/ns1:changeDate[1]</con:sourcePath><con:targetType>ChangeDate</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TimeGap</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>QuoteDetails-Completed</con:sourceStep><con:sourcePath>declare namespace ns1='https://qa-internal.dev.ssi-cloud.com/rest/api/dell/app.quotes::find';
//ns1:Response[1]/ns1:data[1]/ns1:app.quote[1]/ns1:e[1]/ns1:flows[1]/ns1:quoteStages[1]/ns1:transitions[1]/ns1:e[3]/ns1:timeGap[1]</con:sourcePath><con:targetType>TimeGap</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false"><con:name>TatTotal</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>QuoteDetails-Completed</con:sourceStep><con:sourcePath>declare namespace ns1='https://qa-internal.dev.ssi-cloud.com/rest/api/dell/app.quotes::find';
//ns1:Response[1]/ns1:data[1]/ns1:app.quote[1]/ns1:e[1]/ns1:extensions[1]/ns1:master[1]/ns1:tatTotal[1]/ns1:value[1]</con:sourcePath><con:targetType>TatTotal</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:targetPath/><con:type>XPATH</con:type><con:targetTransferType>XPATH</con:targetTransferType><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TatNet</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>QuoteDetails-Completed</con:sourceStep><con:sourcePath>declare namespace ns1='https://qa-internal.dev.ssi-cloud.com/rest/api/dell/app.quotes::find';
//ns1:Response[1]/ns1:data[1]/ns1:app.quote[1]/ns1:e[1]/ns1:extensions[1]/ns1:master[1]/ns1:tatNet[1]/ns1:value[1]</con:sourcePath><con:targetType>TatNet</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script-FormatRequestedDate" id="8707ec3f-e2d6-4b7e-88f7-9a34ca68fbb0"><con:settings/><con:config><script>import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.text.DateFormat;
import java.util.Date;
import java.util.TimeZone;
def timeZone = context.expand( '${#TestCase#TimeZone}' )


def requestedTime = context.expand( '${#TestCase#requestedTime}' )
log.info requestedTime

String string = requestedTime;
TimeZone tzFromrecord = TimeZone.getTimeZone(timeZone);

SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ");
SimpleDateFormat output = new SimpleDateFormat("yyyy-MM-dd");
//Date d = sdf.parse(time);

Date date = sdf.parse(string.replaceAll("Z", "+0000"));
String nTime = output.format(date);
log.info("string: " + string);
log.info("date: " + date);
log.info("nTime: " + nTime);
testRunner.testCase.setPropertyValue( "FormatedRequestedDate", nTime.toString());</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script- FormatChangeDate" id="1c9fdfb5-382c-47e0-8b8b-b9590bda70ae"><con:settings/><con:config><script>import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.text.DateFormat;
import java.util.Date;
import java.util.TimeZone;
def timeZone = context.expand( '${#TestCase#TimeZone}' )
def changeDate = context.expand( '${#TestCase#ChangeDate}' )

String string = changeDate;
TimeZone tzFromrecord = TimeZone.getTimeZone(timeZone);

SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ");
SimpleDateFormat output = new SimpleDateFormat("yyyy-MM-dd");
//Date d = sdf.parse(time);

Date date = sdf.parse(string.replaceAll("Z", "+0000"));
String nTime = output.format(date);
log.info("string: " + string);
log.info("date: " + date);
log.info("nTime: " + nTime);
testRunner.testCase.setPropertyValue( "FormatedChangeDate", nTime.toString());</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script 5" id="160563ad-2487-4644-97d8-7846e9e71fed"><con:settings/><con:config><script><![CDATA[import java.text.SimpleDateFormat;
import java.util.Date;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.text.DateFormat;
import java.util.TimeZone;
import java.util.concurrent.TimeUnit;
def timeZone = context.expand( '${#TestCase#TimeZone}' )
def changeDate = context.expand( '${#TestCase#ChangeDate}' )
def requestedTime = context.expand( '${#TestCase#requestedTime}' )
log.info requestedTime
log.info changeDate


SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ");
SimpleDateFormat output = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS");
TimeZone tzFromrecord = TimeZone.getTimeZone(timeZone);

//requested Date
Date date = sdf.parse(requestedTime.replaceAll("Z", "+0000"));
String nTime = output.format(date);
myDate = Date.parse("yyyy-MM-dd'T'HH:mm:ss.SSS", nTime) ;
//log.info("string: " + string);
log.info("date: " + date);
log.info("nTime: " + nTime);



//change Date
Date date1 = sdf.parse(changeDate.replaceAll("Z", "+0000"));
log.info("date1: " + date1);

String nTime1 = output.format(date1);
myDate1 = Date.parse("yyyy-MM-dd'T'HH:mm:ss.SSS", nTime1) ;
log.info("myDate1: " + myDate1);
log.info("date1: " + nTime1);

DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS");
//get current date time with Date()
Date date2 = new Date();
log.info("CurrentDate: "+ dateFormat.format(date2));

// Get calendar set to current date and time
Calendar c = Calendar.getInstance();
 	    c.set(Calendar.HOUR_OF_DAY, 0);
         c.set(Calendar.MINUTE, 0);
         c.set(Calendar.SECOND, 0);
         c.set(Calendar.MILLISECOND, 0);
         
         log.info c.getTime();


    
t2=(dateFormat.format(c.getTime()))
t3=(dateFormat.parse(t2))
Timeinhours=(myDate1 - t3);
log.info ("Time: " + Timeinhours);


getTimeDiff(date,date1)

//getDurationBreakdown(timeDiffMilliesFromDate1)




def getTimeDiff(Date dateOne, Date dateTwo) {
            String diff = "";
            long timeDiff = Math.abs(dateOne.getTime() - dateTwo.getTime());
            log.info ("TimeDiff : " + timeDiff);
            testRunner.testCase.setPropertyValue( "TimeDiffMilliesFromDate", timeDiff.toString())
              return timeDiff;
    }

/*def String getDurationBreakdown(long millies)
    {
        if(millies < 0)
        {
            throw new IllegalArgumentException("Duration must be greater than zero!");
        }

        long days = TimeUnit.MILLISECONDS.toDays(millies);
        millies -= TimeUnit.DAYS.toMillis(days);
        long hours = TimeUnit.MILLISECONDS.toHours(millies);
        millies -= TimeUnit.HOURS.toMillis(hours);
        long minutes = TimeUnit.MILLISECONDS.toMinutes(millies);
        millies -= TimeUnit.MINUTES.toMillis(minutes);
        long seconds = TimeUnit.MILLISECONDS.toSeconds(millies);

        StringBuilder sb = new StringBuilder(64);

        sb.append(hours);
        sb.append(" Hours ");
      

        if (minutes==0 && seconds>0){
        	 minutes=minutes+1
        	 sb.append(minutes);
        	 sb.append(" Minutes ");
        	 seconds=0
        	 sb.append(seconds);
           sb.append(" Seconds");
        }
       else if (minutes>0 && seconds>0 && seconds<=30){
       	minutes=minutes
	      sb.append(minutes);
        	 sb.append(" Minutes ");
        	 seconds=0
        	 sb.append(seconds);
           sb.append(" Seconds");
        }
        else if (minutes>0 && seconds>30){
        	minutes=minutes+1
        	 sb.append(minutes);
        	 sb.append(" Minutes ");
        	 seconds=0
        	 sb.append(seconds);
           sb.append(" Seconds");
        	}
            
log.info(sb.toString())
       testRunner.testCase.setPropertyValue( "MilliesFromDate", sb.toString());
    }*/]]></script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script 51" id="a3ac62dc-27c5-4127-bebc-22724c70ff1c"><con:settings/><con:config><script><![CDATA[import java.text.SimpleDateFormat;
import java.util.Date;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.text.DateFormat;
import java.util.TimeZone;
import java.util.concurrent.TimeUnit;

def timeDiffMilliesFromDate = context.expand( '${#TestCase#TimeDiffMilliesFromDate}' )

Long timeDiffMilliesFromDate1 = Long.valueOf(timeDiffMilliesFromDate);

getDurationBreakdown(timeDiffMilliesFromDate1)


def String getDurationBreakdown(long millies)
    {
        if(millies < 0)
        {
            throw new IllegalArgumentException("Duration must be greater than zero!");
        }

        long days = TimeUnit.MILLISECONDS.toDays(millies);
        millies -= TimeUnit.DAYS.toMillis(days);
        long hours = TimeUnit.MILLISECONDS.toHours(millies);
        millies -= TimeUnit.HOURS.toMillis(hours);
        long minutes = TimeUnit.MILLISECONDS.toMinutes(millies);
        millies -= TimeUnit.MINUTES.toMillis(minutes);
        long seconds = TimeUnit.MILLISECONDS.toSeconds(millies);

        StringBuilder sb = new StringBuilder(64);

      
        sb.append(hours);
        sb.append(" Hours ");
       if (minutes==0 && seconds>0){
        	 minutes=minutes+1
        	 sb.append(minutes);
        	 sb.append(" Minutes ");
        	 seconds=0
        	 sb.append(seconds);
           sb.append(" Seconds");
        }
       else if (minutes>0 && seconds>0 && seconds<=30){
       	minutes=minutes
	      sb.append(minutes);
        	 sb.append(" Minutes ");
        	 seconds=0
        	 sb.append(seconds);
           sb.append(" Seconds");
        }
        else if (minutes>0 && seconds>30){
        	minutes=minutes+1
        	 sb.append(minutes);
        	 sb.append(" Minutes ");
        	 seconds=0
        	 sb.append(seconds);
           sb.append(" Seconds");
        	}
            
log.info(sb.toString())
       testRunner.testCase.setPropertyValue( "MilliesFromDate", sb.toString());
    }]]></script></con:config></con:testStep><con:testStep type="groovy" name="BusinessDay Calculation" id="8c1285a9-8b35-4e9e-a155-704d77b3d2ae"><con:settings/><con:config><script><![CDATA[import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.text.DateFormat;
import java.util.Date;
import java.util.TimeZone;
import java.util.*
import org.joda.time.DateTime;

def changeDate = context.expand( '${#TestCase#ChangeDate}' )
def formatedRequestedDate = context.expand( '${#TestCase#FormatedRequestedDate}' )
def formatedChangeDate = context.expand( '${#TestCase#FormatedChangeDate}' )

SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd");
String dateInString = formatedRequestedDate
log.info dateInString
Date date = formatter.parse(dateInString);
log.info(date);
log.info(formatter.format(date));
def projectContext = context.testCase.testSuite.project.context
projectContext.date = date






String dateInString1 = formatedChangeDate		
		
Date date1 = formatter.parse(dateInString1);
log.info(date1);
log.info(formatter.format(date1));

projectContext.date1 = date1

def date3 = projectContext.date1
def date2 = projectContext.date


days(date2,date3)

/*
SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ");
SimpleDateFormat output = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS");
//Date d = sdf.parse(time);



Date Changedate = sdf.parse(changeDate.replaceAll("Z", "+0000"));
String nTime = output.format(Changedate);

DateTime dateTime = new DateTime();
Calendar c = Calendar.getInstance();
	    c.setTime(new Date());
	    c.set(Calendar.HOUR_OF_DAY, 0);
         c.set(Calendar.MINUTE, 0);
         c.set(Calendar.SECOND, 0);
         c.set(Calendar.MILLISECOND, 0);

Date myDate = c.getTime();
log.info ("myDate::" + myDate);

String datediff= (nTime - myDate)
log.info ("datediff::" + datediff)



DateFormat sdf21 = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss"); 
Date date21 = sdf21.parse(datediff);
log.info ("Days :- " +date21.getDay()); 
log.info ("Hours :- " +date21.getHours()); 
log.info ("Min :- " + date21.getMinutes()); 
log.info ("Sec :- " + date21.getSeconds()); 

 StringBuilder sb = new StringBuilder(64);
        sb.append(date21.getHours());
        sb.append(" Hours ");
 if (date21.getMinutes()==0 && seconds>0){
        	 minutes=date21.getMinutes()+1
        	 sb.append(minutes);
        	 sb.append(" Minutes ");
        	 seconds=0
        	 sb.append(seconds);
           sb.append(" Seconds");
        }
       else if (date21.getMinutes()>0 && date21.getSeconds()>0 && date21.getSeconds()<=30){
	      sb.append(date21.getMinutes());
        	 sb.append(" Minutes ");
        	 seconds=0
        	 sb.append(seconds);
           sb.append(" Seconds");
        }
        else if (date21.getMinutes()>0 && date21.getSeconds()>30){
        	minutes=date21.getMinutes()+1
        	 sb.append(minutes);
        	 sb.append(" Minutes ");
        	 seconds=0
        	 sb.append(seconds);
           sb.append(" Seconds");
        	}

log.info("DateDiffAfterCal :- " +sb.toString())
testRunner.testCase.setPropertyValue( "DateDiffAfterCal", sb.toString());

*/




//Business Days Calculation

 long days(Date start, Date end){
    //Ignore argument check

    Calendar c1 = Calendar.getInstance();
    c1.setTime(start);
    int w1 = c1.get(Calendar.DAY_OF_WEEK);
    c1.add(Calendar.DAY_OF_WEEK, -w1);

    Calendar c2 = Calendar.getInstance();
    c2.setTime(end);
    int w2 = c2.get(Calendar.DAY_OF_WEEK);
    c2.add(Calendar.DAY_OF_WEEK, -w2);

    //end Saturday to start Saturday 
    long days = (c2.getTimeInMillis()-c1.getTimeInMillis())/(1000*60*60*24);
    long daysWithoutWeekendDays = days-(days*2/7);

    // Adjust days to add on (w2) and days to subtract (w1) so that Saturday
    // and Sunday are not included
    if (w1 == Calendar.SUNDAY && w2 != Calendar.SATURDAY) {
        w1 = Calendar.MONDAY;
    } else if (w1 == Calendar.SATURDAY && w2 != Calendar.SUNDAY) {
        w1 = Calendar.FRIDAY;
    } 

    if (w2 == Calendar.SUNDAY) {
        w2 = Calendar.MONDAY;
    } else if (w2 == Calendar.SATURDAY) {
        w2 = Calendar.FRIDAY;
    }
    testRunner.testCase.setPropertyValue( "BusinessDays", (daysWithoutWeekendDays-w1+w2).toString());
    return daysWithoutWeekendDays-w1+w2;
}
]]></script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script-TAT Calculations" id="1837edf8-f118-4293-b156-48faf247a93c"><con:settings/><con:config><script><![CDATA[import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.TimeZone;
import java.util.concurrent.TimeUnit;
def quoteID = context.expand( '${#TestCase#QuoteID}' )
def timeZone = context.expand( '${#TestCase#TimeZone}' )
def requestedTime = context.expand( '${#TestCase#requestedTime}' )
def changeDate = context.expand( '${#TestCase#ChangeDate}' )
def timeGap = context.expand( '${#TestCase#TimeGap}' )
def long millies =timeGap.toLong()
def turnaroundTime = context.expand( '${#TestCase#TurnaroundTime}' )
def tatNet = context.expand( '${#TestCase#TatNet}' )
def tatTotal = context.expand( '${#TestCase#TatTotal}' )
def long minutes1 = tatTotal.toLong()
def long tatTotalmillies = minutes1 * 60 * 1000;
def long tatNetmillies = minutes1 * 60 * 1000;
def businessDays = context.expand( '${#TestCase#BusinessDays}' )
def dateDiffAfterCal = context.expand( '${#TestCase#DateDiffAfterCal}' )
def milliesFromDate = context.expand( '${#TestCase#MilliesFromDate}' )


def FinalTATCal = businessDays + " Days " + milliesFromDate
log.info (" FinalTATCal: " + FinalTATCal)
testRunner.testCase.setPropertyValue( "FinalTATCal", FinalTATCal.toString());

//getWorkingDaysBetweenTwoDates( requestedTime,endDate)

getDurationBreakdown(millies)

getDurationBreakdownMinutes(tatTotalmillies)
getDurationBreakdownMinutes1(tatNetmillies)


def String getDurationBreakdown(long millies)
    {
        if(millies < 0)
        {
            throw new IllegalArgumentException("Duration must be greater than zero!");
        }

        long days = TimeUnit.MILLISECONDS.toDays(millies);
        millies -= TimeUnit.DAYS.toMillis(days);
        long hours = TimeUnit.MILLISECONDS.toHours(millies);
        millies -= TimeUnit.HOURS.toMillis(hours);
        long minutes = TimeUnit.MILLISECONDS.toMinutes(millies);
        millies -= TimeUnit.MINUTES.toMillis(minutes);
        long seconds = TimeUnit.MILLISECONDS.toSeconds(millies);

        StringBuilder sb = new StringBuilder(64);
   	   sb.append(days);
        sb.append(" Days ");
        sb.append(hours);
        sb.append(" Hours ");
      

        if (minutes==0 && seconds>0){
        	 minutes=minutes+1
        	 sb.append(minutes);
        	 sb.append(" Minutes ");
        	 seconds=0
        	 sb.append(seconds);
           sb.append(" Seconds");
        }
       else if (minutes>0 && seconds>0 && seconds<=30){
	      sb.append(minutes);
        	 sb.append(" Minutes ");
        	 seconds=0
        	 sb.append(seconds);
           sb.append(" Seconds");
        }
        else if (minutes>0 && seconds>30){
        	minutes=minutes+1
        	 sb.append(minutes);
        	 sb.append(" Minutes ");
        	 seconds=0
        	 sb.append(seconds);
           sb.append(" Seconds");
        	}
              
log.info(sb.toString())
       testRunner.testCase.setPropertyValue( "TatfromRestTimegap", sb.toString());
    }

def String getDurationBreakdownMinutes(long tatTotalmillies)
    {
        if(tatTotalmillies < 0)
        {
            throw new IllegalArgumentException("Duration must be greater than zero!");
        }

        long days = TimeUnit.MILLISECONDS.toDays(tatTotalmillies);
        tatTotalmillies -= TimeUnit.DAYS.toMillis(days);
        long hours = TimeUnit.MILLISECONDS.toHours(tatTotalmillies);
        tatTotalmillies -= TimeUnit.HOURS.toMillis(hours);
        long minutes = TimeUnit.MILLISECONDS.toMinutes(tatTotalmillies);
        tatTotalmillies -= TimeUnit.MINUTES.toMillis(minutes);
        long seconds = TimeUnit.MILLISECONDS.toSeconds(tatTotalmillies);

        StringBuilder sb = new StringBuilder(64);
        sb.append(days);
        sb.append(" Days ");
        sb.append(hours);
        sb.append(" Hours ");
        sb.append(minutes);
        sb.append(" Minutes "); 
        sb.append(seconds);
        sb.append(" Seconds");
        
        log.info(sb.toString())
        testRunner.testCase.setPropertyValue( "TatfromTatTotal", sb.toString());
    }

def String getDurationBreakdownMinutes1(long tatNetmillies)
    {
        if(tatNetmillies < 0)
        {
            throw new IllegalArgumentException("Duration must be greater than zero!");
        }

        long days = TimeUnit.MILLISECONDS.toDays(tatNetmillies);
        tatNetmillies -= TimeUnit.DAYS.toMillis(days);
        long hours = TimeUnit.MILLISECONDS.toHours(tatNetmillies);
        tatNetmillies -= TimeUnit.HOURS.toMillis(hours);
        long minutes = TimeUnit.MILLISECONDS.toMinutes(tatNetmillies);
        tatNetmillies -= TimeUnit.MINUTES.toMillis(minutes);
        long seconds = TimeUnit.MILLISECONDS.toSeconds(tatNetmillies);

        StringBuilder sb = new StringBuilder(64);
        sb.append(days);
        sb.append(" Days ");
        sb.append(hours);
        sb.append(" Hours ");
        sb.append(minutes);
        sb.append(" Minutes "); 
        sb.append(seconds);
        sb.append(" Seconds");
        
        log.info(sb.toString())
        testRunner.testCase.setPropertyValue( "tatNetmillies", sb.toString());
    }


    ]]></script></con:config></con:testStep><con:testStep type="groovy" name="Assertion For TatTotal and TatNet" id="3ec21a4d-8c63-4ce0-8c49-881a021056e1"><con:settings/><con:config><script>def tatfromTatTotal = context.expand( '${#TestCase#TatfromTatTotal}' )
def tatfromRestTimegap = context.expand( '${#TestCase#TatfromRestTimegap}' )
def tatNetmillies = context.expand( '${#TestCase#tatNetmillies}' )
def finalTATCal = context.expand( '${#TestCase#FinalTATCal}' )




assert tatfromTatTotal==finalTATCal
assert tatNetmillies==finalTATCal</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script" id="90a508a5-6cf8-4fd0-a26c-308e6a082169" disabled="true"><con:settings/><con:config><script><![CDATA[import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.text.DateFormat;
import java.util.Date;
import java.util.TimeZone;
import java.util.concurrent.TimeUnit;

def changeDate = context.expand( '${#TestCase#ChangeDate}' )
def requestedTime = context.expand( '${#TestCase#requestedTime}' )
//log.info requestedTime
//log.info changeDate

//String string = requestedTime;
//String string1 = changeDate;

SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ");
SimpleDateFormat output = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS");


//requested Date
Date date = sdf.parse(requestedTime.replaceAll("Z", "+0000"));
String nTime = output.format(date);
myDate = Date.parse("yyyy-MM-dd'T'HH:mm:ss.SSS", nTime) ;
//log.info("string: " + string);
log.info("date: " + nTime);




//change Date
Date date1 = sdf.parse(changeDate.replaceAll("Z", "+0000"));
String nTime1 = output.format(date1);
myDate1 = Date.parse("yyyy-MM-dd'T'HH:mm:ss.SSS", nTime1) ;
log.info("myDate1: " + myDate1);
log.info("date: " + nTime1);

days(myDate,myDate1);



long days(Date start, Date end){
    //Ignore argument check

    Calendar c1 = Calendar.getInstance();
    c1.setTime(start);
   /* c1.set(Calendar.HOUR_OF_DAY, 0);
    c1.set(Calendar.MINUTE, 0);
    c1.set(Calendar.SECOND, 0);
    c1.set(Calendar.MILLISECOND, 0);*/
    
    int w1 = c1.get(Calendar.DAY_OF_WEEK);
    c1.add(Calendar.DAY_OF_WEEK, -w1);

    Calendar c2 = Calendar.getInstance();
    c2.setTime(end);
      
    int w2 = c2.get(Calendar.DAY_OF_WEEK);
    c2.add(Calendar.DAY_OF_WEEK, -w2);

    //end Saturday to start Saturday 
    long days = (c2.getTimeInMillis()-c1.getTimeInMillis())/(1000*60*60*24);
    long daysWithoutWeekendDays = days-(days*2/7);

    // Adjust days to add on (w2) and days to subtract (w1) so that Saturday
    // and Sunday are not included
    if (w1 == Calendar.SUNDAY && w2 != Calendar.SATURDAY) {
        w1 = Calendar.MONDAY;
    } else if (w1 == Calendar.SATURDAY && w2 != Calendar.SUNDAY) {
        w1 = Calendar.FRIDAY;
    } 

    if (w2 == Calendar.SUNDAY) {
        w2 = Calendar.MONDAY;
    } else if (w2 == Calendar.SATURDAY) {
        w2 = Calendar.FRIDAY;
    }
log.info (daysWithoutWeekendDays-w1+w2)
    return daysWithoutWeekendDays-w1+w2;
}

DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS");
//get current date time with Date()
Date date2 = new Date();
log.info(dateFormat.format(date2));
//log.info firstDayOfWeekTimestamp
// Get calendar set to current date and time
Calendar c = Calendar.getInstance();
 	    c.set(Calendar.HOUR_OF_DAY, 0);
         c.set(Calendar.MINUTE, 0);
         c.set(Calendar.SECOND, 0);
         c.set(Calendar.MILLISECOND, 0);
         
         log.info c.getTime();


    
t2=(dateFormat.format(c.getTime()))
t2=(dateFormat.parse(t2))
Timeinhours=(myDate1 - t2);
log.info ("Time: " + Timeinhours);

getDurationBreakdown(Timeinhours)


def String getDurationBreakdown(long Timeinhours)
    {
        if(Timeinhours < 0)
        {
            throw new IllegalArgumentException("Duration must be greater than zero!");
        }

        long days = TimeUnit.MILLISECONDS.toDays(Timeinhours);
        Timeinhours -= TimeUnit.DAYS.toMillis(days);
        long hours = TimeUnit.MILLISECONDS.toHours(Timeinhours);
        Timeinhours -= TimeUnit.HOURS.toMillis(hours);
        long minutes = TimeUnit.MILLISECONDS.toMinutes(Timeinhours);
        Timeinhours -= TimeUnit.MINUTES.toMillis(minutes);
        long seconds = TimeUnit.MILLISECONDS.toSeconds(Timeinhours);

        StringBuilder sb = new StringBuilder(64);
       
        sb.append(hours);
        sb.append(" Hours ");
      

        if (minutes==0 && seconds>0){
        	 minutes=minutes+1
        	 sb.append(minutes);
        	 sb.append(" Minutes ");
        	 seconds=0
        	 sb.append(seconds);
           sb.append(" Seconds");
        }
       else if (minutes>0 && seconds>0 && seconds<=30){
	      sb.append(minutes);
        	 sb.append(" Minutes ");
        	 seconds=0
        	 sb.append(seconds);
           sb.append(" Seconds");
        }
        else if (minutes>0 && seconds>30){
        	minutes=minutes+1
        	 sb.append(minutes);
        	 sb.append(" Minutes ");
        	 seconds=0
        	 sb.append(seconds);
           sb.append(" Seconds");
        	}
              
log.info(sb.toString())


    }


]]></script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script 2" id="c74e9805-be17-4e0b-ab25-a400bc965983" disabled="true"><con:settings/><con:config><script>import java.util.Calendar;
import java.text.SimpleDateFormat;
def changeDate = context.expand( '${#TestCase#ChangeDate}' )
def requestedTime = context.expand( '${#TestCase#requestedTime}' )

SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ");
SimpleDateFormat output = new SimpleDateFormat("yyyy-MM-dd");


Date date = sdf.parse(requestedTime.replaceAll("Z", "+0000"));
String nTime = output.format(date);
def myDate = Date.parse("yyyy-MM-dd", nTime) as Date;
//Date nTime = output.format(myDate);

//log.info("string: " + string);
log.info("date: " + nTime);


Date date1 = sdf.parse(changeDate.replaceAll("Z", "+0000"));
String nTime1 = output.format(date1);
def myDate1 = Date.parse("yyyy-MM-dd", nTime1) as Date;
//log.info("string: " + string1);
log.info("date: " + nTime1);

WeekdayTest(myDate,myDate1)


long WeekdayTest(Date startdate,Date enddate)
{
 
 
    SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
    try
    {
      //Date start = sdf.parse(startdate);
      Calendar start = Calendar.getInstance();
      start.setTime(sdf.parse(startdate));
      //Date end = sdf.parse(enddate);
      Calendar end = Calendar.getInstance();
      end.setTime(sdf.parse(enddate));
      int workingDays = 0;
      while(!start.after(end))//removed ; (semi-colon)
      {
        //int day = start.getDay();
        int day = start.get(Calendar.DAY_OF_WEEK);
        //if ((day != Calendar.SATURDAY) || (day != Calendar.SUNDAY)) if it's sunday, != to Saturday is true
        if ((day != Calendar.SATURDAY) &amp;&amp; (day != Calendar.SUNDAY))
        workingDays++;
        //log.info(workingDays);//moved
        start.add(Calendar.DATE, 1);//removed comment tags
      }
      log.info(workingDays);
    }
    catch(Exception e)
    {
      e.printStackTrace();
    }
  }
</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script 3" id="b5644e86-4c09-48e6-8782-9a77e88903a4" disabled="true"><con:settings/><con:config><script>import lotus.domino.*; 
import java.util.*; 
import java.text.*; 
import java.math.*; 
import java.util.Calendar;
import java.text.SimpleDateFormat;
import java.text.DateFormat;
import java.util.Date;
import java.util.TimeZone;

def changeDate = context.expand( '${#TestCase#ChangeDate}' )
def requestedTime = context.expand( '${#TestCase#requestedTime}' )

SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ");
SimpleDateFormat output = new SimpleDateFormat("yyyy-MM-dd");


Date date = sdf.parse(requestedTime.replaceAll("Z", "+0000"));
String nTime = output.format(date);
log.info("date: " + nTime);


Date date1 = sdf.parse(changeDate.replaceAll("Z", "+0000"));
String nTime1 = output.format(date1);
log.info("date: " + nTime1);




public class CalcBusinessDays  { 

public void NotesMain() { 
Date startTime = null
Date endTime = null; 
String startTimeStr, endTimeStr, result; 

try { 
Session session = getSession(); 
AgentContext agentContext = session.getAgentContext(); 

startTimeStr = nTime; 
endTimeStr = nTime1; 
startTime = session.createDateTime(startTimeStr); 
endTime = session.createDateTime(endTimeStr); 
result = diffInWeekdays(startTime, endTime, startTimeStr, 
endTimeStr); 
System.out.println("Result = " + result); 

} catch(Exception e) { 
e.printStackTrace(); 
} 
} 

public String diffInWeekdays(DateTime startTime, DateTime endTime, String 
startTimeStr, String endTimeStr) { 
String res = ""; 
try { 
Date firstDate = null, secondDate = null; 
int diffInt = endTime.timeDifference(startTime); 
int diffIntDays = (diffInt / 86400 + 1); 
BigInteger sev = BigInteger.valueOf(7); 
BigInteger minusTwo = BigInteger.valueOf(-2); 
BigInteger bis = BigInteger.valueOf(getWeekday(firstDate = 
dateConvert(startTimeStr))); 
BigInteger bie = BigInteger.valueOf(getWeekday(secondDate = 
dateConvert(endTimeStr))); 
int strtDay = bis.mod(sev).intValue(); 
int endDay = bie.mod(sev).intValue(); 
int max = minusTwo.max(BigInteger.valueOf(strtDay * -1)).intValue(); 
int min = BigInteger.valueOf(1).min(bie.mod(sev)).intValue(); 
int result = (diffIntDays - endDay + strtDay - 8) * 5 / 7 - max - min 
+ 5 - strtDay + endDay; 
//o.println("result =\t" + result); 
res = Integer.toString(result); 
} catch (Exception e) { 
e.printStackTrace(); 
} 
return res; 
} 

public Date dateConvert(String dt) { 
SimpleDateFormat sdf = new SimpleDateFormat("mm/dd/yyyy"); 
ParsePosition pos = new ParsePosition(0); 
Date covDate = sdf.parse(dt, pos); 
return covDate; 
} 

public int getWeekday(Date cdt) { 
Calendar cal = Calendar.getInstance(); 
cal.setTime(cdt); 
return cal.get(Calendar.DAY_OF_WEEK); 
} 

}</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script 4" id="bc8461e0-e35c-4aa4-b85e-9c198eb94e51" disabled="true"><con:settings/><con:config><script>import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.text.DateFormat;
import java.util.Date;
import java.util.TimeZone;

def changeDate = context.expand( '${#TestCase#ChangeDate}' )
def requestedTime = context.expand( '${#TestCase#requestedTime}' )

String startDateString = requestedTime;
    DateFormat df = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ"); 
    Date startDate;
//SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ");
//SimpleDateFormat output = new SimpleDateFormat("yyyy-MM-dd");
    
    
        startDate = df.parse(startDateString);
        String newDateString = df.format(startDate);
        log.info(newDateString);
   </script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script 6" id="329305f4-ff13-4720-b68c-4545ac681bc1"><con:settings/><con:config><script>import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.text.DateFormat;
import java.util.Date;
import java.util.TimeZone;

def requestedTime = context.expand( '${#TestCase#requestedTime}' )
def changeDate = context.expand( '${#TestCase#ChangeDate}' )

SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ");

String string = requestedTime;
Date date = sdf.parse(string.replaceAll("Z", "+0000"));

String string1 = changeDate;
Date date1 = sdf.parse(string1.replaceAll("Z", "+0000"));












getWorkingDaysBetweenTwoDates(date, date1)


def getWorkingDaysBetweenTwoDates(Date startDate, Date endDate) {
    Calendar startCal = Calendar.getInstance();
    startCal.setTime(startDate);        

    Calendar endCal = Calendar.getInstance();
    endCal.setTime(endDate);

    int workDays = 0;

    //Return 0 if start and end are the same
    if (startCal.getTimeInMillis() == endCal.getTimeInMillis()) {
        return 0;
    }

    if (startCal.getTimeInMillis() > endCal.getTimeInMillis()) {
        startCal.setTime(endDate);
        endCal.setTime(startDate);
    }





    while (startCal.getTimeInMillis() &lt; endCal.getTimeInMillis()) //excluding end date 
    {
       //excluding start date
        startCal.add(Calendar.DAY_OF_MONTH, 1);
        if (startCal.get(Calendar.DAY_OF_WEEK) != Calendar.SATURDAY &amp;&amp; startCal.get(Calendar.DAY_OF_WEEK) != Calendar.SUNDAY) {
            ++workDays;
            continue
        }
    } 
    
    log.info workDays
    return workDays;
}</script></con:config></con:testStep><con:testStep type="delay" name="Delay 3" id="14043caa-4fb9-4512-920a-a5d1181da7b1"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:properties><con:property><con:name>amount</con:name><con:value>3929.1</con:value></con:property><con:property><con:name>amount2</con:name><con:value>4303.5</con:value></con:property><con:property><con:name>ChangeDate</con:name><con:value>2016-06-03T07:02:47.946Z</con:value></con:property><con:property><con:name>completedDate</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>coreLookUpKey</con:name><con:value>51a67a6116a8afd0f000c38a</con:value></con:property><con:property><con:name>coreLookUpKEY2</con:name><con:value>51a6796716a8afd0f00001c5</con:value></con:property><con:property><con:name>CreatedOnDate</con:name><con:value>2016-04-30T00:00:00.000Z</con:value></con:property><con:property><con:name>currency</con:name><con:value>GBP</con:value></con:property><con:property><con:name>currencyDisplayName1</con:name><con:value>EUR</con:value></con:property><con:property><con:name>currencyDisplayName2</con:name><con:value>USD</con:value></con:property><con:property><con:name>currencyName1</con:name><con:value>eur</con:value></con:property><con:property><con:name>currencyName2</con:name><con:value>usd</con:value></con:property><con:property><con:name>FormatedChangeDate</con:name><con:value>2016-06-03</con:value></con:property><con:property><con:name>FormatedRequestedDate</con:name><con:value>2016-05-02</con:value></con:property><con:property><con:name>FormatedTime</con:name><con:value/></con:property><con:property><con:name>QuoteID</con:name><con:value>5726d2fbe4b0332fef155bfd</con:value></con:property><con:property><con:name>QuoteName</con:name><con:value>Q-APOS-ADT FIRE &amp; SECURITY PLC_GB7595878-ENTERPRISE-FY17Q2-1-V1</con:value></con:property><con:property><con:name>quoteNumber</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rate</con:name><con:value>24.019</con:value></con:property><con:property><con:name>requestedTime</con:name><con:value>2016-05-02T04:09:41.950Z</con:value></con:property><con:property><con:name>TatfromRestTimegap</con:name><con:value>32 Days 2 Hours 53 Minutes 0 Seconds</con:value></con:property><con:property><con:name>TatfromTatTotal</con:name><con:value>24 Days 2 Hours 53 Minutes 0 Seconds</con:value></con:property><con:property><con:name>TatNet</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">34733</con:value></con:property><con:property><con:name>tatNetmillies</con:name><con:value>24 Days 2 Hours 53 Minutes 0 Seconds</con:value></con:property><con:property><con:name>TatTotal</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">34733</con:value></con:property><con:property><con:name>TimeGap</con:name><con:value>2775185996</con:value></con:property><con:property><con:name>TimeZone</con:name><con:value>UTC+5:30</con:value></con:property><con:property><con:name>TimeZoneKey</con:name><con:value>56e1da90e4b0d50806e89b28</con:value></con:property><con:property><con:name>TurnaroundTime</con:name><con:value>1597</con:value></con:property><con:property><con:name>BusinessDays</con:name><con:value>24</con:value></con:property><con:property><con:name>DateDiffAfterCal</con:name><con:value>11 Hours 4 Minutes 0 Seconds</con:value></con:property><con:property><con:name>FinalTATCal</con:name><con:value>24 Days 2 Hours 53 Minutes 0 Seconds</con:value></con:property><con:property><con:name>TimeDiffMilliesFromDate</con:name><con:value>2775185996</con:value></con:property><con:property><con:name>MilliesFromDate</con:name><con:value>2 Hours 53 Minutes 0 Seconds</con:value></con:property><con:property><con:name>QuoteCount</con:name><con:value>14</con:value></con:property><con:property><con:name>QuoteIDs</con:name><con:value>[5726d2fbe4b0332fef155bfd, 5726d2fbe4b0332fef155bfd, 5726d2fbe4b0332fef155bfd, 5726d2fbe4b0332fef155bfd, 5726d2fbe4b0332fef155bfd, 5726d2fbe4b0332fef155bfd, 5726d2fbe4b0332fef155bfd, 5726d2fbe4b0332fef155bfd, 5726d2fbe4b0332fef155bfd, 5726d2fbe4b0332fef155bfd, 5726d2fbe4b0332fef155bfd, 5726d2fbe4b0332fef155bfd, 5726d2fbe4b0332fef155bfd]</con:value></con:property><con:property><con:name>i</con:name><con:value>1</con:value></con:property><con:property><con:name>flag</con:name><con:value>true</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>565b2dc4-7449-4b6f-81e5-769876332c1d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f7082c85-4cad-4583-8916-c4ddebc80bdf</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a9cb2192-c985-42b1-aa03-c50fb66513c5</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>4ac99e45-c8c2-4ccc-a51b-76cb2e646806</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c7fdb326-e063-4c74-9aad-0acf499d4dd7</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>75db7e36-b76d-4d6b-bebb-a7f8597414ac</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>75a66777-ac12-46da-b588-95f8e4a2fbe1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b3c9e5f4-2c4c-4317-8690-671eb1d10547</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>36de390e-18b9-4a86-8bd5-ed217f0f77e6</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b39da542-5b76-4092-a9e3-218fd95a7312</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>45a71677-842e-4025-96f3-f8b1d61d32e2</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e6af9544-c8ae-40d3-a064-77deeb7a0673</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>064218e9-140f-4057-8c20-770e7de29981</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>bf79a040-59cc-48d2-9cc2-96c9b65264af</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>84108142-f487-43bd-a3b2-04a75b8f8c30</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>eae831b7-6f90-4592-975b-9728236cc09c</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>693a596b-d976-44cb-8ce2-8220710ab521</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>05503d7d-cc78-46e8-9155-809ee44ca432</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>3328f2ff-1698-41b1-954d-d6d4fd1196f3</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b0aaf993-c41a-4388-9ab4-d6f42a4defee</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>316e5fa2-37e9-451c-a491-6ffd530944fa</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>10b7671e-4603-48a1-b2ab-e8581543104b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>4732fbfc-2ac6-4378-9541-fda5205029fe</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>8764318a-63cb-47da-a5d0-31195f054f5e</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0f3294fb-dc91-47c1-9bbc-6532018948d9</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a3ac62dc-27c5-4127-bebc-22724c70ff1c</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:properties><con:property><con:name>serverName</con:name><con:value>sqa-internal.dev</con:value></con:property><con:property><con:name>loginID</con:name><con:value>maria.gomez@dell.com</con:value></con:property><con:property><con:name>password</con:name><con:value>passwordone</con:value></con:property><con:property><con:name>tenant</con:name><con:value>dell</con:value></con:property><con:property><con:name>Cookie</con:name><con:value>[avalon.sid=s%3A57514695e4b0a87586540edc.zVyKEyaoLDlUbmmddbZhxgmYoYQdrZdt7HBuBOj5XL8</con:value></con:property><con:property><con:name>salesRep</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">APOS check</con:value></con:property><con:property><con:name>salesRepKey</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">51a6855672338ce8f002a3d0</con:value></con:property><con:property><con:name>targetPeriod</con:name><con:value>fy17q2</con:value></con:property><con:property><con:name>targetPeriodDName</con:name><con:value>FY17Q2</con:value></con:property><con:property><con:name>targetPeriodKey</con:name><con:value>565f92e9e4b0445f11dcaf7e</con:value></con:property><con:property><con:name>enddate</con:name><con:value>2016-07-30T12:00:00.000Z</con:value></con:property><con:property><con:name>startDate</con:name><con:value>2016-04-30T12:00:00.000Z</con:value></con:property><con:property><con:name>server</con:name><con:value>sqa</con:value></con:property><con:property><con:name>QuoteCount</con:name><con:value/></con:property></con:properties><con:reportParameters/></con:testSuite><con:requirements/><con:properties><con:property><con:name>version</con:name><con:value>frb1</con:value></con:property></con:properties><con:wssContainer/><con:databaseConnectionContainer/><con:oAuth2ProfileContainer/><con:reporting><con:reportTemplates/><con:xmlTemplates/><con:xmlTemplates/><con:parameters/><con:parameters/></con:reporting><con:reporting/><con:eventHandlers type="SubmitListener.beforeSubmit" name="SubmitListener.beforeSubmit"><con:script>import com.eviware.soapui.support.types.StringToStringMap

def headers = new StringToStringMap()

headers.put("Cookie", '${#TestSuite#Cookie}')

submit.request.setRequestHeaders(headers)</con:script></con:eventHandlers><con:authRepository/><con:tags/></con:soapui-project>